/*/*******************************************************************************
** Copyright (c) 2005 Silicon Graphics, Inc. All Rights Reserved.
**
** This library is free software; you can redistribute it and/or modify it under
** the terms of the GNU Lesser General Public License as published by the Free
** Software Foundation; either version 2.1 of the License, or (at your option)
** any later version.
**
** This library is distributed in the hope that it will be useful, but WITHOUT
** ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
** details.
**
** You should have received a copy of the GNU Lesser General Public License
** along with this library; if not, write to the Free Software Foundation, Inc.,
** 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*******************************************************************************/

/** @file
 *
 * Message database.
 *
 */

/*********************************************/
// COMMAND Related topics
/*********************************************/
char *cmd_expAttach_related[] = {
    "<expId>",
    "<expType>",
    "<target>",
    "<lists>"
};

char *cmd_expClose_related[] = {
    "<expId>"
};

char *cmd_expCreate_related[] = {
    "<expId>",
    "<expType>",
    "<target>",
    "<lists>"
};

char *cmd_expDetach_related[] = {
    "<expId>",
    "<expType>",
    "<target>",
    "<lists>"
};

char *cmd_expDisable_related[] = {
    "<expId>"
};

char *cmd_expEnable_related[] = {
    "<expId>"
};

char *cmd_expFocus_related[] = {
    "<expId>"
};

char *cmd_expGo_related[] = {
    "<expId>"
};

char *cmd_expPause_related[] = {
    "<expId>"
};

char *cmd_expRestore_related[] = {
    "<expId>",
    "<file_name>"
};

char *cmd_expSave_related[] = {
    "<expId>",
    "<file_name>"
};

char *cmd_expSetParam_related[] = {
    "<expId>",
    "<file_name>",
    "<Param>",
    "listParams"
};

char *cmd_expStatus_related[] = {
    "<expId>"
};

char *cmd_expView_related[] = {
    "<expId>",
    "<viewType>",
    "<expMetric>",
    "<target>",
    "listTypes",
    "listMetrics",
    "<lists>"
};

char *cmd_list_related[] = {
    "<listBreaks>",
    "<listExp>",
    "<listExpTypes>",
    "<listHosts>",
    "<listMetrics>",
    "<listObj>",
    "<listParams>",
    "<listPids>",
    "<listRanks>",
    "<listSrc>",
    "<listThreads>",
    "<listTypes>",
    "<listViews>"
};

char *cmd_listBreaks_related[] = {
    "<expId>"
};

char *cmd_listExp_related[] = {
    "<expId>"
};

char *cmd_listHosts_related[] = {
    "<expId>"
};

char *cmd_listMetrics_related[] = {
    "<expId>",
    "<expType>",
    "<lists>"
};

char *cmd_listObj_related[] = {
    "<expId>",
    "<target>"
};

char *cmd_listParams_related[] = {
    "<expId>",
    "<expType>",
    "<lists>"
};

char *cmd_listPids_related[] = {
    "<expId>",
    "<host_name>",
    "<lists>"
};

char *cmd_listRanks_related[] = {
    "<expId>",
    "<target>"
};

char *cmd_listSrc_related[] = {
    "<expId>",
    "<target>"
};

char *cmd_listStatus_related[] = {
    "<expId>"
};

char *cmd_listThreads_related[] = {
    "<expId>",
    "<target>"
};

char *cmd_listTypes_related[] = {
    "<expId>"
};

char *cmd_listViews_related[] = {
    "<expId>",
    "<expType>"
};

char *cmd_clearBreak_related[] = {
    "<breakId>"
};

char *cmd_exit_related[] = {
//    ""
};

char *cmd_help_related[] = {
//    ""
};

char *cmd_history_related[] = {
//    ""
};

char *cmd_log_related[] = {
    "<file_name>"
};

char *cmd_openGui_related[] = {
//    ""
};

char *cmd_playBack_related[] = {
    "<file_name>"
};

char *cmd_record_related[] = {
    "<file_name>"
};

char *cmd_setBreak_related[] = {
    "<expId>",
    "<target>"
};


/*********************************************/
// COMMAND ARGUMENTS
/*********************************************/
char *cmd_expAttach_args[] = {
    "expAttach [ -v mpi] [ -x <expId> ] [ <target_list> ] [ <expType_list> ]"
};

char *cmd_expClose_args[] = {
    "expClose [ -v kill,all ]",
    "expClose [ -v kill ] [ -x <expId> ]"
};

char *cmd_expCreate_args[] = {
    "<expId> = expCreate [ -v mpi] [ <target_list> ] [ <expType_list> ]"
};

char *cmd_expDetach_args[] = {
    "expDetach [ -x <expId> ] [ <target_list> ] [ <expType_list> ]"
};

char *cmd_expDisable_args[] = {
    "expDisable [ -v all || -x <expId> ]"
};

char *cmd_expEnable_args[] = {
    "expEnable [ -v all || -x <expId> ]"
};

char *cmd_expFocus_args[] = {
    "<expId> = expFocus [ -x <expId> ]"
};

char *cmd_expGo_args[] = {
    "expGo [ -v all || -x <expId> ]"
};

char *cmd_expPause_args[] = {
    "expPause [ -v all || -x <expId> ]"
};

char *cmd_expRestore_args[] = {
    "<exp_Id> = expRestore -f <file_name>"
};

char *cmd_expSave_args[] = {
    "expSave [-v copy] [-x <expId>] -f <file_name>"
};

char *cmd_expSetParam_args[] = {
    "expSetParam [-x <expId>] <expParam>=<expParamValue> [, <expParam>=<expParamValue>] ... "
};

char *cmd_expStatus_args[] = {
    "expStatus [-v all || -x <expId>]"
};

char *cmd_expView_args[] = {
    "expView [-v <modifier_list>] [-x <expId>] [<viewType>] [-m <expMetric_list>] [<target_spec>]"
};

char *cmd_list_args[] = {
    "<ListOf_info> = list -v <listType> [-v all || -x <expId>]"
};

char *cmd_listBreaks_args[] = {
    "<ListOf_breakId> = list -v breaks ",
    "<ListOf_breakId> = list -v breaks,all",
    "<ListOf_breakId> = list -v breaks -x <expId>"
};

char *cmd_listExp_args[] = {
    "<ListOf_expId> = list -v expId"
};

char *cmd_listHosts_args[] = {
    "<ListOf_hostname> = list -v hosts",
    "<ListOf_hostname> = list -v hosts -x <expId>"
};

char *cmd_listMetrics_args[] = {
    "<ListOf_expMetric> = list -v metrics",
    "<ListOf_expMetric> = list -v metrics,all ",
    "<ListOf_expMetric> = list -v metrics -x <expId>",
    "<ListOf_expMetric> = list -v metrics <expType>"
};

char *cmd_listObj_args[] = {
    "<ListOf_filename> = list -v obj [-x <expId>] [<target>]"
};

char *cmd_listParams_args[] = {
    "<ListOf_expParam> = list -v params",
    "<ListOf_expParam> = list -v params,all",
    "<ListOf_expParam> = list -v params -x <expId>",
    "<ListOf_expParam> = list -v params <expType>"
};

char *cmd_listPids_args[] = {
    "<ListOf_pidname> = list -v pids [-x <expId>] [-h <host_name> [ , <host_name> ]*]"
};

char *cmd_listRanks_args[] = {
    "<ListOf_Ranks> = list -v ranks [-x <expId> ] [ <target>]"
};

char *cmd_listSrc_args[] = {
    "<ListOf_filename> = list -v src [-x <expId>] [<target>]"
};

char *cmd_listStatus_args[] = {
    "<ListOf_statusType> = list -v status",
    "<ListOf_statusType> = list -v status,all",
    "<ListOf_statusType> = list -v status -x <expId>"
};

char *cmd_listThreads_args[] = {
    "<ListOf_Threads> = list -v threads [-x <expId>] [<target>]"
};

char *cmd_listTypes_args[] = {
    "<ListOf_expType> = list -v expType",
    "<ListOf_expType> = list -v expType,all",
    "<ListOf_expType> = list -v expType -x <expId>"
};

char *cmd_listViews_args[] = {
    "<ListOf_viewType> = list -v views",
    "<ListOf_viewType> = list -v views,all",
    "<ListOf_viewType> = list -v views -x <expId>",
    "<ListOf_viewType> = list -v views <expType>"
};

char *cmd_clearBreak_args[] = {
    "clearBreak <breakId>"
};

char *cmd_exit_args[] = {
    "exit"
};

char *cmd_help_args[] = {
    "<string> = help [-v <help_modifier_list>] [<string>]"
};

char *cmd_history_args[] = {
    "history [<integer>]"
};

char *cmd_log_args[] = {
    "log [-f <file_name>]"
};

char *cmd_openGui_args[] = {
    "openGui"
};

char *cmd_playBack_args[] = {
    "playBack-f <file_name>"
};

char *cmd_record_args[] = {
    "record [-f <file_name>]"
};

char *cmd_setBreak_args[] = {
    "<breakId> setBreak [-x <expId>] [<target>] <address_description>"
};


/*********************************************/
// BRIEF COMMAND MESSAGES
/*********************************************/
char *cmd_expAttach_brief = {
    "Attach applications or collectors to an experiment."
};


char *cmd_expClose_brief = {
    "Close/Terminate the experiment."
};


char *cmd_expCreate_brief = {
    "Start the process of defining an experiment."
};


char *cmd_expDetach_brief = {
    "Detach applications from collectors."
};


char *cmd_expDisable_brief = {
    "Turn off data collection."
};


char *cmd_expEnable_brief = {
    "Restart data collection."
};


char *cmd_expFocus_brief = {
    "Focus the current input window on a specified experiment."
};


char *cmd_expGo_brief = {
    "Start execution or continue running the experiment."
};


char *cmd_expPause_brief = {
    "Temporarily interrupt the specified experiment."
};


char *cmd_expRestore_brief = {
    "Restore experiment's definition and previously saved\n"
    "data from a data base that was saved with an expSave command."
};


char *cmd_expSave_brief = {
    "Save the experiment data for further analysis."
};


char *cmd_expSetParam_brief = {
    "Change the value an experiment's argument."
};


char *cmd_expStatus_brief = {
    "Report the current state of user define experiments."
};

char *cmd_expView_brief = {
    "View the experiment's output in text form."
};


char *cmd_list_brief = {
    "List information based on <listType>."
};


char *cmd_listBreaks_brief = {
    "List the breakpoints that have been defined."
};


char *cmd_listExp_brief = {
    "List the experiments that have been defined."
};


char *cmd_listHosts_brief = {
    "Lists the hosts that define the specified cluster."
};


char *cmd_listObj_brief = {
    "List the object files that are known."
};


char *cmd_listPids_brief = {
    "List the process Id's that are known."
};


char *cmd_listMetrics_brief = {
    "List the measurements that an experiment is capable of making."
};


char *cmd_listParams_brief = {
    "Report the current values assigned to all the parameters\n"
    "that are part of a specific experiment."
};


char *cmd_listRanks_brief = {
    "List the mpi ranks that are known. "
};


char *cmd_listSrc_brief = {
    "List the source filenames of the modules that \n"
    "are part of the specified experiment. "
};


char *cmd_listStatus_brief = {
    "List the current status of an experiment."
};


char *cmd_listThreads_brief = {
    "List the threads that are known."
};


char *cmd_listTypes_brief = {
    "List available performance measurement utilities."
};


char *cmd_listViews_brief = {
    "List the reports that can be produced by an experiment."
};


char *cmd_clearBreak_brief = {
    "Remove a breakpoint."
};


char *cmd_exit_brief = {
    "Terminate the session."
};


char *cmd_help_brief = {
    "Request information about a topic."
};


char *cmd_history_brief = {
    "Print a list of previously executed commands."
};


char *cmd_log_brief = {
    "Echo executed commands and their results to a file."
};


char *cmd_openGui_brief = {
    "Open the Graphical User Interface."
};


char *cmd_playBack_brief = {
    "Read and execute commands stored in a file."
};


char *cmd_record_brief = {
    "Begin echoing executed commands to a file."
};


char *cmd_setBreak_brief = {
    "Enter a breakpoint, which will halt the application when reached."
};

/*********************************************/
// DETAILED COMMAND MESSAGES
/*********************************************/
char *cmd_expAttach_detailed[] = {
    cmd_expAttach_args[0],
    " ",
    cmd_expAttach_brief,
    " ",
    "\t The attached applications will not execute until ",
    "\t an expGo command is issued.",
    " ",
    "- If there is no -x <expId> provided, information is ",
    "  attached to the focused experiment.",
    " ",
    "- If the -v mpi option is selected, all the threads that ",
    "  are part of a running application will be included ",
    "  in the experiment.",
    " ",
    "- If the -v mpi option is not present, only those ",
    "  threads that are running application will be included ",
    "  in the experiment.",
    " ",
    "- The <target_list> is used to restrict the knowledge ",
    "  of the experiment or data collection to certain portions ",
    "  of an appliaction.",
    " ",
    "- It is ambiguous to use both the -f and -p options.",
    " ",
    "\t The -f option implies that an executable is to be ",
    "\t loaded into the OpenSS tool from a file.",
    " ",
    "\t The use of -p option implies that the OpenSS tool ",
    "\t is to attach to a program that is already executing.",
    " ",
    "- If <target_list> is provided without <expType_list>, ",
    "  those applications are attached to all the <expType>s ",
    "  that are already attached of the experiment.",
    " ",
    "- If <expType_list> is provided without <target_list>, ",
    "  the specified data collectors are used to instrument ",
    "  all the executable routines that are already attached ",
    "  to the indicated experiment.",
    " ",
    "- If both <target_list> and <expType_list> are provided, ",
    "  only those portions of the application in the <target_list> ",
    "  are linked to the specified collectors in <expType_list>.",
    " ",
    "- If neither <target_list> nor <expType_list> is provided, ",
    "  the command does nothing.",
    " "
};


char *cmd_expClose_detailed[] = {
    cmd_expClose_args[0],
    " ",
    cmd_expClose_brief,
    " ",
    "\t The OpenSS tool is NOT terminated. Use exit to ",
    "\t terminate the session.",
    " ",
    "\t All data collectors attached to the experiment ",
    "\t are removed from the attached applications.",
    " ",
    "\t All attached applications are removed from the experiment.",
    " ",
    "\t If \'-v kill\' is not provided, attached applications ",
    "\t will continue executing.",
    " ",
    "\t If \'-v kill\' is provided, attached applications ",
    "\t will be terminated.",
    " ",
    "\t The data base file that was used to save information ",
    "\t about the applications and the collected data, is deleted ",
    "\t if it is a temporary file, or closed if it is a user ",
    "\t defined file. Use \'expSave\' for saving information.",
    " ",
    "- Because important information may accidently be lost, ",
    "  the absence of any arguments will not cause the focused ",
    "  experiment to be deleted. This can only be done by ",
    "  specifying the expId of the focused experiment.",
    " ",
    "- Use of \'-v all\' will cause all defined experiments ",
    "  to be deleted.",
    " "
};


char *cmd_expCreate_detailed[] = {
    cmd_expCreate_args[0],
    " ",
    cmd_expCreate_brief,
    " ",
    "\to define a new experiment identifier,",
    " ",
    "\to set the current focus to the new identifier and",
    " ",
    "\to return the experiment identification identifier.",
    " ",
    "\to The experiment will not execute until an \'expGo\' command ",
    "\t  is issued.",
    " ",
    "- If the -v mpi option is selected, all the threads that ",
    "  are part of a running application will be included ",
    "  in the experiment.",
    " ",
    "- If the -v mpi option is not present, only those ",
    "  threads that are running application will be included ",
    "  in the experiment.",
    " ",
    "- The <target_list> will associate the specified executable ",
    "  with the experiment being defined.",
    " ",
    "- The experiment type argument, <expType_list>, can be ",
    "  used to specify the types of data that will be collected ",
    "  during the experiment.",
    " ",
    "- Missing arguments can be supplied later with the \'expAttach\' ",
    "  command.",
    " ",
    "- An \'expCreate\' command with no arguments will still return ",
    "  a new <expId> and will set the focus.",
    " "
};


char *cmd_expDetach_detailed[] = {
    cmd_expDetach_args[0],
    " ",
    cmd_expDetach_brief,
    " ",
    "\t The remaining applications will not execute until an ",
    "\t \'expGo\' command is issued.",
    " ",
    "\t The experiment retains knowledge of both the applications ",
    "\t and the collectors and they can be referenced on later commands.",
    " ",
    "\t All previously collected data samples will be retained.",
    " ",
    "\t No new data, of the specified type, will be collected ",
    "\t for the specified application.",
    " ",
    "- If there is no -x <expId> provided, the focused experiment ",
    "  is used.",
    " ",
    "- If <target_list> is provided without <expType_list>, ",
    "  all collectors are detached for those applications.",
    " ",
    "- If <expType_list> is provided without <target_list>, ",
    "  the specified data collectors are detached from all ",
    "  the executable routines that are ttached to the indicated ",
    "  experiment.",
    " ",
    "- If both <target_list> and <expType_list> are provided, ",
    "  only the specified collectores in <expType_list> are ",
    "  detached from just those applications described in <target_list>.",
    " ",
    "- If neither <target_list> nor <expType_list> is provided, ",
    "  the command does nothing.",
    " "
};


char *cmd_expDisable_detailed[] = {
    cmd_expDisable_args[0],
    " ",
    cmd_expDisable_brief,
    " ",
    "\t The experiment remains defined.",
    " ",
    "\t Data collection is \"turned off\" and no new ",
    "\t information is saved.",
    " ",
    "\t Instrumentation is disabled but may not removed ",
    "\t from the application.",
    " ",
    "\t Previously collected data is still available and ",
    "\t can be viewed or saved.",
    " ",
    "\t The attached applications will not continue executing ",
    "\t until an \'expGo\' command is issued.",
    " ",
    "- See related commands:",
    " ",
    "\t \'expEnable\' can be used to restart data collection.",
    " ",
    "\t \'expSave\' can be used to save previously collected data.",
    " ",
    "\t \'expClose\' can be used to destroy the experiment and ",
    "\t free all data space used to save the collected data.",
    " ",
    "- \'-v all\' will result in data collection being ",
    "  stopped for all defined experiments.",
    " ",
    "- If this command is issued with no arguments, data ",
    "  collection is stopped for the focused experiment.",
    " "
};


char *cmd_expEnable_detailed[] = {
    cmd_expEnable_args[0],
    " ",
    cmd_expEnable_brief,
    " ",
    "\t Existing instrumentation is enabled.",
    " ",
    "\t Data collection is \"turned on\" and new information ",
    "\t will be saved.",
    " ",
    "\t New information will be merged with any previously ",
    "\t collected data.",
    " ",
    "\t The attached applications will not continue executing ",
    "\t until an \'expGo\' command is issued.",
    " ",
    "- The all keyword will result in data collection being ",
    "  restarted for all defined experiments.",
    " ",
    "- If this command is issued with no arguments, data ",
    "  collection for the focused experiment is restarted.",
    " "
};


char *cmd_expFocus_detailed[] = {
    cmd_expFocus_args[0],
    " ",
    cmd_expFocus_brief,
    " ",
    "- In many commands -x <expId> is optional. When omitted, ",
    "  the currently \"focused\" experiment is used.",
    " "
    "- If no argument is present on this command, return ",
    "  the focused experiment.\n",
    " "
    "- If the -x <expId> argument has an experiment id ",
    "  of zero (0), then clear the experiment focus.",
    " "
    "\t A command that uses an experiment id of zero is illegal ",
    "\t and will produce a fatal error.",
    " "
    "- This command does not change the execution state of ",
    "  an experiment.",
    " "
};


char *cmd_expGo_detailed[] = {
    cmd_expGo_args[0],
    " ",
    cmd_expGo_brief,
    " ",
    "- If the experiment has already begun execution,",
    "  this command causes execution to continue from ",
    "  where it was interrupted.",
    " ",
    "- The experiment will continue to run until either:",
    " ",
    "\t * the application terminates, or",
    " ",
    "\t * the application executes a programmed halt, or",
    " ",
    "\t * the user issues another exp... command that refers ",
    "\t   to this experiment Id. or",
    " ",
    "\t * the OpenSS tool terminates due to an exit command, ",
    "\t   an external interrupt, or abnormal, internal event.",
    " ",
    "- Except when executed in batch mode, the execution of the ",
    "  application and the collection of performance data does not, ",
    "  automatically, prevent other commands from being issued:",
    " ",
    "\t A following command that depends on the result of this ",
    "\t experiment may not be able to execute and may block ",
    "\t further commands from being issued.",
    " ",
    "\t Independent commands may be issued and completed before ",
    "\t this experiment completes.",

    "\t The status of any experiment can be determined through the ",
    "\t listStatus command.",
    " ",
    "\t Depending on the type of data collection that is taking ",
    "\t place, it may be possible to view the results before the ",
    "\t application completes.",
    " ",
    "- The absence of the -x <expId> and all keyword will result ",
    "  in only the focused experiment being run.",
    " ",
    "- The use of -x <expId> will result in only that experiment ",
    "  being run.",
    " ",
    "- The use of the all option will result in every defined experiment ",
    "  being run."
    " "
};


char *cmd_expPause_detailed[] = {
    cmd_expPause_args[0],
    " ",
    cmd_expPause_brief,
    " ",
    "	o The experiment will remain suspended until an expGo is",
    "	  issued or until the performance tool is exited, at which time",
    "	  all the instrumentation is removed from the experiment and",
    "	  the program is allowed to continue running.",
    " ",
    "- If -x <expId> is not provided, the focused experiment is used.",
    " ",
    "- If the keywork all is present, every defined experiment is halted.",
    " "
};


char *cmd_expRestore_detailed[] = {
    cmd_expRestore_args[0],
    " ",
    cmd_expRestore_brief,
    " ",
    "\t A new experiment is created and intitialize with ",
    "\t this information.",
    " ",
    "\t This command also sets the focus to the new experiment's ",
    "\t Identifier.",
    " ",
    "\t The new experiment will be in the same state as that ",
    "\t established with the expDisable command.",
    " ",
    "\t If the original applications are still running, the ",
    "\t user can reconnect to them and reinsert instrumentation ",
    "\t into them, through them, through use of the expEnable command. ",
    "\t Doing this will interrupt the executing application and an ",
    "\t expGo command will be required before the application continues ",
    "\t and new data samples can be collected.",
    " ",
    "\t Previously collected data can be looked at with the ",
    "\t expView command without reconnecting to the original",
    "\t applications.",
    " ",
    "\t If an expGo command is issued, new data samples will ",
    "\t be placed into the data base specified by -f <file_name>. ",
    "\t A different data base can be specified with the expSave command.",
    " "
};


char *cmd_expSave_detailed[] = {
    cmd_expSave_args[0],
    " ",
    cmd_expSave_brief,
    " ",
    "\t For each experiment, information about the executable ",
    "\t programs that are instrumented, information about the ",
    "\t instrumentation that is used and any performance data ",
    "\t that is collected are saved in a data base.",
    " ",
    "\t The data base is created by the OpenSS tool in a temporary ",
    "\t location and will be deleted when an expClose command is ",
    "\t issued for the experiment, or when an exit command is ",
    "\t issued that terminates the OpenSS tool.",
    " ",
    "\t The entire data base can be saved with the expSave command ",
    "\t and can be reloaded into the OpenSS tool with the expRestore ",
    "\t command.",
    " ",
    "\t The data base is in a special format that supports the ",
    "\t opertaions that the OpenSS tool must perform.",
    " ",
    "- Without \'-v copy\'",
    " ",
    "\t If the original, temporary data base file is still in use, ",
    "\t it is copied to the specified file name and the OpenSS tool ",
    "\t will use the new file to collect any new information about ",
    "\t the experiment. When the experiment completes, this data ",
    "\t base will be retained.",
    " ",
    "\t If a previous expSave command has caused the experiment's ",
    "\t information to be directed to a user defined data base",
    " ",
    "\t The contents of the previous data base  ",   
    " ",
    "- without any of the data samples",
    " ",
    "- is copied to the new data base.",
    " ",
    "\t The previous data base is closed.",
    " ",
    "\t The new data base is used by the OpenSS tool to collect any ",
    "\t new information that is added to or collected for, the experiment.",
    " ",
    "- With \'-v copy\' the given location receives a copy ",
    "  of the current state of the data base.",
    " ",
    "\t The current contents of the data base is duplicated and ",
    "\t saved to the given location.",
    " ",
    "\t No new information will be added to the given location.",
    " ",
    "\t New information will be added to the original data base.",
    " ",
    "- This command does not change the execution state of the ",
    "  experiment, although it may temporarily suspend execution ",
    "  while the command is being executed.",
    " "
};


char *cmd_expSetParam_detailed[] = {
    cmd_expSetParam_args[0],
    " ",
    cmd_expSetParam_brief,
    " ",
    "- <expParam> will be unique within the experiment.",
    " ",
    "- The parameter names can be used by other experiments.",
    " ",
    "- This command does not change the execution state of ",
    "  the experiment, although it may temporarily suspend ",
    "  execution while the command is being executed.",
    " "
};

char *cmd_expStatus_detailed[] = {
    cmd_expStatus_args[0],
    " ",
    cmd_expStatus_brief,
    " ",
    "- The absence of any option will result in information",
    "  Being reported for the focused experiment",
    " ",
    "- The use of -x <expId> will result in imformation",
    "  being reported for the specified experiment.",
    " ",
    "- The use of \'-v all\' will result in information being",
    "  reported for all the known experiments.",
    " "
};


char *cmd_expView_detailed[] = {
    cmd_expView_args[0],
    " ",
    cmd_expView_brief,
    " ",
    "- If this command is issued with no -x <expId>, the ",
    "  focused experiment is used.",
    " ",
    "- If -f <file_name> is specified, output will be directed",
    "  to the named file. If neither -gui nor -f <file_name> are",
    "  present, output will be to stdout",
    " ",
    "- If <expMetric_list_spec> is present, only those metrics ",
    "  in the list will be included in the report.",
    " ",
    "- If a <target_list> is specified, only the data for the",
    "  specified targets will be included in the report.",
    " ",
    "- This command does not change the execution state of the ",
    "  experiment, although the nature of the requested data may ",
    "  require that the experiment complete execution before the ",
    "  information can be provided.",
    " ",
    "- To find the viewtypes available for your experiment use",
    "    list -v views.",
    " ",
    "- To find the all the viewtypes available to you use",
    "    list -v views,all.",
    " ",
    "- To get detailed information for a specific viewtype use:",
    " ",
    "    help <viewType> where <viewType> is the view type.",
    " ",
    "  Examples: ",
    "      help mpi",
    "      help pcsamp",
    "      help hwc",
    " "
};

char *cmd_list_detailed[] = {
    cmd_list_args[0],
    " ",
    cmd_list_brief,
    " ",
    "\t Where <listType> is one of: ",
    " ",
    "\t\t breaks:    List breakpoints (help listBreaks)",
    "\t\t expId:     List the experiments that have been defined. ",
    "\t\t            (help listExpId)",
    "\t\t exptypes:  List the available performance measurement ",
    "\t\t            utilities that can be used to collect data in ",
    "\t\t            an experiment. (help listExpTypes)",
    "\t\t hosts:     Lists the hosts that define the specified cluster. ",
    "\t\t            (help listHosts)",
    "\t\t metrics:   Lists the metrics that are associated with a ",
    "\t\t            ViewTypeList object. (help listMetrics)",
    "\t\t obj:       List the objects of the applications that are part ",
    "\t\t            of the specified experiment. (help listObj)",
    "\t\t params:    List the parameters that are associated with a ",
    "\t\t            particular <viewType> or set of <viewType>s.",
    "\t\t            (help listParams)",
    "\t\t pids:      List running processes associated with a specific ",
    "\t\t            experiment and, optionally, on a specific machine. ",
    "\t\t            (help listPids)",
    "\t\t ranks:     List the mpi ranks associated with a specific ",
    "\t\t            experiment, a specific Pid or on a specific machine.",
    "\t\t            (help listRanks)",
    "\t\t src:       List the source filenames of the modules that are part ",
    "\t\t            of the specified experiment. (help listSrc)",
    "\t\t status:    List the status of user experiments. (help listStatus)",
    "\t\t threads:   List the Threads associated with a specific experiment, ",
    "\t\t            a specific Pid or on a specific machine. ",
    "\t\t            (help listThreads)",
    "\t\t views:     List the views that are available for an ExpTypeList. ",
    "\t\t            (help listViews)",
    " ",
    "\t The format of the output list is dependant on the type ",
    "\t of list requested.",
    " "
};

char *cmd_listBreaks_detailed[] = {
    cmd_listBreaks_args[0],
    " ",
    cmd_listBreaks_brief,
    " ",
    " "
};


char *cmd_listExp_detailed[] = {
    cmd_listExp_args[0],
    " ",
    cmd_listExp_brief,
    " "
};


char *cmd_listHosts_detailed[] = {
    cmd_listHosts_args[0],
    " ",
    cmd_listHosts_brief,
    " ",
    "\t The absence of any options will cause all the hosts that ",
    "\t have been included in the focused experiment to be listed.",
    " ",
    "\t The -x <expId> option will cause all the hosts that have ",
    "\t been included in the selected experiment to be listed.",
    " "
};


char *cmd_listObj_detailed[] = {
    cmd_listObj_args[0],
    " ",
    cmd_listObj_brief,
    " ",
    "\t If -x <expId> is not provided, the focused experiment is used.",
    " ",
    "- The listing can be restricted with the use of a <target> ",
    "  specification.",
    " ",
    "- Any component described in the <target> specification must ",
    "  be part of the selected experiment.",
    " ",
    "- If <target> is not provided, information will be provided for ",
    "  all portions of all applications that are attached to the experiment.",
    " "
};


char *cmd_listPids_detailed[] = {
    cmd_listPids_args[0],
    " ",
    cmd_listPids_brief,
    " ",
    "\t If no options are supplied, the Pids that are referenced ",
    "\t in the focused experiment are listed.",
    " ",
    "\t If the \"-x <expId>\" option is supplied, all the Pids ",
    "\t that are part of the specified experiment are listed.",
    " ",
    "- The use of the \"<host_file>\" option acts like a filter ",
    "\t on the output.",
    " ",
    "\t The absence of any \"-h <host_name>\" specification will ",
    "\t cause all pids on all systems in the cluster to be listed.",
    " ",
    "\t The default cluster contains only localhost and must be ",
    "\t specified by using -h localhost.",
    " ",
    "\t Use of the -f <file_name> option will result in only the ",
    "\t pids associated with that <file_name> being listed for the ",
    "\t selected hosts.",
    " "
};


char *cmd_listMetrics_detailed[] = {
    cmd_listMetrics_args[0],
    " ",
    cmd_listMetrics_brief,
    " ",
    "\t If no options are selected, metrics for only the data ",
    "\t collectors that are part of the focused experiment will ",
    "\t be listed.",
    " ",
    "\t The use of -x <expId> will cause the metrics that are ",
    "\t associated with the set of data collectors that are part ",
    "\t of the specified experiment to be listed.",
    " ",
    "\t The use of the keyword all will cause all the metrics ",
    "\t for all available collectors to be listed.",
    " ",
    "\t The use of the \"<expType>\" option will result in a ",
    "\t listing of only those metrics associated with that ",
    "\t specific data collector.",
    " "
};


char *cmd_listParams_detailed[] = {
    cmd_listParams_args[0],
    " ",
    cmd_listParams_brief,
    " ",
    "\t If no options are selected, parameters for only the data ",
    "\t collectors that are part of the focused experiment will ",
    "\t be listed.",
    " ",
    "\t The use of -x <expId> will cause the parameters that ",
    "\t are associated with the set of data collectors that are ",
    "\t part of the specified experiment to be listed.",
    " ",
    "\t The use of the keyword all will cause all the parameters ",
    "\t for all available collectors to be listed.",
    " ",
    "\t The use of the \"<expType>\" option will result in a ",
    "\t listing of only those parameters associated with that ",
    "\t specific data collector.",
    " "
};


char *cmd_listRanks_detailed[] = {
    cmd_listRanks_args[0],
    " ",
    cmd_listRanks_brief,
    " ",
    "\t If no options are supplied, all the Ranks that are ",
    "\t referenced in the focused experiment are listed.",
    " ",
    "\t If the \"-x <expId>\" option is supplied, all the ",
    "\t Ranks that are part of the specified experiment are listed.",
    " ",
    "\t If the all option is supplied, all Ranks that are active ",
    "\t on the specified system are listed.",
    " ",
    "- The use of the \"<target>\" option acts like a filter on ",
    "  the output.",
    " ",
    "\t The default cluster contains only localhost and must be ",
    "\t specified by using -h localhost.",
    " ",
    "\t Use of the -f option will result in only the Ranks ",
    "\t associated with that <file_name> being listed for the ",
    "\t selected hosts.",
    " ",
    "\t Use of the -p option will result in only the Ranks associated ",
    "\t with that Pid being listed for the selected hosts.",
    " ",
    "\t Use of the -r option will result in only that specific Rank ",
    "\t being listed, if it exists on the selected hosts.",
    " "
};


char *cmd_listSrc_detailed[] = {
    cmd_listSrc_args[0],
    " ",
    cmd_listSrc_brief,
    " ",
    "- If -x <expId> is not provided, the focused experiment ",
    "  is used.",
    " ",
    "- The listing can be restricted with the use of a <target> ",
    "  specification.",
    " ",
    "- Any component described in the <target> specification must ",
    "  be part of the selected experiment.",
    " ",
    "- -f <file_name> [ , <file_name> ]* can be used to provide a list of object modules ",
    "  that will be searched for relevant source files. ",
    " ",
    "- If <target> is not provided, information will be provided ",
    "  for all portions of all applications that are attached to the experiment.",
    " "
};


char *cmd_listStatus_detailed[] = {
    cmd_listStatus_args[0],
    " ",
    cmd_listStatus_brief,
    " ",
    "\t If no option is selected, return the status of the ",
    "\t focused experiment.",
    " ",
    "\t The use of -x <expId> will cause the status of the ",
    "\t specified experiment to be returned.",
    " ",
    "\t The use of \"-v all\" will cause the status of ",
    "\t all the defined experiments to be returned.",
    " "
};


char *cmd_listThreads_detailed[] = {
    cmd_listThreads_args[0],
    " ",
    cmd_listThreads_brief,
    " ",
    "\t If no options are supplied, the Threads that are  ",
    "\t referenced in the focused experiment are listed.",
    " ",
    "\t If the \"-x <expId>\" option is supplied, all the  ",
    "\t Threads that are part of the specified experiment are listed.",
    " ",
    "\t The use of the \"<target>\" option acts like a filter on the output.",
    " ",
    "\t The absence of any \"-h <host_name>\" specification  ",
    "\t will cause all pids on all systems in the cluster to be listed.",
    " ",
    "\t The default cluster contains only localhost and must  ",
    "\t be specified by using -h localhost.",
    " ",
    "\t Use of the -f option will result in only the Threads ",
    "\t associated with that <file_name> being listed for the selected hosts.",
    " ",
    "\t Use of the -p option will result in only the Threads ",
    "\t associated with that Pid being listed for the selected hosts.",
    " ",
    "\t Use of the -t option will result in only that specific ",
    "\t Thread being listed, if it exists on the selected hosts.",
    " "
};


char *cmd_listTypes_detailed[] = {
    cmd_listTypes_args[0],
    " ",
    cmd_listTypes_brief,
    " ",
    "- If no option is selected, list the utilities that are ",
    "  attached to the focused experiment.",
    " ",
    "- The use of -x <expId> will cause the utilities that ",
    "  are attached to the specified experiment to be listed.",
    " ",
    "- The use of \"-v all\" will cause all the possible ",
    "  performance measurement utilities that can be used in ",
    "  experiments to be listed.",
    " "
};


char *cmd_listViews_detailed[] = {
    cmd_listViews_args[0],
    " ",
    cmd_listViews_brief,
    " ",
    "- If no options are selected, the reports for only the ",
    "  data collectors that are part of the focused experiment ",
    "  will be listed.",
    " ",
    "- The use of -x <expId> will cause the the reports that ",
    "  are associated with the set of data collectors that are ",
    "  part of the specified experiment to be listed.",
    " ",
    "- The use of the keyword all will cause all the the reports ",
    "  for all available collectors to be listed.",
    " ",
    "- The use of the \"<expType>\" option will result in a listing ",
    "  of only those the reports associated with that specific ",
    "  data collector.",
    " "
};


char *cmd_clearBreak_detailed[] = {
    cmd_clearBreak_args[0],
    " ",
    cmd_clearBreak_brief,
    " ",
    "- This command does not change the execution state of an ",
    "  experiment, although it may be temporarily suspended ",
    "  during execution of the command.",
    " "
};


char *cmd_exit_detailed[] = {
    cmd_exit_args[0],
    " ",
    cmd_exit_brief,
    " ",
    "- Suspend execution or all executables",
    " ",
    "- Suspend data collection.",
    " ",
    "- Remove instrumentation from all applications.",
    " ",
    "- Release all applications from control of the OpenSS tool",
    " ",
    "- Allow all applications to continue executing.",
    " ",
    "- Close all data base files.",
    " ",
    "- Delete all temporary files.",
    " ",
    "- Close the GUI and Command windows.",
    " ",
    "- Terminate execution of the OpenSS tool.",
    " "
};


char *cmd_help_detailed[] = {
    cmd_help_args[0],
    " ",
    cmd_help_brief,
    " ",
    "Currently the \'-v\' option is not supported.",
    " "
};


char *cmd_history_detailed[] = {
    cmd_history_args[0],
    " ",
    cmd_history_brief,
    " ",
    "- If no <integer> is provided, print out only ",
    "  requested number of history entries.",
    " "
};


char *cmd_log_detailed[] = {
    cmd_log_args[0],
    " ",
    cmd_log_brief,
    " ",
    "- Stop echoing if no file is specified on a log command.",
    " ",
    "- This is primarly intended to be an internal debug aid ",
    "  for the OpenSS tool developer since the generated files ",
    "  can quickly become huge.",
    " "
};


char *cmd_openGui_detailed[] = {
    cmd_openGui_args[0],
    " ",
    cmd_openGui_brief,
    " "
};


char *cmd_playBack_detailed[] = {
    cmd_playBack_args[0],
    " ",
    cmd_playBack_brief,
    " "
};


char *cmd_record_detailed[] = {
    cmd_record_args[0],
    " ",
    cmd_record_brief,
    " ",
    "\t Recording is preformed relative to the input source that ",
    "\t issues this command.",
    " ",
    "\t This design causes commands issued by the GUI to be ",
    "\t recorded seperately from commands issued by the Command window.",
    " ",
    "- Commands read from a file specified on a succeeding playBack",
    "  command will not be echoed.",
    " ",
    "- Stop echoing if no file is specified on a record command.",
    " ",
    "- Stop echoing if the end of the input file containing the ",
    "  original record command is encoutnered.",
    " "
};


char *cmd_setBreak_detailed[] = {
    cmd_setBreak_args[0],
    " ",
    cmd_setBreak_brief,
    " ",
    "- If -x <expId> is not provided, the focused experiment is used.",
    " ",
    "- The break location is specified through the combination of the ",
    "  <target> and <address_description> arguments.",
    " ",
    "- The break location must be a location in the specified experiment.",
    " ",
    "- If <target> is not provided, the <address_description> must be ",
    "  valid on every host and executable attached to the experiment.",
    " "
};

/*********************************************/
// COMMAND Examples
/*********************************************/
// 
char *cmd_expAttach_example[] = {
    "expAttach -x 2 -f my_prog pcsamp",
    "    Includes the executable program \'my_prog\' into experiment",
    "    #2 and adds the performance measurement utility \'pcsamp\'",
    "    to the experiment. The executable is loaded into the",
    "    system and instrumented to provide performance measurements.",
    " ",
    "    Experiment #2 must have been previously defined with an",
    "    expCreate or expRestore command.",
    " ",
    "    The program will not start execution until a subsequent",
    "    \'expGo -x 2\' command is issued.",
    " ",
    "expAttach -x 1 -v mpi -h localhost -p 1234 pcsamp",
    " ",
    "    Which will, for the previously created experiment #1,",
    "    find pid 1234 and attach the pcsamp data collector to",
    "    all the associated pids that are part of the same mpi",
    "    job. The assumption is that the given pid is the",
    "    original one that the system allocated for an ",
    "    \'mpirun...\' command.",
    " "
};

char *cmd_expClose_example[] = {
    "expClose -x 3",
    " ",
    "    Closes experiment #3.",
    " ",
    "expClose all",
    " ",
    "    Closes all experiments",
    " ",
    "    In all the above cases, if the target application is",
    "    running it will be left running. To kill the",
    "    application(s) you will need to add \'-v kill\'.",
    " ",
    "This command will also delete all performance measurements",
    "that were not explicitly saved with an \'expSave\' command.",
    "This means that the results of the experiment will not be",
    "available to look at.",
    " "
};

char *cmd_expCreate_example[] = {
    "expCreate -f my_prog usertime",
    " ",
    "    Creates an experiment targeting the application",
    "    \'my_prog\' using the usertime performance measurement",
    "    utility.",
    " ",
    "    The next logical action would be to run the experiment",
    "    using expGo.",
    " ",
    "    If you need to add more attributes to this experiment",
    "    before running it, use the expAttach command.",
    " ",
    "    ExpCreate changes the focus to the newly created",
    "    experiment. If you wish to change the focus back to an",
    "    existing experiment use the expFocus command.",
    " "
};

char *cmd_expDetach_example[] = {
    "expDetach -f my_prog pcsamp",
    " ",
    "    Detach the pcsampling plugin from the targeted",
    "    application \'my_prog\' in the focused experiment.",
    " ",
    "expDetach -x 2 -f my_prog pcsamp",
    " ",
    "    Detach the pcsampling plugin from the targeted",
    "    application \'my_prog\' in experiment #2 only.",
    " ",
    "expDetach -x 2 pcsamp",
    " ",
    "    Detach the pcsampling plugin from the a.out and all dsos",
    "    in experiment #2.",
    " "
};

char *cmd_expDisable_example[] = {
    "expDisable",
    " ",
    "    Turn off collection of performance data in the focused",
    "    experiment.",
    " ",
    "expDisable all",
    " ",
    "    Turn off collection of performance data in all defined",
    "    experiments.",
    " ",
    "expDisable -x 3",
    " ",
    "    Turn off collection of performance data in the defined",
    "    experiment #3.",
    " "
};

char *cmd_expEnable_example[] = {
    "expEnable",
    " ",
    "    Turn on collection of performance data in the focused",
    "    experiment that was previously disabled by an expDisable",
    "    command.",
    " ",
    "expEnable all",
    " ",
    "    Turn on collection of performance data in all defined",
    "    experiments that was previously disabled by an",
    "    \'expDisable\' command.",
    " ",
    "expEnable -x 3",
    " ",
    "    Turn on collection of performance data in the defined",
    "    experiment #3 that was previously disabled by an",
    "    \'expDisable\' command.",
    " ",
    "    If #3 was not the currently focused experiment this will",
    "    NOT bring it into focus. Use \'expFocus -x 3\' to do that.",
    " ",
    "    The next logical action would be to run the experiment",
    "    using \'expGo -x 3\'.",
    " "
};

char *cmd_expFocus_example[] = {
    "expFocus",
    " ",
    "    Return the id of the currently focused experiment",
    " ",
    "expFocus -x 5",
    " ",
    "    Bring into focus experiment #5.",
    " ",
    "Only one experiment can be in focus at a time.",
    " "
};

char *cmd_expGo_example[] = {
    "expGo",
    " ",
    "    Run the currently focused experiment.",
    " ",
    "expGo -x 5",
    " ",
    "    Run experiment #5. If #5 was not the currently focused",
    "    experiment this will NOT bring it into focus. Use",
    "    \'expFocus\' to do that.",
    " ",
    "The next logical action would be to display the",
    "experiment results using expView.",
    " "
};


char *cmd_expPause_example[] = {
    "expPause",
    " ",
    "    Suspend/stop execution of the currently focused",
    "    experiment",
    " ",
    "expPause -x 5",
    " ",
    "    Suspend/stop execution of experiment #5. If #5 was not",
    "    the currently focused experiment this will NOT bring it",
    "    into focus. Use \'expFocus\' to do that.",
    " "
};

char *cmd_expRestore_example[] = {
    "expRestore -f my_experiment.data",
    " ",
    "    Reads the data stored in \'my_experiment.data\' and",
    "    defines a new experiment that is initialized with",
    "    information in the file. The focus is set to",
    "    this new experiment.",
    " ",
    "    No attempt is made to determine if the saved information",
    "    refers to a still running application however, a subsequent",
    "    \'expGo\' command will attempt to find and attach to it.",
    " "
};

char *cmd_expSave_example[] = {
    "expSave -f my_experiment.data",
    " ",
    "    Saves data and state of the focused experiment to the",
    "    file \'my_experiment.data\'.",
    " ",
    "expSave -x 3 -f my_experiment.data",
    " ",
    "    Saves data and state of experiment #3 to the",
    "    file \'my_experiment.data\'.",
    " "
};

char *cmd_expSetParam_example[] = {
    "expSetParam pcsamp::sampling_rate=10",
    " ",
    "    Will set the sampling rate in the pcsamp collector for",
    "    the focused experiment.",
    " ",
    "expSetParam -x 3 pcsamp::sampling_rate=10, usertime::sampling_rate=20",
    " ",
    "    Will set the sampling rate of the pcsamp collector to 10",
    "    and the sampling rate of the usertime collector to 20,",
    "    both in experiment #3.",
    " ",
    "expSetParam -x 5 sampling_rate=10",
    " ",
    "    Will set the sampling_rate to 10 in all the collectors",
    "    that are part of experiment #5.",
    " "
};

char *cmd_expStatus_example[] = {
    "expStatus",
    " ",
    "    Displays the status of the currently focused experiment.",
    " ",
    "expStatus -x 2",
    " ",
    "    Displays the status of experiment #2.",
    " ",
    "expStatus all",
    " ",
    "    Displays the status of all defined experiments.",
    " "
};


/*********************************************/
// COMMAND MESSAGE ARRAY
/*********************************************/
// message array to be passed to message czar
OpenSpeedShop::message_element_t cmd_msg[CMD_MAX] = {

//    CMD_HEAD_ERROR,
    -1,     	//  Index for error messages
    NULL,   	//  Keyword
    NULL,0, 	//  Related keyword list
    NULL,   	//  Topic
    NULL,	//  Brief string
    NULL,0, 	//  Normal description list of strings
    NULL,0, 	//  Detailed description list of strings
    NULL,0, 	//  Example list
    NULL,0, 	//  Argument list

//    CMD_EXP_ATTACH,
    -1,cmd_desc[CMD_EXP_ATTACH].name,
    cmd_expAttach_related,sizeof(cmd_expAttach_related)/sizeof(char **),
    "commands",cmd_expAttach_brief,
    cmd_expAttach_detailed,sizeof(cmd_expAttach_detailed)/sizeof(char **),
    NULL,0,
    cmd_expAttach_example,sizeof(cmd_expAttach_example)/sizeof(char **),
    cmd_expAttach_args,sizeof(cmd_expAttach_args)/sizeof(char **),
//    CMD_EXP_CLOSE,
    -1,cmd_desc[CMD_EXP_CLOSE].name,
    cmd_expClose_related,sizeof(cmd_expClose_related)/sizeof(char **),
    "commands",cmd_expClose_brief,
    cmd_expClose_detailed,sizeof(cmd_expClose_detailed)/sizeof(char **),
    NULL,0,
    cmd_expClose_example,sizeof(cmd_expClose_example)/sizeof(char **),
    cmd_expClose_args,sizeof(cmd_expClose_args)/sizeof(char **),
//    CMD_EXP_CREATE,
    -1,cmd_desc[CMD_EXP_CREATE].name,
    cmd_expCreate_related,sizeof(cmd_expCreate_related)/sizeof(char **),
    "commands",cmd_expCreate_brief,
    cmd_expCreate_detailed,sizeof(cmd_expCreate_detailed)/sizeof(char **),
    NULL,0,
    cmd_expCreate_example,sizeof(cmd_expCreate_example)/sizeof(char **),
    cmd_expCreate_args,sizeof(cmd_expCreate_args)/sizeof(char **),
//    CMD_EXP_DETACH,
    -1,cmd_desc[CMD_EXP_DETACH].name,
    cmd_expDetach_related,sizeof(cmd_expDetach_related)/sizeof(char **),
    "commands",cmd_expDetach_brief,
    cmd_expDetach_detailed,sizeof(cmd_expDetach_detailed)/sizeof(char **),
    NULL,0,
    cmd_expDetach_example,sizeof(cmd_expDetach_example)/sizeof(char **),
    cmd_expDetach_args,sizeof(cmd_expDetach_args)/sizeof(char **),
//    CMD_EXP_DISABLE,
    -1,cmd_desc[CMD_EXP_DISABLE].name,
    cmd_expDisable_related,sizeof(cmd_expDisable_related)/sizeof(char **),
    "commands",cmd_expDisable_brief,
    cmd_expDisable_detailed,sizeof(cmd_expDisable_detailed)/sizeof(char **),
    NULL,0,
    cmd_expDisable_example,sizeof(cmd_expDisable_example)/sizeof(char **),
    cmd_expDisable_args,sizeof(cmd_expDisable_args)/sizeof(char **),
//    CMD_EXP_ENABLE,
    -1,cmd_desc[CMD_EXP_ENABLE].name,
    cmd_expEnable_related,sizeof(cmd_expEnable_related)/sizeof(char **),
    "commands",cmd_expEnable_brief,
    cmd_expEnable_detailed,sizeof(cmd_expEnable_detailed)/sizeof(char **),
    NULL,0,
    cmd_expEnable_example,sizeof(cmd_expEnable_example)/sizeof(char **),
    cmd_expEnable_args,sizeof(cmd_expEnable_args)/sizeof(char **),
//    CMD_EXP_FOCUS,
    -1,cmd_desc[CMD_EXP_FOCUS].name,
    cmd_expFocus_related,sizeof(cmd_expFocus_related)/sizeof(char **),
    "commands",cmd_expFocus_brief,
    cmd_expFocus_detailed,sizeof(cmd_expFocus_detailed)/sizeof(char **),
    NULL,0,
    cmd_expFocus_example,sizeof(cmd_expFocus_example)/sizeof(char **),
    cmd_expFocus_args,sizeof(cmd_expFocus_args)/sizeof(char **),
//    CMD_EXP_GO,
    -1,cmd_desc[CMD_EXP_GO].name,
    cmd_expGo_related,sizeof(cmd_expGo_related)/sizeof(char **),
    "commands",cmd_expGo_brief,
    cmd_expGo_detailed,sizeof(cmd_expGo_detailed)/sizeof(char **),
    NULL,0,
    cmd_expGo_example,sizeof(cmd_expGo_example)/sizeof(char **),
    cmd_expGo_args,sizeof(cmd_expGo_args)/sizeof(char **),
//    CMD_EXP_PAUSE,
    -1,cmd_desc[CMD_EXP_PAUSE].name,
    cmd_expPause_related,sizeof(cmd_expPause_related)/sizeof(char **),
    "commands",cmd_expPause_brief,
    cmd_expPause_detailed,sizeof(cmd_expPause_detailed)/sizeof(char **),
    NULL,0,
    cmd_expPause_example,sizeof(cmd_expPause_example)/sizeof(char **),
    cmd_expPause_args,sizeof(cmd_expPause_args)/sizeof(char **),
//    CMD_EXP_RESTORE,
    -1,cmd_desc[CMD_EXP_RESTORE].name,
    cmd_expRestore_related,sizeof(cmd_expRestore_related)/sizeof(char **),
    "commands",cmd_expRestore_brief,
    cmd_expRestore_detailed,sizeof(cmd_expRestore_detailed)/sizeof(char **),
    NULL,0,
    cmd_expRestore_example,sizeof(cmd_expRestore_example)/sizeof(char **),
    cmd_expRestore_args,sizeof(cmd_expRestore_args)/sizeof(char **),
//    CMD_EXP_SAVE,
    -1,cmd_desc[CMD_EXP_SAVE].name,
    cmd_expSave_related,sizeof(cmd_expSave_related)/sizeof(char **),
    "commands",cmd_expSave_brief,
    cmd_expSave_detailed,sizeof(cmd_expSave_detailed)/sizeof(char **),
    NULL,0,
    cmd_expSave_example,sizeof(cmd_expSave_example)/sizeof(char **),
    cmd_expSave_args,sizeof(cmd_expSave_args)/sizeof(char **),
//    CMD_EXP_SETPARAM,
    -1,cmd_desc[CMD_EXP_SETPARAM].name,
    cmd_expSetParam_related,sizeof(cmd_expSetParam_related)/sizeof(char **),
    "commands",cmd_expSetParam_brief,
    cmd_expSetParam_detailed,sizeof(cmd_expSetParam_detailed)/sizeof(char **),
    NULL,0,
    cmd_expSetParam_example,sizeof(cmd_expSetParam_example)/sizeof(char **),
    cmd_expSetParam_args,sizeof(cmd_expSetParam_args)/sizeof(char **),
//    CMD_EXP_STATUS,
    -1,cmd_desc[CMD_EXP_STATUS].name,
    cmd_expStatus_related,sizeof(cmd_expStatus_related)/sizeof(char **),
    "commands",cmd_expStatus_brief,
    cmd_expStatus_detailed,sizeof(cmd_expStatus_detailed)/sizeof(char **),
    NULL,0,
    cmd_expStatus_example,sizeof(cmd_expStatus_example)/sizeof(char **),
    cmd_expStatus_args,sizeof(cmd_expStatus_args)/sizeof(char **),
//    CMD_EXP_VIEW,
    -1,cmd_desc[CMD_EXP_VIEW].name,
    cmd_expView_related,sizeof(cmd_expView_related)/sizeof(char **),
    "commands",cmd_expView_brief,
    cmd_expView_detailed,sizeof(cmd_expView_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_expView_args,sizeof(cmd_expView_args)/sizeof(char **),
//    CMD_LIST_GENERIC,
    -1,cmd_desc[CMD_LIST_GENERIC].name,
    cmd_list_related,sizeof(cmd_list_related)/sizeof(char **),
    "commands",cmd_list_brief,
    cmd_list_detailed,sizeof(cmd_list_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_list_args,sizeof(cmd_list_args)/sizeof(char **),
//    CMD_LIST_BREAKS,
    -1,cmd_desc[CMD_LIST_BREAKS].name,
    cmd_listBreaks_related,sizeof(cmd_listBreaks_related)/sizeof(char **),
    "sub_commands",cmd_listBreaks_brief,
    cmd_listBreaks_detailed,sizeof(cmd_listBreaks_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listBreaks_args,sizeof(cmd_listBreaks_args)/sizeof(char **),
//    CMD_LIST_EXP,
    -1,cmd_desc[CMD_LIST_EXP].name,
    cmd_listExp_related,sizeof(cmd_listExp_related)/sizeof(char **),
    "sub_commands",cmd_listExp_brief,
    cmd_listExp_detailed,sizeof(cmd_listExp_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listExp_args,sizeof(cmd_listExp_args)/sizeof(char **),
//    CMD_LIST_HOSTS,
    -1,cmd_desc[CMD_LIST_HOSTS].name,
    cmd_listHosts_related,sizeof(cmd_listHosts_related)/sizeof(char **),
    "sub_commands",cmd_listHosts_brief,
    cmd_listHosts_detailed,sizeof(cmd_listHosts_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listHosts_args,sizeof(cmd_listHosts_args)/sizeof(char **),
//    CMD_LIST_METRICS,
    -1,cmd_desc[CMD_LIST_METRICS].name,
    cmd_listMetrics_related,sizeof(cmd_listMetrics_related)/sizeof(char **),
    "sub_commands",cmd_listMetrics_brief,
    cmd_listMetrics_detailed,sizeof(cmd_listMetrics_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listMetrics_args,sizeof(cmd_listMetrics_args)/sizeof(char **),
//    CMD_LIST_OBJ,
    -1,cmd_desc[CMD_LIST_OBJ].name,
    cmd_listObj_related,sizeof(cmd_listObj_related)/sizeof(char **),
    "sub_commands",cmd_listObj_brief,
    cmd_listObj_detailed,sizeof(cmd_listObj_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listObj_args,sizeof(cmd_listObj_args)/sizeof(char **),
//    CMD_LIST_PARAMS,
    -1,cmd_desc[CMD_LIST_PARAMS].name,
    cmd_listParams_related,sizeof(cmd_listParams_related)/sizeof(char **),
    "sub_commands",cmd_listParams_brief,
    cmd_listParams_detailed,sizeof(cmd_listParams_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listParams_args,sizeof(cmd_listParams_args)/sizeof(char **),
//    CMD_LIST_PIDS,
    -1,cmd_desc[CMD_LIST_PIDS].name,
    cmd_listPids_related,sizeof(cmd_listPids_related)/sizeof(char **),
    "sub_commands",cmd_listPids_brief,
    cmd_listPids_detailed,sizeof(cmd_listPids_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listPids_args,sizeof(cmd_listPids_args)/sizeof(char **),
//    CMD_LIST_RANKS,
    -1,cmd_desc[CMD_LIST_RANKS].name,
    cmd_listRanks_related,sizeof(cmd_listRanks_related)/sizeof(char **),
    "sub_commands",cmd_listRanks_brief,
    cmd_listRanks_detailed,sizeof(cmd_listRanks_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listRanks_args,sizeof(cmd_listRanks_args)/sizeof(char **),
//    CMD_LIST_SRC,
    -1,cmd_desc[CMD_LIST_SRC].name,
    cmd_listSrc_related,sizeof(cmd_listSrc_related)/sizeof(char **),
    "sub_commands",cmd_listSrc_brief,
    cmd_listSrc_detailed,sizeof(cmd_listSrc_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listSrc_args,sizeof(cmd_listSrc_args)/sizeof(char **),
//    CMD_LIST_STATUS,
    -1,cmd_desc[CMD_LIST_STATUS].name,
    cmd_listStatus_related,sizeof(cmd_listStatus_related)/sizeof(char **),
    "sub_commands",cmd_listStatus_brief,
    cmd_listStatus_detailed,sizeof(cmd_listStatus_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listStatus_args,sizeof(cmd_listStatus_args)/sizeof(char **),
//    CMD_LIST_THREADS,
    -1,cmd_desc[CMD_LIST_THREADS].name,
    cmd_listThreads_related,sizeof(cmd_listThreads_related)/sizeof(char **),
    "sub_commands",cmd_listThreads_brief,
    cmd_listThreads_detailed,sizeof(cmd_listThreads_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listThreads_args,sizeof(cmd_listThreads_args)/sizeof(char **),
//    CMD_LIST_TYPES,
    -1,cmd_desc[CMD_LIST_TYPES].name,
    cmd_listTypes_related,sizeof(cmd_listTypes_related)/sizeof(char **),
    "sub_commands",cmd_listTypes_brief,
    cmd_listTypes_detailed,sizeof(cmd_listTypes_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listTypes_args,sizeof(cmd_listTypes_args)/sizeof(char **),
//    CMD_LIST_VIEWS,
    -1,cmd_desc[CMD_LIST_VIEWS].name,
    cmd_listViews_related,sizeof(cmd_listViews_related)/sizeof(char **),
    "sub_commands",cmd_listViews_brief,
    cmd_listViews_detailed,sizeof(cmd_listViews_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listViews_args,sizeof(cmd_listViews_args)/sizeof(char **),
//    CMD_CLEAR_BREAK,
    -1,cmd_desc[CMD_CLEAR_BREAK].name,
    cmd_clearBreak_related,sizeof(cmd_clearBreak_related)/sizeof(char **),
    "commands",cmd_clearBreak_brief,
    cmd_clearBreak_detailed,sizeof(cmd_clearBreak_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_clearBreak_args,sizeof(cmd_clearBreak_args)/sizeof(char **),
//    CMD_EXIT,
    -1,cmd_desc[CMD_EXIT].name,
    cmd_exit_related,sizeof(cmd_exit_related)/sizeof(char **),
    "commands",cmd_exit_brief,
    cmd_exit_detailed,sizeof(cmd_exit_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_exit_args,sizeof(cmd_exit_args)/sizeof(char **),
//    CMD_HELP,
    -1,cmd_desc[CMD_HELP].name,
    cmd_help_related,sizeof(cmd_help_related)/sizeof(char **),
    "commands",cmd_help_brief,
    cmd_help_detailed,sizeof(cmd_help_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_help_args,sizeof(cmd_help_args)/sizeof(char **),
//    CMD_HISTORY,
    -1,cmd_desc[CMD_HISTORY].name,
    cmd_history_related,sizeof(cmd_history_related)/sizeof(char **),
    "commands",cmd_history_brief,
    cmd_history_detailed,sizeof(cmd_history_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_history_args,sizeof(cmd_history_args)/sizeof(char **),
//    CMD_LOG,
    -1,cmd_desc[CMD_LOG].name,
    cmd_log_related,sizeof(cmd_log_related)/sizeof(char **),
    "commands",cmd_log_brief,
    cmd_log_detailed,sizeof(cmd_log_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_log_args,sizeof(cmd_log_args)/sizeof(char **),
//    CMD_OPEN_GUI,
    -1,cmd_desc[CMD_OPEN_GUI].name,
    cmd_openGui_related,sizeof(cmd_openGui_related)/sizeof(char **),
    "commands",cmd_openGui_brief,
    cmd_openGui_detailed,sizeof(cmd_openGui_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_openGui_args,sizeof(cmd_openGui_args)/sizeof(char **),
//    CMD_PLAYBACK,
    -1,cmd_desc[CMD_PLAYBACK].name,
    cmd_playBack_related,sizeof(cmd_playBack_related)/sizeof(char **),
    "commands",cmd_playBack_brief,
    cmd_playBack_detailed,sizeof(cmd_playBack_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_playBack_args,sizeof(cmd_playBack_args)/sizeof(char **),
//    CMD_RECORD,
    -1,cmd_desc[CMD_RECORD].name,
    cmd_record_related,sizeof(cmd_record_related)/sizeof(char **),
    "commands",cmd_record_brief,
    cmd_record_detailed,sizeof(cmd_record_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_record_args,sizeof(cmd_record_args)/sizeof(char **),
//    CMD_SETBREAK,
    -1,cmd_desc[CMD_SETBREAK].name,
    cmd_setBreak_related,sizeof(cmd_setBreak_related)/sizeof(char **),
    "commands",cmd_setBreak_brief,
    cmd_setBreak_detailed,sizeof(cmd_setBreak_detailed)/sizeof(char **),
    NULL,0,
    NULL,0,
    cmd_setBreak_args,sizeof(cmd_setBreak_args)/sizeof(char **),
//    CMD_WAIT,
    -1,     	//  Index for error messages
    NULL,   	//  Keyword
    NULL,0, 	//  Related keyword list
    NULL,   	//  Topic
    NULL,	//  Brief string
    NULL,0, 	//  Normal description list of strings
    NULL,0, 	//  Detailed description list of strings
    NULL,0, 	//  Example list
    NULL,0 	//  Argument list

};








