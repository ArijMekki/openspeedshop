import code
import os
import os.path
import re
import string
import sys
import types
import tempfile
import subprocess

import PY_Input

def RunOfflineExp(program="*", collector="*", installed="/usr"):
    """Run offline experiment for Open|SpeedShop.
    """

    #Check For OPENSS_PREFIX and use it.  That is, only if
    #installed's default value has not changed.  Allows
    #users to explicitly define a different OSS installation path (even
    #if OPENSS_PREFIX is defined).
    if (os.environ.has_key("OPENSS_PREFIX") and installed == "/usr"):
        print "OPENSS_PREFIX detected. Using OPENSS_PREFIX..."
        installed = os.environ["OPENSS_PREFIX"]
    
    # set up plugins path
    if os.environ.has_key("OPENSS_PLUGIN_PATH"):
	plugins = os.environ["OPENSS_PLUGIN_PATH"]
    else:
	plugin_dir =  OpenssInstallDir + "/lib64/openspeedshop"
	if not os.path.isdir(plugin_dir):
	    plugin_dir =  OpenssInstallDir + "/lib/openspeedshop"
        if not os.path.isdir(plugin_dir):
	    raise RuntimeError("Failed to locate the openspeedshop plugins directory.")
	plugins = plugin_dir

    rawdir = "/tmp"

    # always write into /tmp/$USER/offline-oss or
    if 'OPENSS_RAWDATA_DIR' in os.environ:
	rawdir = os.environ["OPENSS_RAWDATA_DIR"]
	print "Setting up offline environment...\nOPENSS_RAWDATA_DIR = " + rawdir + "/offline-oss"
	tempdir = rawdir + "/offline-oss"
	os.system("/bin/rm -rf " + tempdir)
	os.mkdir(tempdir)
	os.environ['OPENSS_RAWDATA_DIR'] = tempdir
    else:
	if 'USER' in os.environ:
	    user = os.environ["USER"]
	else:
	    user = ""

	tempdir = rawdir + "/" + user + "/offline-oss"
	print "Setting up offline environment...\nOPENSS_RAWDATA_DIR = " + tempdir
	if not os.path.isdir(tempdir):
	    os.makedirs(tempdir)
	else:
	    # Empty rawdata from any previous offline experiment
	    # and then recreate the raw data directory.
	    shutil.rmtree(tempdir);
	    os.makedirs(tempdir)
	os.environ['OPENSS_RAWDATA_DIR'] = tempdir

    # Locate the libmonitor directory
    # If OPENSS_PREFIX is set, do not assume libmonitor is there.
    # The following test ensures that installed (either /usr or the
    # path from OPENSS_PREFIX) does indeed have a proper libdir.
    libdir = installed + "/lib64"
    if not os.path.isdir(libdir):
        libdir = installed + "/lib"
    if not os.path.isdir(libdir):
        raise RuntimeError("Failed to locate the libmonitor library directory.")

    # Locate the monitor-run command and libmonitor runtime dso.
    # If libmonitor.so is not found in the "installed" path, then
    # fallback to /usr and try again (again, do not assume libmonitor
    # was installed into OPENSS_PREFIX.
    libmonitor = "@@libmonitordir@@/lib64/libmonitor.so"
    if not os.path.isfile(libmonitor):
     libmonitor = "@@libmonitordir@@/lib/libmonitor.so"
     if not os.path.isfile(libmonitor):
      libmonitor = libdir + "/libmonitor.so"
      if not os.path.isfile(libmonitor):
	systemdir = "/usr"
	libdir = systemdir + "/lib64"
	if not os.path.isdir(libdir):
	    libdir = systemdir + "/lib"
	if not os.path.isdir(libdir):
            raise RuntimeError("Failed to locate the libmonitor library directory.")
	libmonitor = libdir + "/libmonitor.so"
	if not os.path.isfile(libmonitor):
            raise RuntimeError("Failed to locate the libmonitor.so library. " + libmonitor)

    # Set the default mpi implementation defined by the O|SS configuration.
    default_mpi_impl = "@@ossdefaultmpi@@"

    # Set the mpiplugin to use for mpi jobs.  The OPENSS_MPI_IMPLEMENTATION
    # is primarily used to choose a different mpi (e.g. mpich vs. openmpi)
    # for systems that have more than on mpi implementation configured for
    # use with O|SS.
    if 'OPENSS_MPI_IMPLEMENTATION' in os.environ:
	use_mpi_impl = os.environ["OPENSS_MPI_IMPLEMENTATION"]
    else:
	use_mpi_impl = default_mpi_impl.lower()

    mpiplugin = plugins + "/mpi-" + use_mpi_impl + "-rt-offline.so"

    if not os.path.isfile(mpiplugin):
	# TODO: This should only error out for cases where something
	# like pcsamp is the collector and there should be mpi too.
	#raise RuntimeError("Failed to locate the mpi runtime plugin. " + libmonitor)
	print "Failed to locate the mpi runtime plugin."
	print "No MPI rank identifiers will be recorded in the openss database."


    # Allow the user to just use the know mpi and mpit collector names.
    # We will prepend the prper mpi implementation.
    if collector.startswith("mpi"):
	preload_files = ""
	if collector == "mpi":
	    collector = collector + "-" + use_mpi_impl
	elif collector == "mpit":
	    collector = collector + "-" + use_mpi_impl
    else:
	# In case this may be an mpi program, setup preload_files to
	# also include the mpi plugin and tell it only to trace MPI_Init.
        os.environ['OPENSS_MPI_TRACED'] = "MPI_Init"
	preload_files = mpiplugin

    program_list = program.split()

    # We need to see if any of the programs participating in the
    # experiment are an mpi program. If so we need to include the
    # mpi plugin and trace only MPI_Init to gather the mpi rank info.
    # If we find there is no mpi program then we do not need the mpi
    # plugin aded to preload_files.
    for s in program_list:
        if os.path.isfile(s):
	    # test if the file is elf binary and has the symbol MPI_Init.
	    # We use os.WEXITSTATUS to properly decode the status.
	    isexecutable = os.system('file ' + s + ' | grep -q ELF')
	    if os.WEXITSTATUS(isexecutable):
	        ismpi = os.system('nm ' + s + ' | grep -q MPI_Init')
	        if not os.WEXITSTATUS(ismpi):
		    preload_files = ""
		    break


    # Form the command that will run the offline experiment
    command = program

    collectorplugin =  plugins + "/" + collector + "-rt-offline.so"

    if not os.path.isfile(collectorplugin):
	raise RuntimeError("Failed to locate the " +  collector + " runtime plugin.")
	# this code below could replace the error here so we could
	# just let the program run without our data collectors.
	#collectorplugin = ""
	#preload_files = ""

    # Prepare our collectors and libmonitor for LD_PRELOAD.
    oss_preload = \
              collectorplugin + \
	      ":" + preload_files + \
	      ":" + libmonitor

    os.environ['LD_PRELOAD'] = oss_preload

    # Execute the command in a subprocess rather than replacing the
    # current process like os.system does. Need Python 2.4 or later for this.
    print "\nRunning offline experiment using the command:\n\"%s\"\n" % command

    subp = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,)
    while True:
	o = subp.stdout.readline()
	if o == '' and subp.poll() != None: break
	sys.stdout.write(o)

    # currently ossutil writes openss databases to ever increasing
    # database files from the lowest it finds.
    # Lets just always remove X.0.openss so that is our default for now.
    # Always defaulting to X.0.openss allows us to use restore below with
    # no need to worry about finding which file was just written.
    os.system('/bin/rm -rf ./X.0.openss')

    # Convert the rawdata files into opens database format.
    convert_command = OpenssInstallDir + "/bin/ossutil " + os.environ['OPENSS_RAWDATA_DIR']
    os.system(convert_command)

    # restore the newly created database into openss.
    r_line = myparse.process("exprestore -f ./X.0.openss")
    myparse.runsource(r_line, "stderr")

    # restore original rawdata directory
    os.environ['OPENSS_RAWDATA_DIR'] = rawdir
