#! /bin/bash

#
#  This script is focused on running on Sandia systems
#
if [ "$1" == "help" -o "$1" = "--help" ]
then
  echo ""
  echo "Usage: This script automatically compiles smg2000 and sweep3d"
  echo "       using the Intel, PGI, and GNU compilers and the default OpenMPI MPI implementation."
  echo ""
  echo "       It then runs OpenSpeedShop on each of the smg2000 and sweep3d versions using:"
  echo "       the pcsamp, usertime, hwc, hwctime, io, iot, mpi, and mpit experiments."
  echo ""
  echo "       It verifies the results only by searching for a common expected value.  At this time"
  echo "       no performance ratios are tested for."
  echo ""
  exit
fi

#
#
debug_flag=1


##set -x
basedir=`pwd`

# Try looking for SANDIA run environment
found_sandia=0

if [ $SNLSYSTEM ]; then
  echo "Found SNLSYSTEM environment variable: ", $SNLSYSTEM
  found_sandia=1
  runcommand=`which srun`
  echo "NOTE: CLEAR ALL MODULE SETTINGS"
  module purge
  module load openss_run_openmpi
  echo "NOTE: load openss_run_openmpi module"
  module load mpi/openmpi-1.2.7_ofed_pgi-7.2-3
  echo "NOTE: load mpi/openmpi-1.2.7_ofed_pgi-7.2-3 module"
else
  echo "Did not find SNLSYSTEM environment variable: "
  found_sandia=0
fi

if [ $found_sandia == 0 ]
then
  echo "Did not find SNLSYSTEM environment variable: Are we running this script on the correct system?"
  exit
fi

for testname in `ls *.tar.gz`
do
   if [ debug_flag == 1 ]
   then
      echo "1st loop, testname=" $testname
   fi

   NEWNAME=$(echo "$testname" | sed -e 's/.tar.gz//')

   if [ debug_flag == 1 ]
   then
     echo "1st loop, NEWNAME=" $NEWNAME
   fi

   cd $basedir

   if [ debug_flag == 1 ]
   then
     echo "1st loop, basedir=" $basedir
   fi

#thiscompiler="intel"
#  for thiscompiler in intel pgi gnu

#  loop here through a compiler list
   for thiscompiler in pgi
   do



     if [ debug_flag == 1 ]
     then
       echo "thiscompiler=" $thiscompiler  
       echo "testsuffix=" $testsuffix
       echo "testCC=" $testCC
     fi


hostabi=`uname -m`
ulimit -c unlimited
#
# setup the path and information with regards to building the MPI applicaton you will be running
#
testexe=$NEWNAME

currentdir=`pwd`
testpathbase=$currentdir

echo $currentdir

gunzip $testexe.tar.gz
tar -xvf $testexe.tar
gzip $testexe.tar

cd $testexe

thismpicc=`which mpicc`
echo "which mpicc=" $thismpicc

if [ "$testexe" == "smg2000" ]
then
#  mv -f newMakefile.include Makefile.include
  make
elif  [ "$testexe" == "sweep3d" ]
then
#  mv -f new_makefile makefile
  make mpi
fi

if [ "$testexe" == "smg2000" ]
then
   testpath=$testpathbase/smg2000/test
   testexepath=$testpath
   testexeargs='-n 35 35 35'
   testprogram=$testexepath/$testexe
elif [ "$testexe" == "sweep3d" ]
then
   testpath=$testpathbase/$testexe
   testexepath=$testpath
   testexeargs=''
   testprogram=$testexepath/$testexe.mpi
else
   testpath=$testpathbase/$testexe
   testexepath=$testpath
   testexeargs=''
   testprogram=$testexepath/$testexe
fi

#
# setup the OpenSpeedShop experiment type
#
experiment=usertime
#experiment=pcsamp

sleep 2

#export OPENSS_DEBUG_OPENSS=1
#export OPENSS_DEBUG_MPIJOB=1
#export OPENSS_DEBUG_PROCESS=1
#export DYNINST_DEBUG_STARTUP=1
#export DYNINST_DEBUG_SYMTAB=1

cd $testpath

#
# setup the path to OpenSpeedShop
#
theopenss=`which openss`
#theopenss=/g/g24/jeg/chaos_4_x86_64_ib/opt/OSS-mrnet/bin/openss

echo "Using openss=" $theopenss
echo "Using the raw data directory storage environment variable: OPENSS_RAWDATA_DIR=" $OPENSS_RAWDATA_DIR


cat > common_commands << EOF
wait
expstatus
expview
EOF


if [ "$testexe" == "smg2000" ]
then
cat > smg2000_openmpi_script.sh << EOF
#!/bin/bash
module use --append /projects/OpenSpeedShop/modules/tlcc
module purge
#module load mpi/mvapich-1.0.1_ofed_pgi-7.2-3
module load mpi/openmpi-1.2.7_ofed_pgi-7.2-3
module load modules openss_run_openmpi
module list
which openss
executable=`which smg2000`
echo "Current directory is:" `$pwd`
echo "smg2000 executable path directory is:" $executable

#
# Run all experiments
#
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./smg2000 -n 25 25 25" pcsamp
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./smg2000 -n 25 25 25" usertime
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./smg2000 -n 25 25 25" hwc
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./smg2000 -n 25 25 25" hwctime
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./smg2000 -n 25 25 25" io
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./smg2000 -n 25 25 25" iot
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./smg2000 -n 5 5 5" mpi
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./smg2000 -n 5 5 5" mpit
#
# Find corresponding experiment database files and create files that can be used to restore the databases
#
ls *.openss | grep pcsamp.openss > openmpi_create_pcsamp
ls *.openss | grep usertime.openss > openmpi_create_usertime
ls *.openss | grep hwc.openss > openmpi_create_hwc
ls *.openss | grep hwctime.openss > openmpi_create_hwctime
ls *.openss | grep io.openss > openmpi_create_io
ls *.openss | grep iot.openss > openmpi_create_iot
ls *.openss | grep mpi.openss > openmpi_create_mpi
ls *.openss | grep mpit.openss > openmpi_create_mpit
#
# Use the corresponding experiment database file names to restore the database and print out the status and results for the experiments
#
echo "-------------------------------------"
echo "BEGIN Analyzing smg2000 pcsamp experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' openmpi_create_pcsamp > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "-------------------------------------"
echo "END Analyzing smg2000 pcsamp experiment"
echo "-------------------------------------"

echo ""

echo "-------------------------------------"
echo "BEGIN Analyzing smg2000 usertime experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' openmpi_create_usertime > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "END Analyzing smg2000 usertime experiment"

echo "BEGIN Analyzing smg2000 hwc experiment"
sed 's/^/exprestore -f /' openmpi_create_hwc > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "-------------------------------------"
echo "END Analyzing smg2000 hwc experiment"
echo "-------------------------------------"

echo ""

echo "-------------------------------------"
echo "BEGIN Analyzing smg2000 hwctime experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' openmpi_create_hwctime > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "-------------------------------------"
echo "END Analyzing smg2000 hwctime experiment"
echo "-------------------------------------"

echo ""

echo "-------------------------------------"
echo "BEGIN Analyzing smg2000 io experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' openmpi_create_io > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "-------------------------------------"
echo "END Analyzing smg2000 io experiment"
echo "-------------------------------------"

echo ""

echo "-------------------------------------"
echo "BEGIN Analyzing smg2000 iot experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' openmpi_create_iot > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "-------------------------------------"
echo "END Analyzing smg2000 iot experiment"
echo "-------------------------------------"

echo ""

echo "-------------------------------------"
echo "BEGIN Analyzing smg2000 mpi experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' openmpi_create_mpi > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "-------------------------------------"
echo "END Analyzing smg2000 mpi experiment"
echo "-------------------------------------"

echo ""

echo "-------------------------------------"
echo "BEGIN Analyzing smg2000 mpit experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' openmpi_create_mpit > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "-------------------------------------"
echo "END Analyzing smg2000 mpit experiment"
echo "-------------------------------------"
echo ""
#
# End of nested script
#
EOF

echo "pwd=$pwd"

echo "SNLSYSTEM=$SNLSYSTEM"
RUN_DIR=$testpath
echo "RUN_DIR=$RUN_DIR"
cd $RUN_DIR
REQ_WALLTIME=1:00
REQ_NNODES=2
REQ_SCRIPT="$RUN_DIR/smg2000_openmpi_script.sh"
sbatch --account=FY093085 --time=${REQ_WALLTIME}:00 -N ${REQ_NNODES} ${REQ_SCRIPT}

elif [ "$testexe" == "sweep3d" ]
then

cat > sweep3d_openmpi_script.sh << EOF
#!/bin/bash
module use --append /projects/OpenSpeedShop/modules/tlcc
module purge
#module load mpi/mvapich-1.0.1_ofed_pgi-7.2-3
module load mpi/openmpi-1.2.7_ofed_pgi-7.2-3
module load modules openss_run_openmpi
module list
which openss
#
# Run all experiments
#
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./sweep3d.mpi" pcsamp
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./sweep3d.mpi" usertime
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./sweep3d.mpi" hwc
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./sweep3d.mpi" hwctime
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./sweep3d.mpi" io
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./sweep3d.mpi" iot
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./sweep3d.mpi" mpi
openss -offline -f "/apps/x86_64/mpi/openmpi/pgi-7.2-3/openmpi-1.2.7_ofed/bin/mpiexec -np 32 ./sweep3d.mpi" mpit
#
# Find corresponding experiment database files and create files that can be used to restore the databases
#
ls *.openss | grep pcsamp.openss > openmpi_create_pcsamp
ls *.openss | grep usertime.openss > openmpi_create_usertime
ls *.openss | grep hwc.openss > openmpi_create_hwc
ls *.openss | grep hwctime.openss > openmpi_create_hwctime
ls *.openss | grep io.openss > openmpi_create_io
ls *.openss | grep iot.openss > openmpi_create_iot
ls *.openss | grep mpi.openss > openmpi_create_mpi
ls *.openss | grep mpit.openss > openmpi_create_mpit
#
# Use the corresponding experiment database file names to restore the database and print out the status and results for the experiments
#
echo "-------------------------------------"
echo "BEGIN Analyzing sweep3d.mpi pcsamp experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' openmpi_create_pcsamp > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi pcsamp experiment"
echo "-------------------------------------"

echo ""

echo "-------------------------------------"
echo "BEGIN Analyzing sweep3d.mpi usertime experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' openmpi_create_usertime > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "END Analyzing sweep3d.mpi usertime experiment"

echo "BEGIN Analyzing sweep3d.mpi hwc experiment"
sed 's/^/exprestore -f /' openmpi_create_hwc > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi hwc experiment"
echo "-------------------------------------"

echo ""

echo "-------------------------------------"
echo "BEGIN Analyzing sweep3d.mpi hwctime experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' openmpi_create_hwctime > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi hwctime experiment"
echo "-------------------------------------"

echo ""

echo "-------------------------------------"
echo "BEGIN Analyzing sweep3d.mpi io experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' openmpi_create_io > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi io experiment"
echo "-------------------------------------"

echo ""

echo "-------------------------------------"
echo "BEGIN Analyzing sweep3d.mpi iot experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' openmpi_create_iot > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi iot experiment"
echo "-------------------------------------"

echo ""

echo "-------------------------------------"
echo "BEGIN Analyzing sweep3d.mpi mpi experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' openmpi_create_mpi > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi mpi experiment"
echo "-------------------------------------"

echo ""

echo "-------------------------------------"
echo "BEGIN Analyzing sweep3d.mpi mpit experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' openmpi_create_mpit > new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script
echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi mpit experiment"
echo "-------------------------------------"
echo ""
#
# End of nested script
#
EOF

echo "pwd=$pwd"

echo "SNLSYSTEM=$SNLSYSTEM"
RUN_DIR=$testpath
echo "RUN_DIR=$RUN_DIR"
cd $RUN_DIR
REQ_WALLTIME=1:00
REQ_NNODES=2
REQ_SCRIPT="$RUN_DIR/sweep3d_openmpi_script.sh"
sbatch --account=FY093085 --time=${REQ_WALLTIME}:00 -N ${REQ_NNODES} ${REQ_SCRIPT}
fi

# end loop through the compiler list
done


# end loop through the test list
done

exit


cd $testpathbase 

