#!/usr/bin/env python

from sys import *
import sys
import os
from time import *
from string import *
#from datetime import *


def createTestList():
	checktemptestlist = os.system('test -e temptestlist')
	if checktemptestlist == 0:
        	os.system('rm -f temptestlist')
	os.system('ls -1 *.tst >> temptestlist')

def runTest(testName):
	checkinput = os.system('test -e input.script')
	if checkinput == 0:
		os.system('rm -f input.script')
	#test_input = open(testName, 'r')
	#testCommand = test_input.readline()
	#linesToCompare = test_input.readline()
	#test_input.close()
	os.system('./'+testName+ '>> '+ testName+'.output')

def iterateThroughTestList(fileptr):
	con_input = open('temptestlist', 'r')
        while 1:
                config_line = con_input.readline()
                if not config_line:
                        break
                test_name = config_line
		i = 0
	        while 1:
                	if test_name[i] == '.':
                        	break
                	else:
                        	i += 1
        	testName = test_name[0:i+4]

		runTest(testName)
		CompareResults(testName, fileptr)
               
        con_input.close()

def CompareResults(testName, fileptr):
	outputfilename = testName + '.output'
	expectedfilename = testName + '.expected'
	outputfileptr = open(outputfilename, 'r')
	expectedfileptr = open(expectedfilename, 'r')
	nooutput = 0
	while 1:
		tempfileline = outputfileptr.readline()
		if not tempfileline:
			nooutput = 1	
			break
		if tempfileline[0:9] == '      Exc':
			break
	expectedfileptr.readline()
	test_status = 0
	previous_exclusive_expected = 0
	previous_inclusive_expected = 0
	previous_exclusive_actual = 0
	previous_inclusive_actual = 0
	exclusive_passing_ratio = 1
	inclusive_passing_ratio = 1
	failure_reason = 0
	while 1:
		if (nooutput == 1):
			failure_reason = 3
			passing_ratio = 0
			break
		outputfileline = outputfileptr.readline()
		if not outputfileline:
			break
		expectedfileline = expectedfileptr.readline()
		if not expectedfileline:
			break
		i = 0
		while outputfileline[i] == ' ':
			i += 1
		j = i
		while outputfileline[j] != ' ':
			j +=1
		actual_exclusive_time = atof(outputfileline[i:j])
		i = j+ 1
		while outputfileline[i] == ' ':
			i +=1
		j = i
		while (outputfileline[j] != ' '):
			j +=1
		actual_inclusive_time = atof(outputfileline[i:j])
		i = j+1
		while outputfileline[i]==' ':
			i +=1
		j = i
		while (outputfileline[j] != '\n') and (outputfileline[j] != ' ') and (outputfileline[j] != '(' ):
			j +=1
		actual_function = outputfileline[i:j]
		i = 0
                while expectedfileline[i] == ' ':
                        i += 1
                j = i
                while expectedfileline[j] != ' ':
                        j +=1
                expected_exclusive_time= atof(expectedfileline[i:j])
                i = j+ 1
                while expectedfileline[i] == ' ':
                        i +=1
                j = i
		while (outputfileline[j] != ' '):
                        j +=1
                expected_inclusive_time = atof(expectedfileline[i:j])
                i = j+1
                while expectedfileline[i]==' ':
                        i +=1
                j = i
                while (expectedfileline[j] != '\n') and (expectedfileline[j] != ' ') and (expectedfileline[j] != '('):
                        j +=1
                expected_function = expectedfileline[i:j]
		if (expected_function == actual_function):
			if (previous_exclusive_expected != 0 ):
				actual_exclusive_ratio = previous_exclusive_expected / actual_exclusive_time
				expected_exclusive_ratio = previous_exclusive_expected / expected_exclusive_time
				upper_limit = expected_exclusive_ratio + (expected_exclusive_ratio * .1)
				lower_limit = expected_exclusive_ratio - (expected_exclusive_ratio * .1)
				print actual_exclusive_ratio
				if not (lower_limit <= actual_exclusive_ratio <= upper_limit):
					exclusive_passing_ratio = 0
					failure_reason = 1
                                actual_inclusive_ratio = previous_inclusive_expected / actual_inclusive_time
                                expected_inclusive_ratio = previous_inclusive_expected / expected_inclusive_time
                                upper_limit = expected_inclusive_ratio + (expected_inclusive_ratio * .1)
                                lower_limit = expected_inclusive_ratio - (expected_inclusive_ratio * .1)
				print actual_inclusive_ratio
                                if not (lower_limit <= actual_inclusive_ratio <= upper_limit):
                                        inclusive_passing_ratio = 0
                                        failure_reason = 4

		else:
				passing_ratio = 0
				failure_reason = 2
		previous_actual_inclusive = actual_inclusive_time
		previous_actual_exclusive = actual_exclusive_time
		previous_exclusive_expected = expected_exclusive_time
		previous_inclusive_expected = expected_inclusive_time

	if ((exclusive_passing_ratio== 1) and inclusive_passing_ratio == 1):
		fileptr.write(testName + ' has PASSED \n')
	else:
		fileptr.write(testName + ' has FAILED.  ')
		if (failure_reason == 1):
			fileptr.write('The functions exclusive time ratios are incorrect.\n')
		if (failure_reason == 3):
			fileptr.write('Looks like openss crashed. \n')
		if (failure_reason == 2):
			fileptr.write('The ordering of the functions is incorrect.\n')
		if (failure_reason == 4):
			fileptr.write('The functions inclusive time ratios are incorrect.\n')
		


	 	

if __name__ == '__main__':
	checkoutput = os.system('test -e *.output')
        if checkoutput == 0:
                os.system('rm -f *.output')

	currTime = strftime("%d_%m_%Y_%H%M%S", localtime())
        resultsFile =  'testresults_' + currTime
        resultfileptr = open(resultsFile, 'w')
	tempfileptr = open('testresultsfilename', 'w')
	tempfileptr.write(resultsFile)

	createTestList()
	iterateThroughTestList(resultfileptr)
