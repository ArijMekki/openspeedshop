

                Release Note for Open|SpeedShop-2.0.0
                           October 31, 2010

Please contact us via: oss-questions@openspeedshop.org
if you have any problems with installation or execution of Open|SpeedShop.
Thanks for your interest!

The 2.0.0 release includes these specific enhancements and other fixes:

1) More general support for support of PPC platforms

2) More general support for support of Cray-XT/XE and Blue Gene platforms.

3) Updated man pages and convenience scripts

4) More general support for the online/dynamic version of OpenSpeedShop

5) Updated PAPI support (4.1.1)

6) A new hwcsamp experiment based on Program Counter Sampling.  In addition to the
   program counter being recorded, this experiment also records up to 6 hardware counters.

7) Improvements to the osscompare script with the ability to create valid comma separated lists when
   the preference for "Use Blanks In Comparison Output" is set to false (unchecked) in the Preferences
   panel of the OpenSpeedShop GUI.

8) Improvements to the oss<experiment_name> convenience scripts.

9) Updated Dyninst and MRNet support.

10) Many more updates and bug fixes.


The 1.9.3.4 release includes these specific enhancements and other fixes:

   1) Support for the Cray-XT4 and Cray-XT5 platforms for static application usage

   2) Incremental fixes toward support for PPC and Blue Gene platforms but not ready 
      for general usage at this point.

   3) Performance enhancements for viewing performance data for large scale. 

   4) New osscompare convenience script which allows users to compare experiments (database files)
      to eachother.  Up to 5 files may be listed.   
      Example usage: osscompare "db_file1.openss, db_file2.openss, db_file3.openss"
      This creates a side-by-side comparision listing.

The 1.9.3.3 release includes these specific enhancements and other fixes:

   1) Fix call stack unwinding bugs by patching the libunwind component

   2) Incremental fixes toward support for PPC platforms

   3) Incremental fixes toward support for the Cray-XT5 and BG/P platforms.

   4) Fixes for better mpich2 and mvapich2 support for OpenSpeedShop experiments 
      on Fortran applications.

   5) Make configuration changes so that MRNet 2.2 and Dyninst 6.1 are the default
      versions for OpenSpeedShop.

The 1.9.3.2 release includes these specific enhancements and other fixes:

   1) Add additional changes for better support of Intel MPI

   2) Removed all autogen created files. Now use libtool 2.2x,
      automake 1.11, and autoconf 2.65 for deveopment builds from cvs source.

   3) Updates to better support mvapich, mpt, and openmpi.
      Support for wrapping Fortran MPI calls was needed.

   4) Add osslink command to support building static applications
      with static collectors.  This is needed for building applications to run
      with Open|SpeedShop collectors embedded in Cray-XT5 and IBM BG systems

   5) More additional updates to better support mvapich, mpt, openmpi, and Intel mpi (mpich2)
      For Intel mpi, when building set the OPENSS_MPI_MPICH2 environment variable to the path
      to the Intel mpi installation directory.

   6) Initial bare bones support for building and executing on PPC/PPC64 systems.

   7) Improvements to the support for individual pthread selection when viewing 
      performance data in the GUI.

   8) Improvements to cluster analysis support for pthreaded applications, 
   
   9) Improves the configuration support for Intel MPI and SGI MPT

  10) Improves the SGI MPT, mpich2, and mvapich application recognition at execution time.

  11) The base open source components that Open|SpeedShop uses have also been updated 
      to new and improved versions, most notably, libunwind. 

  12) This update also fixes several other issues and bugs.


The 1.9.3.1 release includes these specific enhancements and other fixes:

   1) Adds further support for OpenSpeedShop to work on Fedora 11.   There were several execution problems
      that have been fixed.  Most of these were with building and with the usage of the GUI.

The 1.9.3 release includes these specific enhancements and other fixes:

   1) Adds support for OpenSpeedShop to work on Fedora 11.   There were several compile problems
      with Dyninst, MRNet, and OpenSpeedShop.
   2) Adds initial support for OpenSpeedShop to work on the Cray-XT5.  This is not refined at this point
      but the structure is present in the build and configuration for the OpenSpeedShop_ROOT and OpenSpeedShop 
      source tress.
   3) Fixes a serious problem in OpenSpeedShop when the application is loading and unloading large 
      numbers of dso files.  There was an abort in the gathering of the performance data for this issue.
   4) Many other configuration and operational issues were fixed.

The 1.9.2 release includes these specific enhancements and other fixes:

   1) Removal of the requirement of the "-offline" command line option to run offline
      experiments.   openss -f "executable" pcsamp now defaults to the offline mode of operation.l
      To invoke the dynamic/online mode of operation, you must now use the "-online" command line option.
   2) Improved configuration support for mpich2, mvapich and mvapich2.
   3) Several GUI enhancements have been made in the StatsPanel to allow easier 
      creation of optional views of the performance data.  Look for the "OV" icon on the Stats Panel.
      Clicking on the "OV" icon will pop up a dialog box which allows you to choose what metrics
      (types of performance data gathered for that experiment) you want to have displayed in the
      Stats Panel.
   4) Enhancements to the custom comparison view, where short cut icons have been added.
   5) More build, configuration, and install updates. More updates to the install 
      script to check for more required packages and let the user know which packages are 
      missing before the script invokes the build.
   6) Scaling improvements.  openss has been run in offline mode on MPI applications running with
      2048 ranks/processors.

Several bugs fixes are also included in this version including:
   1) The mpiotf experiment was broken on some platforms.
   2) There were problems with the average metric calculation for MPI applications. 
   3) There were problems getting data for all MPI application ranks on some platforms.
   4) Many other bugs fixes.

Release 1.9.2 is a bug fix update to Release 1.9 and 1.9.1 of Open|SpeedShop.  However, this release 
includes a number of improvements to the build and execution capabilities of the Open|SpeedShop performance tool.

Release 1.9.2 of Open|SpeedShop improves on the "offline" mode of operation.  By offline,
we mean that we use linker based instrumentation, not the dynamic instrumentation Open|SpeedShop
has used in previous versions of Open|SpeedShop.  

Online instrumentation is still available in Open|SpeedShop, although using the offline mode of 
operation is strongly recommended for the 1.9.2 version of Open|SpeedShop.  There are still issues 
with online instrumentation as we move from using DPCL to using MRNet as our cluster node network 
management package.

We recommend running Open|SpeedShop (openss is the command) in the offline mode (See the example
below).  The "openss -offline" command will create an Open|SpeedShop database file from which the 
performance data can be viewed postmortem.  The command to view the data postmortem is:
   GUI: openss -f <database file name>
   CLI: openss -cli -f <database file name>, then enter the "expview" command

You may consult the Open|SpeedShop Users Guide or Quick Start Guide for more information.
These documents are available on the Open|SpeedShop web site: openspeedshop.org or in the installation
directory in <install_dir_path>/share/doc/packages/OpenSpeedShop/users_guide.

Here is an example listed by steps:

1) RUN openss in offline mode to gather the data:
   This command attached the Open|SpeedShop performance data collectors, specified by the experiment type
   (pcsamp) in this example, to the nbody mpi application and runs the application.  The output from the
   application comes to the screen, as well as the Open|SpeedShop information messages and performance data
   default report.   A database file containing the performance data and all the necessary information to 
   view the performance information postmortem is also created during the run.

prompt:>openss -f "/opt/openmpi-1.2.6/bin/orterun -np 2 nbody" pcsamp
[openss]: Using OPENSS_PREFIX installed in /opt/OSS-mrnet
[openss]: Setting up offline raw data directory in /tmp/jeg/offline-oss
[openss]: Running offline pcsamp experiment using the command:
"/opt/openmpi-1.2.6/bin/orterun -np 2 /opt/OSS-mrnet/bin/ossrun -o /tmp/jeg/offline-oss "./nbody" pcsamp"

Iteration 1 of 100...
Iteration 2 of 100...
Iteration 3 of 100...
Iteration 4 of 100...
...
...
Iteration 99 of 100...
Iteration 100 of 100...

[openss]: Converting raw data from /tmp/jeg/offline-oss into X.0.openss

Processing raw data for nbody
Processing processes and threads ...
Processing performance data ...
Processing functions and statements ...
Added 9 functions to symboltable
Added 90 statements to symboltable

[openss]: Restoring and displaying default view for nbody-pcsamp-1.openss

The restored experiment identifier is:  -x 1                   

  Exclusive CPU time         % of CPU Time  Function (defining location)
         in seconds.                                            
           39.130000             95.068027  main (nbody: nbody-mpi.c,72)
            0.530000              1.287658  opal_sys_timer_get_cycles (libopen-pal.so.0.0.0: timer.h,43)
            0.470000              1.141885  mca_btl_sm_component_progress (libmpi.so.0.0.0: btl_sm_component.c,340)
            0.260000              0.631681  ompi_cb_fifo_read_from_tail (libmpi.so.0.0.0: ompi_circular_buffer_fifo.h,318)
            0.220000              0.534500  opal_progress (libopen-pal.so.0.0.0: opal_progress.c,238)
            0.110000              0.267250  mca_bml_r2_progress (libmpi.so.0.0.0: bml_r2.c,98)
            0.070000              0.170068  opal_using_threads (libmpi.so.0.0.0: mutex.h,136)
            0.010000              0.024295  opal_condition_wait (libmpi.so.0.0.0: condition.h,59)
            0.010000              0.024295  ompi_convertor_unpack (libmpi.so.0.0.0: convertor.c,274)


2) The above "openss ..." command also creates an Open|SpeedShop database file for postmortem 
   viewing with optional ways to view the performance data.   A "ls" command shows that the 
   database file naming convention follows the form: <executable_name>-<experiment_type>.openss.   
   In this case, the executable name is "nbody" and the experiment type is "pcsamp".

ls -lastr *.openss  
  44 -rw-r--r-- 1 jeg jeg   38912 2009-06-03 14:43 nbody-pcsamp.openss

3) You may view the database in the Open|SpeedShop graphical user interface (GUI) with the command:  

        openss -f nbody-pcsamp.openss

   Then select the StatsPanel tab to see the default results.  There is a toolbar which contains numerous icons which'
   represent alternative views of the performance data.

4) You may view the database in the Open|SpeedShop interactive command line user interface (CLI) with 
   the command:  openss -cli -f nbody-pcsamp.openss
   
   a) The default view:

   prompt>openss -cli -f nbody-pcsamp.openss
   The restored experiment identifier is:  -x 1                   
   openss>>expview

   Exclusive CPU time         % of CPU Time  Function (defining location)
          in seconds.
           39.130000             95.068027  main (nbody: nbody-mpi.c,72)
            0.530000              1.287658  opal_sys_timer_get_cycles (libopen-pal.so.0.0.0: timer.h,43)
            0.470000              1.141885  mca_btl_sm_component_progress (libmpi.so.0.0.0: btl_sm_component.c,340)
            0.260000              0.631681  ompi_cb_fifo_read_from_tail (libmpi.so.0.0.0: ompi_circular_buffer_fifo.h,318)
            0.220000              0.534500  opal_progress (libopen-pal.so.0.0.0: opal_progress.c,238)
            0.110000              0.267250  mca_bml_r2_progress (libmpi.so.0.0.0: bml_r2.c,98)
            0.070000              0.170068  opal_using_threads (libmpi.so.0.0.0: mutex.h,136)
            0.010000              0.024295  opal_condition_wait (libmpi.so.0.0.0: condition.h,59)
            0.010000              0.024295  ompi_convertor_unpack (libmpi.so.0.0.0: convertor.c,274)

     b) Find all the highest time taking statements

openss>>expview -v statements

   Exclusive CPU time         % of CPU Time  Statement Location (Line Number)
          in seconds.                                            
           11.590000             28.158406  nbody-mpi.c(238)    
            9.130000             22.181730  nbody-mpi.c(240)    
            8.970000             21.793003  nbody-mpi.c(239)    
            4.390000             10.665695  nbody-mpi.c(227)    
            1.150000              2.793975  nbody-mpi.c(230)    
            1.100000              2.672498  nbody-mpi.c(232)    
            0.710000              1.724976  nbody-mpi.c(231)    
            0.710000              1.724976  nbody-mpi.c(233)    
            0.680000              1.652089  nbody-mpi.c(236)    
            0.520000              1.263362  timer.h(45)         
            0.340000              0.826045  nbody-mpi.c(235)    
            0.270000              0.655977  nbody-mpi.c(228)    

    c) Compare two of the ranks based on the metric time

openss>>expcompare -r 0 -r 1 -m time

        pcsamp -r 0,          pcsamp -r 1,  Function (defining location)
   Exclusive CPU time    Exclusive CPU time                      
          in seconds.           in seconds.                      
           19.690000             19.440000  main (nbody: nbody-mpi.c,72)
            0.420000              0.110000  opal_sys_timer_get_cycles (libopen-pal.so.0.0.0: timer.h,43)
            0.410000              0.060000  mca_btl_sm_component_progress (libmpi.so.0.0.0: btl_sm_component.c,340)
            0.210000              0.050000  ompi_cb_fifo_read_from_tail (libmpi.so.0.0.0: ompi_circular_buffer_fifo.h,318)
            0.200000              0.020000  opal_progress (libopen-pal.so.0.0.0: opal_progress.c,238)
            0.080000              0.030000  mca_bml_r2_progress (libmpi.so.0.0.0: bml_r2.c,98)
            0.040000              0.030000  opal_using_threads (libmpi.so.0.0.0: mutex.h,136)
                                  0.010000  opal_condition_wait (libmpi.so.0.0.0: condition.h,59)
                                  0.010000  ompi_convertor_unpack (libmpi.so.0.0.0: convertor.c,274)

    d) See the users guide for more options or use the CLI "help commands" help command.  


INTERMEDIATE INFORMATION FYI:

The 2.0.0 version of OpenSpeedShop is in development.

We are actively working on the online/MRNet version of OpenSpeedShop which will allow users to 
attach to running processes and receive intermediate performance data results while the 
application being monitored is running.

For now (July 27, 2010), we recommend running Open|SpeedShop (openss is the command) 
in the "offline" mode.  This will create an Open|SpeedShop database file from which 
the performance data can be viewed postmortem.  The command to view the data is:

   GUI: openss -f <database file name>
   CLI: openss -cli -f <database file name>, then enter the "expview" command

You may consult the Open|SpeedShop Users Guide or Quick Start Guide for more information.
These are available on the Open|SpeedShop web site: openspeedshop.org or in the installation
directory in <install_dir_path>/share/doc/packages/OpenSpeedShop/users_guide.

Here is an example listed by steps:

1) RUN osspcsamp to gather the data:
   This command attached the Open|SpeedShop performance data collectors specified by the experiment type
   (pcsamp) in this example, to the nbody mpi application and runs the application.  The output from the
   application comes to the screen as well as the Open|SpeedShop information messages and performance data
   default report.   A database file containing the performance data and all the necessary information to 
   view the performance information postmortem is created.

   Use osspcsamp for program counter sampling, ossusertime for call path profiling, osshwc or osshwctime for 
   access to the PAPI overflow counters, ossio or ossiot for I/O tracing, ossmpi, ossmpit, or ossmpiotf for 
   mpi tracing, and ossfpe for Floating point exception tracing.  There are man pages for each convenience 
   command.

prompt:>osspcsamp "/opt/openmpi-1.4.2/bin/orterun -np 2 nbody" 
[openss]: Using OPENSS_PREFIX installed in /opt/OSS-mrnet
[openss]: Setting up offline raw data directory in /tmp/jeg/offline-oss
[openss]: Running offline pcsamp experiment using the command:
"/opt/openmpi-1.4.2/bin/orterun -np 2 ossrun "./nbody" pcsamp"

Iteration 1 of 50...
Iteration 2 of 50...
...
...
Iteration 49 of 50...
Iteration 50 of 50...

[openss]: Converting raw data from /tmp/jeg/offline-oss into X.0.openss

Processing raw data for nbody
find_address_in_section:  bfd_find_nearest_line FAILS FOR 0x00002b03c306efd8
Added 24 functions to symboltable
Added 156 statements to symboltable

[openss]: Restoring and displaying default view for X.0.openss

The restored experiment identifier is:  -x 1                   

  Exclusive CPU time         % of CPU Time  Function (defining location)
         in seconds.                                            
           35.730000             96.359223  main (nbody: nbody-mpi.c,71)
            0.240000              0.647249  mca_btl_sm_component_progress (mca_btl_sm.so: btl_sm_component.c,340)
            0.200000              0.539374  opal_sys_timer_get_cycles (libopen-pal.so.0.0.0: timer.h,43)
            0.160000              0.431499  mca_bml_r2_progress (mca_bml_r2.so: bml_r2.c,98)
            0.140000              0.377562  ompi_cb_fifo_read_from_tail (mca_btl_sm.so: ompi_circular_buffer_fifo.h,318)
            0.120000              0.323625  opal_progress (libopen-pal.so.0.0.0: opal_progress.c,238)
            0.100000              0.269687  ompi_fifo_read_from_tail (mca_btl_sm.so: ompi_fifo.h,408)
            0.060000              0.161812  __read_nocancel (libc-2.6.so: interp.c,0)
            0.030000              0.080906  opal_using_threads (mca_btl_sm.so: mutex.h,136)
            0.030000              0.080906  _IO_vfscanf_internal (libc-2.6.so)

2) The above command also created an Open|SpeedShop database file for postmortem viewing with optional ways to view
   the performance data.   A "ls" command shows that the database file name is nbody-pcsamp.openss.

ls -lastr *.openss  
  52 -rw-r--r-- 1 jeg jeg   46080 2008-11-14 08:43 nbody-pcsamp.openss

3) You may view the database in the Open|SpeedShop graphical user interface (GUI) with the command:  openss -f nbody-pcsamp.openss
   Then select the StatsPanel tab to see the default results.  There is a toolbar which contains numerous icons which'
   represent alternative views of the performance data.

4) You may view the database in the Open|SpeedShop interactive command line user interface (CLI) with 
   the command:  openss -cli -f nbody-pcsamp.openss
   
   a) The default view:

prompt>openss -cli -f nbody-pcsamp.openss 
The restored experiment identifier is:  -x 1                   
openss>>expview

  Exclusive CPU time         % of CPU Time  Function (defining location)
         in seconds.                                            
           35.590000             95.723507  main (nbody: nbody-mpi.c,71)
            0.370000              0.995159  mca_btl_sm_component_progress (mca_btl_sm.so: btl_sm_component.c,340)
            0.270000              0.726197  opal_sys_timer_get_cycles (libopen-pal.so.0.0.0: timer.h,43)
            0.140000              0.376547  ompi_cb_fifo_read_from_tail (mca_btl_sm.so: ompi_circular_buffer_fifo.h,318)
            0.130000              0.349650  mca_bml_r2_progress (mca_bml_r2.so: bml_r2.c,98)
            0.120000              0.322754  opal_progress (libopen-pal.so.0.0.0: opal_progress.c,238)
            0.090000              0.242066  ompi_fifo_read_from_tail (mca_btl_sm.so: ompi_fifo.h,408)

     b) Find all the highest time taking statements

openss>>expview -v statements

  Exclusive CPU time         % of CPU Time  Statement Location (Line Number)
         in seconds.                                            
            8.460000             22.754169  nbody-mpi.c(226)    
            5.570000             14.981173  nbody-mpi.c(239)    
            4.690000             12.614309  nbody-mpi.c(237)    
            4.540000             12.210866  nbody-mpi.c(238)    
            2.950000              7.934373  nbody-mpi.c(232)    


    c) See the users guide for more options or use the CLI "help commands" help command.



