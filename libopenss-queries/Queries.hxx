////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2005 Silicon Graphics, Inc. All Rights Reserved.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2.1 of the License, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
// details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library; if not, write to the Free Software Foundation, Inc.,
// 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
////////////////////////////////////////////////////////////////////////////////

/** @file
 *
 * Declaration of the Queries namespace.
 *
 */

#ifndef _OpenSpeedShop_Queries_
#define _OpenSpeedShop_Queries_

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "ToolAPI.hxx"

#include <map>
#include <string>



namespace OpenSpeedShop {

    /**
     * Enclosing namespace for the <em>Open|SpeedShop</em> query library.
     *
     * Namespace containing procedural functions for performing higher-level
     * queries on experiments generated by the <em>Open|SpeedShop</em> framework
     * library. There is nothing "magical" about these functions. They use the
     * same API that is available directly to every tool. The intention is
     * simply to promote re-use by providing some of the more commonly used 
     * queries.
     */
    namespace Queries
    {

	template <typename TS, typename TM>
	void GetMetricInThread(
	    const Framework::Collector&,
	    const std::string&,
	    const Framework::TimeInterval&,
	    const Framework::Thread&,
	    const std::set<TS >&,
	    Framework::SmartPtr<std::map<TS, TM > >&
	    );

	template <typename TS, typename TM>
	void GetMetricOfAllInThread(
	    const Framework::Collector&,
	    const std::string&,
	    const Framework::TimeInterval&,
	    const Framework::Thread&,
	    Framework::SmartPtr<std::map<TS, TM > >&
	    );

	template <typename TM>
	void GetMetricByStatementOfFileInThread(
	    const Framework::Collector&,
	    const std::string&,
	    const Framework::TimeInterval&,
	    const Framework::Thread&,
	    const Framework::Path&,
	    Framework::SmartPtr<std::map<int, TM > >&
	    );

    }

}



#include "GetMetricInThread.txx"
#include "GetMetricOfAllInThread.txx"
#include "GetMetricByStatement.txx"



#endif
