#define vUserTimeDescription "The usertime experiment is useful experiments to start your performance analysis. The usertime experiment returns CPU time for each function while your program runs.\n\nThis experiment uses statistical call stack profiling to measure inclusive and exclusive user time. They take a sample every 30 milliseconds. Data is measured by periodically sampling the callstack. The program's callstack data is used to do the following:\n\n* Attribute exclusive user time to the function at the bottom of each callstack (that is, the function being executed at the time of the sample).\n\n* Attribute inclusive user time to all the functions above the one currently being executed (those involved in the chain of calls that led to the function at the bottom of the callstack executing).\n\nThe time spent in a procedure is determined by multiplying the number of times an instruction for that procedure appears in the stack by the sampling time interval between call stack samples. Call stacks are gathered when the program is running; hence, the time computed represents user time, not time spent when the program is waiting for a CPU. User time shows both the time the program itself is executing and the time the operating system is performing services for the program, such as I/O.\n\nThe usertime experiment should incur a program execution slowdown of no more than 15%. Data from a usertime experiment is statistical in nature and shows some variance from run to run."

#define eUserTimeDescription "Returns CPU time for each function while your program runs."
