#! /bin/bash
# Some of this code is inspired by the libmonitor package (monitor-run).

# The machine dependent abi libdir name has been computed 
# so use the information from one central location. 
machlibdir=@@machine_dependent_libdir@@
alt_machlibdir=@@alt_machine_dependent_libdir@@

monitor_prefix=@@libmonitordir@@
monitor_exec_prefix="${monitor_prefix}"
monitor_libdir="${monitor_prefix}/${machlibdir}"
libmonitor="${monitor_libdir}/libmonitor.so"

oss_prefix=@@ossinstalldir@@
oss_libdir="${oss_prefix}/${machlibdir}"
oss_bindir="${oss_prefix}/bin"
oss_plugins="${oss_libdir}/openspeedshop"

lam_prefix=@@lamdir@@
lampi_prefix=@@lampidir@@
mpich_prefix=@@mpichdir@@
mpich2_prefix=@@mpich2dir@@
mvapich_prefix=@@mvapichdir@@
mvapich2_prefix=@@mvapich2dir@@
mpt_prefix=@@mptdir@@
openmpi_prefix=@@openmpidir@@

if test -f ${mpich2_prefix}/${machlibdir}/libfmpich.so; then
  f_mpich2_libs="${mpich2_prefix}/${machlibdir}/libfmpich.so"
elif test -f ${mpich2_prefix}/${altmachlibdir}/libfmpich.so; then
  f_mpich2_libs="${mpich2_prefix}/${altmachlibdir}/libfmpich.so"
fi

if test -f ${mvapich2_prefix}/${machlibdir}/libfmpich.so; then
  f_mvapich2_libs="${mvapich2_prefix}/${machlibdir}/libfmpich.so"
elif test -f ${mvapich2_prefix}/${altmachlibdir}/libfmpich.so; then
  f_mvapich2_libs="${mvapich2_prefix}/${altmachlibdir}/libfmpich.so"
fi

mpi_plugin=
output_dir=

default_mpi_impl=@@ossdefaultmpi@@

if [ -n "$OPENSS_MPI_IMPLEMENTATION" ]
then
    mpitouse=$OPENSS_MPI_IMPLEMENTATION
else
    mpitouse=`echo ${default_mpi_impl} |tr '[A-Z]' '[a-z]'`
    export OPENSS_MPI_IMPLEMENTATION=$mpitouse
fi


for i in $*
do
    # test if argument is a file
    if test -f "$i"
    then
	# test if the file is elf binary and has the symbol MPI_Init.
	# may not be portable!
	isexecutable=`file $i | grep ELF`
	if [ -n "$isexecutable" ]
	then
	    ismpi=`nm $i | grep -i MPI_Init`
	fi

	if [ -n "$ismpi" ]
	then
            mpi_plugin="${oss_plugins}/mpi-${mpitouse}-rt-offline.so"
	    break
	fi
    fi 
done

die()
{
    echo "$0: error: $*" 1>&2
    exit 1
}

usage()
{
    cat <<EOF
Usage: $0 [options] command arg collector...

If command uses arguments then command and arg
must be quoted. example:
$0 "mpirun -np 2 foo" collector

   -h, --help

   -o, -output  <directory>
Where directory is the location to write the
raw performance data files. The utility tool
${oss_bindir}/ossutil is then run with the
named directory as an argument to create a .openss
database that can be view with openss. On large
cluster systems this should be set to fast file
system capable of storing large datasets. 
NOTE: this option will override any setting for
the environment variable OPENSS_RAWDATA_DIR.

EOF
    exit 0
}

while test "x$1" != x
do
    case "$1" in

        -h | --help )
            usage
            ;;

	-o | --output)
            test "x$2" != x || die "missing argument: $*"
            case "$2" in
                /* )  dir="$2" ;;
		* )   dir="`pwd`/$2" ;;
            esac
	    test -d "$dir" || die "unable to find: $dir"
	    export OPENSS_RAWDATA_DIR="${dir}"
            shift ; shift
            ;;

        -- )
            shift
            break
            ;;

        -* )
            die "unknown option: $1"
            ;;

        * )
            break
            ;;
    esac
done

if [ "x${OPENSS_RAWDATA_DIR}" == "x" ]
then
   test -d "/tmp/${USER}/offline-oss" || mkdir -p "/tmp/${USER}/offline-oss"
   export OPENSS_RAWDATA_DIR="/tmp/${USER}/offline-oss"
else
   test -d ${OPENSS_RAWDATA_DIR} || mkdir -p ${OPENSS_RAWDATA_DIR}
fi

extra_mpi_libs=""


case "$mpitouse" in
    mpich2)
      extra_mpi_libs=${f_mpich2_libs}
    ;;

    mvapich2)
      extra_mpi_libs=${f_mvapich2_libs}
esac

# 
collector=$2
case "$collector" in
    # The mpi tracing plugins already collect mpi rank information so
    # we do not add the preload_file...
    mpi|mpit|mpiotf )
    mpicollector=${collector}-${mpitouse}
    export LD_PRELOAD=${oss_plugins}/$mpicollector-rt-offline.so:${extra_mpi_libs}:${libmonitor}
    ;;

    mpi-*|mpit-*|mpiotf-*)
    mpicollector=${collector}
    export LD_PRELOAD=${oss_plugins}/$mpicollector-rt-offline.so:${extra_mpi_libs}:${libmonitor}
    ;;


    # The non mpi tracing experiments need to trace MPI_Init to
    # gather the mpi rank information needed for the mpi_rank field
    # in the THREADS table of the openss database.
    * )
    export LD_PRELOAD=${oss_plugins}/$collector-rt-offline.so:${libmonitor}
    ;;
esac
exec $1
