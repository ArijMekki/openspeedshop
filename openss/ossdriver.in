#!/bin/bash
################################################################################
# Display Usage When Necessary
################################################################################
debug_flag=0

# Initialize to indicate no "high" parameter was seen
# If this is set we will up the sampling rate or threshold depending on the experiment
high_flag=0

# Initialize to indicate no "low" parameter was seen
# If this is set we will lower the sampling rate or threshold depending on the experiment
low_flag=0

# Initialize to indicate no "default" parameter was seen
# If this is set we will use the default sampling rate or default threshold depending on the experiment
use_default_flag=0

# Initialize to indicate no "input argument rate value" parameter was seen
# If this is set we will use the "input argument rate value" parameter instead of the experiment default value
input_argument_rate_threshold_value=0

# Initialize to indicate no "input argument event value" parameter was seen
# If this is set we will use the "input argument event value" parameter instead of the experiment default event value
input_argument_event_or_trace_list_value=0

# Initialize to indicate no "input compare database list value" parameter was seen
# If this is set we will use the "input argument event value" parameter as the list of database files to compare
input_compare_database_list=0

# Initialize to indicate no "input argument compare metric" parameter was seen
# If this is set we will use the "input argument compare metric" parameter instead of the experiment default compare metric value
input_argument_compare_metric=0

#
# DEFAULT VALUES - MUST MATCH THE DEFAULTS INSIDE THE OpenSpeedShop/plugins/collectors/<experiment_type> source
#
# Corresponds to OPENSS_PCSAMP_RATE
pcsamp_default_rate=100

# Corresponds to OPENSS_USERTIME_RATE
usertime_default_rate=35

# Corresponds to OPENSS_HWC_EVENT
hwc_default_event="PAPI_TOT_CYC"

# Corresponds to OPENSS_HWC_THRESHOLD
hwc_default_threshold=10000

# Corresponds to OPENSS_HWCSAMP_EVENTS
hwcsamp_default_events="PAPI_TOT_CYC,PAPI_FP_OPS"

# Corresponds to OPENSS_HWCSAMP_RATE
hwcsamp_default_rate=100

# Corresponds to OPENSS_HWCTIME_EVENT
hwctime_default_event="PAPI_TOT_CYC"

# Corresponds to OPENSS_HWCTIME_THRESHOLD
hwctime_default_threshold=10000

# Corresponds to OPENSS_IO_TRACED
io_default_traceable_functions="close,creat,creat64,dup,dup2,lseek,lseek64,open,open64,pipe,pread,pread64,pwrite,pwrite64,read,readv,write,writev"

# Corresponds to OPENSS_IOT_TRACED
iot_default_traceable_functions="close,creat,creat64,dup,dup2,lseek,lseek64,open,open64,pipe,pread,pread64,pwrite,pwrite64,read,readv,write,writev"

# Corresponds to OPENSS_MPI_TRACED
mpi_default_traceable_functions="MPI_Allgather,MPI_Allgatherv,MPI_Allreduce,MPI_Alltoall, MPI_Alltoallv,MPI_Barrier,MPI_Bcast,MPI_Bsend,MPI_Bsend_init, MPI_Cancel,MPI_Cart_create,MPI_Cart_sub,MPI_Comm_create, MPI_Comm_dup,MPI_Comm_free,MPI_Comm_split,MPI_Finalize, MPI_Gather,MPI_Gatherv,MPI_Get_count,MPI_Graph_create, MPI_Ibsend,MPI_Init,MPI_Intercomm_create,MPI_Intercomm_merge, MPI_Iprobe,MPI_Irecv,MPI_Irsend,MPI_Isend,MPI_Issend, MPI_Pack,MPI_Probe,MPI_Recv,MPI_Recv_init,MPI_Reduce, MPI_Reduce_scatter,MPI_Request_free,MPI_Rsend,MPI_Rsend_init, MPI_Scan,MPI_Scatter,MPI_Scatterv,MPI_Send,MPI_Sendrecv, MPI_Sendrecv_replace,MPI_Ssend,MPI_Ssend_init,MPI_Start, MPI_Startall,MPI_Test,MPI_Testall,MPI_Testany,MPI_Testsome, MPI_Unpack,MPI_Wait,MPI_Waitall,MPI_Waitany,MPI_Waitsome"

# Corresponds to OPENSS_MPIT_TRACED
mpit_default_traceable_functions="MPI_Allgather,MPI_Allgatherv,MPI_Allreduce,MPI_Alltoall, MPI_Alltoallv,MPI_Barrier,MPI_Bcast,MPI_Bsend,MPI_Bsend_init, MPI_Cancel,MPI_Cart_create,MPI_Cart_sub,MPI_Comm_create, MPI_Comm_dup,MPI_Comm_free,MPI_Comm_split,MPI_Finalize, MPI_Gather,MPI_Gatherv,MPI_Get_count,MPI_Graph_create, MPI_Ibsend,MPI_Init,MPI_Intercomm_create,MPI_Intercomm_merge, MPI_Iprobe,MPI_Irecv,MPI_Irsend,MPI_Isend,MPI_Issend, MPI_Pack,MPI_Probe,MPI_Recv,MPI_Recv_init,MPI_Reduce, MPI_Reduce_scatter,MPI_Request_free,MPI_Rsend,MPI_Rsend_init, MPI_Scan,MPI_Scatter,MPI_Scatterv,MPI_Send,MPI_Sendrecv, MPI_Sendrecv_replace,MPI_Ssend,MPI_Ssend_init,MPI_Start, MPI_Startall,MPI_Test,MPI_Testall,MPI_Testany,MPI_Testsome, MPI_Unpack,MPI_Wait,MPI_Waitall,MPI_Waitany,MPI_Waitsome"

# Corresponds to OPENSS_MPIOTF_TRACED
mpiotf_default_traceable_functions="MPI_Allgather,MPI_Allgatherv,MPI_Allreduce,MPI_Alltoall, MPI_Alltoallv,MPI_Barrier,MPI_Bcast,MPI_Bsend,MPI_Bsend_init, MPI_Cancel,MPI_Cart_create,MPI_Cart_sub,MPI_Comm_create, MPI_Comm_dup,MPI_Comm_free,MPI_Comm_split,MPI_Finalize, MPI_Gather,MPI_Gatherv,MPI_Get_count,MPI_Graph_create, MPI_Ibsend,MPI_Init,MPI_Intercomm_create,MPI_Intercomm_merge, MPI_Iprobe,MPI_Irecv,MPI_Irsend,MPI_Isend,MPI_Issend, MPI_Pack,MPI_Probe,MPI_Recv,MPI_Recv_init,MPI_Reduce, MPI_Reduce_scatter,MPI_Request_free,MPI_Rsend,MPI_Rsend_init, MPI_Scan,MPI_Scatter,MPI_Scatterv,MPI_Send,MPI_Sendrecv, MPI_Sendrecv_replace,MPI_Ssend,MPI_Ssend_init,MPI_Start, MPI_Startall,MPI_Test,MPI_Testall,MPI_Testany,MPI_Testsome, MPI_Unpack,MPI_Wait,MPI_Waitall,MPI_Waitany,MPI_Waitsome"

# Corresponds to OPENSS_FPE_EVENT
fpe_default_events="inexact_result,division_by_zero,underflow,overflow,invalid_operation"

# Corresponds to OPENSS_COMPARE_METRIC
# Options vary by experiment: percent is another alternative to time
compare_default_metric="time"

#
# END DEFAULT VALUES
#

use_compare_metric=$compare_default_metric

# A function to split the comma separated list values into
# an array, so that they may be processed individually by the
# osscompare command.
# Portions of the db_file_input_split code is credited to:
# Copyright 2004, Chris F.A. Johnson
# and may be copied under the terms of the 
# GNU General Public License
#
db_file_input_split() { ## USAGE: db_file_input_split CSV_RECORD

 local record=${1%"${CR}"}
 local right
 local vnum=0
 unset values
 while [ -n "$record" ] 
 do

 case $record in
 \"*) right=${record#*\",}
    value=${record%%\",*}
    values[$vnum]=${value#\"}
    ;;
 *) values[$vnum]=${record%%,*}
    right=${record#*,}
    ;;
 esac

# echo "record=$record"
# echo "value=${value#\"}"

 case $record in
    *,*) record=${right} ;;
    *) record=${record#\"}
       values[$vnum]=${record%\"}
       break;;
 esac

#echo "values=${values[$vnum]}"
 vnum=$(( $vnum + 1 ))
 echo $vnum > /tmp/$USER/osscompare_vnum_val

 done
}

if [ $debug_flag == 1 ]
then
  echo
  echo "DEBUG: ossdriver command-line argument #0 = $0"
  echo "DEBUG: ossdriver command-line argument #1 = $1"
  echo "DEBUG: ossdriver command-line argument #2 = $2"
  echo "DEBUG: ossdriver command-line argument #3 = $3"
  echo "DEBUG: ossdriver command-line argument #4 = $4"
  echo
fi

might_have_error=0
if  [ -z "$4" ]
then
  if [ $debug_flag == 1 ]
  then
     echo "DEBUG: GOOD, no 4th argument, ossdriver command-line argument #4 = $4"
  fi
else
  echo "[openss]: Too many arguments specified.  Possible issue: Was your executable enclosed in quotes?"
  might_have_error=1
fi

calling_script_name=$0
experiment_name=${calling_script_name##*/}

if [[ -z "$1" || $might_have_error == 1 ]] 
then
   echo ""
   if [[ "$experiment_name" == "osscompare" ]]; then
     echo "Usage: $0 \"database_file_list\" [extra_args]"
     echo "    where \"database_file_list\" is defined as a comma separated list of "
     echo "                                 Open|SpeedShop database files from a previous"
     echo "                                 run of Open|SpeedShop on an application the " 
     echo "                                 \"database file\" list must be comma separated."
     echo "    where the optional \"extra_args\" is defined as follows:"
     echo "            \"time\"     - Compare based on the exclusive time metric."
     echo "            \"percent\"  - Compare based on the percent metric."
     echo ""
     echo "Example: osscompare nbody-usertime.openss,nbody-usertime-1.openss percent"
     echo "         This example compares the two specified databases using the metric:"
     echo "         percent of exclusive time"
     echo ""
   else
     echo "Usage: $0 \"executable\" [extra_args]"
     echo "Usage: $0 help or --help"
     echo ""
     echo "    where \"executable\" is defined as the command that you normally "
     echo "        use to execute your program: but in quotes"
     echo "    For example: $0 \"mpirun -N 16 -n 256 ./smg2000 -n 50 50 50\" [extra_args]"
     echo "        where the optional \"extra_args\" is defined as follows:"
     echo "            \"high\"     - Increase the default sampling rate or threshold "
     echo "                           value to increase the number of samples taken."
     echo "            \"low\"      - Decrease the default sampling rate or threshold "
     echo "                           value to decrease the number of samples taken."
     echo "            \"default\"  - Use the default sampling rate or threshold value. "
     echo "                           This will override any environment variable settings."
   fi
   if [[ "$experiment_name" == "osspcsamp" || "$experiment_name" == "ossusertime" ]]; then
     echo "            \"rate value\"  - Use this sampling rate"
     echo "                              instead of the default or any environment variable settings."
     echo "                                 For example: 80"
     echo "                                     for a sampling rate of 80 samples per second."
   elif [[ "$experiment_name" == "osshwc" || "$experiment_name" == "osshwctime" ]]; then
     echo "            \"papi_event\"  - Specify the papi event."
     echo "                                 For example: PAPI_FP_OPS"
     echo "                                     for Floating point operations."
     echo "                                 Or:          PAPI_L1_DCM"
     echo "                                     for Level 1 data cache misses."
     echo "            \"threshold value\" - Use this threshold value for the specified papi_event "
     echo "                                  instead of the default or any environment variable settings."
     whichpapi_avail=`which papi_avail`
     if test -f $whichpapi_avail
      then
        echo " Available Hardware counter events are:"
        $whichpapi_avail | grep "Yes   No"
     fi
   elif [ "$experiment_name" == "osshwcsamp" ]; then
     echo "            \"papi_event(s)\"  - Specify the papi event or set of events up to six (6) events depending on number available on your platform."
     echo "                                 For example: PAPI_FP_OPS"
     echo "                                     for Floating point operations."
     echo "                                 And/Or:          PAPI_L1_DCM"
     echo "                                     for Level 1 data cache misses."
     echo "            \"sampling rate value\"  - Use this sampling rate"
     echo "                              instead of the default or any environment variable settings."
     echo "                                 For example: 80"
     echo "                                     for a sampling rate of 80 samples per second."
     whichpapi_avail=`which papi_avail`
     if test -f $whichpapi_avail
      then
        echo " Available Hardware counter events are:"
        $whichpapi_avail | grep "Yes"
     fi
   elif [[ "$experiment_name" == "ossio" || "$experiment_name" == "ossiot" ]]; then
     echo "            \"I/O functions to trace\"  - Specify the list of I/O functions to be traced when running the io or iot experiments."
     echo "                                             For example: read,write,dup"
   elif [[ "$experiment_name" == "ossmpi" || "$experiment_name" == "ossmpit" || "$experiment_name" == "ossmpiotf" ]]; then
     echo "            \"MPI functions to trace\"  - Specify the list of MPI functions to be traced when running the mpi, mpit or mpiotf experiments."
     echo "                                             For example: MPI_Send,MPI_Isend,MPI_Finalize"
   fi
   echo ""
   exit
elif [[ "$1" == "help" ||  "$1" == "--help" ]] 
then
   echo ""
   if [[ "$experiment_name" == "osscompare" ]]; then
     echo "Usage: $0 \"database_file_list\" [extra_args]"
     echo "    where \"database_file_list\" is defined as a comma separated list of "
     echo "                                 Open|SpeedShop database files from a previous"
     echo "                                 run of Open|SpeedShop on an application the " 
     echo "                                 \"database file\" list must be comma separated."
     echo "    where the optional \"extra_args\" is defined as follows:"
     echo "            \"time\"     - Compare based on the exclusive time metric."
     echo "            \"percent\"  - Compare based on the percent metric."
     echo ""
     echo "Example: osscompare nbody-usertime.openss,nbody-usertime-1.openss percent"
     echo "         This example compares the two specified databases using the metric:"
     echo "         percent of exclusive time"
     echo ""
   else
     echo "Usage: $0 \"executable\" [extra_args]"
     echo "Usage: $0 help"
     echo "    where \"executable\" is defined as the command that you normally use to "
     echo "    execute your program: but in quotes"
     echo ""
     echo "For example: $0 \"mpirun -N 16 -n 256 ./smg2000 -n 50 50 50\" [extra_args]"
     echo "    where the optional \"extra_args\" is defined as follows:"
     echo "            \"high\"     - Increase the default sampling rate or "
     echo "                           threshold value to increase the number of samples taken."
     echo "            \"low\"      - Decrease the default sampling rate or threshold value to "
     echo "                           decrease the number of samples taken."
     echo "            \"default\"  - Use the default sampling rate or threshold value. This "
     echo "                           will override any environment variable settings."
     echo "            \"rate value\"  - Use this sampling rate or threshold value instead of "
     echo "                              the default or any environment variable settings."
     echo ""
   fi
   exit
fi

if [[ "$experiment_name" == "osscompare" ]]; then

  if [ -d /tmp/$USER ]
  then
     if [ $debug_flag == 1 ]
     then
       echo "DEBUG: /tmp/$USER exists." 
     fi
  else
     mkdir /tmp/$USER
     if [ $debug_flag == 1 ]
     then
       echo "DEBUG: CREATED /tmp/$USER." 
     fi
  fi

  if [ $debug_flag == 1 ]
  then
    echo "Input compare database list: $1" 
    echo "Input compare database list after whitespace removal: $1" | tr -d ' '
  fi
  echo "$1" | tr -d ' ' > /tmp/$USER/osscompare_nospaces.txt 
  while read -r line
  do
    input_compare_database_list=$line
  done < /tmp/$USER/osscompare_nospaces.txt

#  input_compare_database_list=$1
  if [ $debug_flag == 1 ]
  then
     echo "DEBUG: in COMPARE EXPERIMENT INPUT SECTION, SETTING input_compare_database_list=$input_compare_database_list"
     echo "DEBUG: in COMPARE EXPERIMENT INPUT SECTION, SETTING compare_default_metric=$compare_default_metric"
     echo ""
  fi
fi

if [ -z "$2" ] 
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: ossdriver command-line argument #2 was not specified"
  fi
else
#
# There is an argument 2
#
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: ossdriver command-line argument #2 = $2"
  fi
  if  [ "$2" == "high" ]
  then
     high_flag=1
  elif  [ "$2" == "low" ]
  then
     low_flag=1
  elif  [ "$2" == "default" ]
  then
     use_default_flag=1
  else
     match=0
     if [[ "$experiment_name" == "osshwc" || "$experiment_name" == "osshwcsamp" || "$experiment_name" == "osshwctime" ]]; then
       # check for PAPI_ in name 
       match=`expr match "$2" 'PAPI_'`
       if [ $match == 0 ]
       then
         case "$2" in
           *[!0-9]*|"") 
               if [ $debug_flag == 1 ]
               then
                  echo "DEBUG: NOT numbers only dollar 2 = $2  "
               fi
               match=1;
               ;;
           *) 
               if [ $debug_flag == 1 ]
               then
                  echo "DEBUG: numbers only dollar 2 = $2  "
               fi
               match=0;
               ;;
         esac
       fi

       if [ $match == 0 ]
       then

          if [ $debug_flag == 1 ]
          then
            echo "DEBUG: $2 does NOT contain PAPI_ substring"
          fi

          # Do we assume it is the threshold, yes for now
          input_argument_rate_threshold_value=$2

       else 
          if [ $debug_flag == 1 ]
          then
            echo "DEBUG: $2 contains PAPI_ substring, setting input_argument_event_or_trace_list_value=$2"
          fi
          input_argument_event_or_trace_list_value=$2
       fi
     else
        if [[ "$experiment_name" == "osscompare" ]]; then
           input_argument_compare_metric=$2
           if [ $debug_flag == 1 ]
           then
             echo "DEBUG: SETTING input_argument_compare_metric to $2"
           fi
        elif [[ "$experiment_name" == "ossio" || "$experiment_name" == "ossiot" ]]; then
           input_argument_event_or_trace_list_value=$2
        elif [[ "$experiment_name" == "ossmpi" || "$experiment_name" == "ossmpit" || "$experiment_name" == "ossmpiotf" ]]; then
           input_argument_event_or_trace_list_value=$2
        else
           input_argument_rate_threshold_value=$2
        fi
     fi
  fi

fi

# Look for argument 3

if [ -z "$3" ] 
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: ossdriver command-line argument #3 was not specified"
  fi
else
#
# There is an argument 3
#
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: ossdriver command-line argument #3 = $3"
  fi
  if  [ "$3" == "high" ]
  then
     high_flag=1
  elif  [ "$3" == "low" ]
  then
     low_flag=1
  elif  [ "$3" == "default" ]
  then
     use_default_flag=1
  else
     match=0
     if [[ "$experiment_name" == "osshwc" || "$experiment_name" == "osshwcsamp" || "$experiment_name" == "osshwctime" ]]; then
        # We have seen the PAPI_event, so the next argument must be the threshold value
        if [ $input_argument_event_or_trace_list_value != 0 ]
        then
          input_argument_rate_threshold_value=$3
        else
          match=`expr match "$3" 'PAPI_'`
          if [ $match == 0 ]
          then
             case "$3" in
               *[!0-9]*|"") 
                  if [ $debug_flag == 1 ]
                  then
                     echo "DEBUG: NOT numbers only dollar 3 = $3  "
                  fi
                  match=1;
                  ;;
               *) 
                  if [ $debug_flag == 1 ]
                  then
                     echo "DEBUG: umbers only dollar 3 = $3  "
                  fi
                  match=0;
                  ;;
             esac
          fi
          if [ $match == 0 ]
          then
            if [ use_default_flag == 0 ]
            then 
              if [[ "$experiment_name" == "osshwc" || "$experiment_name" == "osshwctime" ]]; then
                 echo "[openss]: FATAL: Expected PAPI_<event_name> in this argument position.  $0 inferred that argument 2 was the papi threshold.  With that, argument 3 needs to be the papi event name.  For example: PAPI_TOT_CYC, etc."
                 exit
              elif [[ "$experiment_name" == "osshwcsamp" ]]; then
                 echo "[openss]: FATAL: Expected PAPI_<event_name_list> in this argument position.  $0 inferred that argument 2 was the experiment sampling rate.  With that, argument 3 needs to be the papi event name or event name list .  For example: PAPI_TOT_CYC,PAPI_L1_DCM,PAPI_L1_DCA etc."
                 exit
              fi

            else
              echo "[openss]: WARNING: $0 expects no arguments after the \"default\" argument.   Argument 3 =\"$3\" is ignored."
            fi
          else
            input_argument_event_or_trace_list_value=$3
          fi
        fi

     fi
  fi

fi

################################################################################
# Run Open|SpeedShop
################################################################################
if [ $debug_flag == 1 ]
then
  echo "DEBUG: experiment_name=$experiment_name"
  echo "DEBUG: high_flag=$high_flag"
  echo "DEBUG: low_flag=$low_flag"
  echo "DEBUG: use_default_flag=$use_default_flag"
  echo "DEBUG: input_argument_rate_threshold_value=$input_argument_rate_threshold_value"
  echo "DEBUG: input_argument_event_or_trace_list_value=$input_argument_event_or_trace_list_value"
  echo "DEBUG: input_argument_rate_threshold_value=$input_argument_rate_threshold_value"
fi

# ------------------------------------------------------------------------------------
# -- PCSAMP EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
if [ $experiment_name == "osspcsamp" ]
then

  if [ $debug_flag == 1 ]
  then 
    if [ -z "$OPENSS_PCSAMP_RATE" ] 
    then 
      echo "DEBUG: in PCSAMP EXPERIMENT SECTION, NOT SET, OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE"
    else
      echo "DEBUG: in PCSAMP EXPERIMENT SECTION, IS SET, OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE"
    fi
  fi

  if [ $low_flag == 1 ]
  then
     rate=$pcsamp_default_rate
     let rate=rate/2
     if [ -z "$OPENSS_PCSAMP_RATE" ] 
     then
       echo "[openss]: pcsamp experiment using sampling rate: \"$rate\" because the \"low\" parameter is specified."
     else
       echo "[openss]: pcsamp experiment OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE is set and will be altered to \"$rate\" because the \"low\" parameter is specified."
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: pcsamp, rate=$rate"
     fi
     OPENSS_PCSAMP_RATE=$rate
     export OPENSS_PCSAMP_RATE
     if [ $debug_flag == 1 ]
     then 
        echo "DEBUG: in PCSAMP EXPERIMENT SECTION, RESET low, OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE"
     fi
  elif [ $high_flag == 1 ]
  then
     rate=$pcsamp_default_rate
     let rate=rate*4
     if [ -z "$OPENSS_PCSAMP_RATE" ] 
     then
       echo "[openss]: pcsamp experiment using sampling rate: \"$rate\" because the \"high\" parameter is specified."
     else
       echo "[openss]: pcsamp experiment OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE is set and will be altered to \"$rate\" because the \"high\" parameter is specified."
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: pcsamp, rate=$rate"
     fi
     OPENSS_PCSAMP_RATE=$rate
     export OPENSS_PCSAMP_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in PCSAMP EXPERIMENT SECTION, RESET high, OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE"
     fi
  elif [ $use_default_flag == 1 ]
  then
     if [ -z "$OPENSS_PCSAMP_RATE" ] 
     then
       echo "[openss]: pcsamp experiment using sampling rate: \"$rate\" because the \"default\" parameter is specified."
     else
       if [ $pcsamp_default_rate != $OPENSS_PCSAMP_RATE ]
       then
         echo "[openss]: pcsamp experiment OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE is set and will be altered to \"$pcsamp_default_rate\" because the \"default\" parameter is specified."
       fi
     fi
     rate=$pcsamp_default_rate
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: pcsamp, default, rate=$rate"
     fi
     OPENSS_PCSAMP_RATE=$rate
     export OPENSS_PCSAMP_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in PCSAMP EXPERIMENT SECTION, RESET default, OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE"
     fi
  elif [ $input_argument_rate_threshold_value != 0 ]
  then
     if [ -z "$OPENSS_PCSAMP_RATE" ] 
     then
       echo "[openss]: pcsamp experiment using sampling rate: \"$input_argument_rate_threshold_value\" because \"rate value\" parameter is specified."
     else
       if [ $input_argument_rate_threshold_value != $OPENSS_PCSAMP_RATE ]
       then
         echo "[openss]: pcsamp experiment OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE is set and will be altered to \"$input_argument_rate_threshold_value\" because the \"rate value\" parameter is specified."
       fi
     fi
     rate=$input_argument_rate_threshold_value
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: pcsamp, input argument rate threshold value, rate=$rate"
     fi
     OPENSS_PCSAMP_RATE=$rate
     export OPENSS_PCSAMP_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in PCSAMP EXPERIMENT SECTION, RESET input_argument_rate_threshold_value, OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE"
     fi
     
  else
     if [ -z "$OPENSS_PCSAMP_RATE" ] 
     then
       echo "[openss]: pcsamp experiment using the pcsamp experiment default sampling rate: \"$pcsamp_default_rate\"."
     else
       echo "[openss]: pcsamp experiment OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE is set and will be used as the sampling rate."
     fi
  fi 

  openss -offline -f "$1" pcsamp

# ------------------------------------------------------------------------------------
# -- USERTIME EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "ossusertime" ]
then

  if [ $debug_flag == 1 ]
  then
    if [ -z "$OPENSS_USERTIME_RATE" ] 
    then
      echo "DEBUG: in USERTIME EXPERIMENT SECTION, NOT SET, OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE"
    else
      echo "DEBUG: in USERTIME EXPERIMENT SECTION, IS SET, OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE"
    fi
  fi

  if [ $low_flag == 1 ]
  then
     rate=$usertime_default_rate
     let rate=rate/2
     if [ -z "$OPENSS_USERTIME_RATE" ] 
     then
       echo "[openss]: usertime experiment using sampling rate: \"$rate\" because the \"low\" parameter is specified."
     else
       echo "[openss]: usertime experiment OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE is set and will be altered to \"$rate\" because the \"low\" parameter is specified."
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: rate=$rate"
     fi
     OPENSS_USERTIME_RATE=$rate
     export OPENSS_USERTIME_RATE
     if [ $debug_flag == 1 ]
     then 
        echo "DEBUG: in USERTIME EXPERIMENT SECTION, RESET low, OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE"
     fi
  elif [ $high_flag == 1 ]
  then
     rate=$usertime_default_rate
#     rate=$OPENSS_USERTIME_RATE
     let rate=rate*4
     if [ -z "$OPENSS_USERTIME_RATE" ] 
     then
       echo "[openss]: usertime experiment using sampling rate: \"$rate\" because the \"high\" parameter is specified."
     else
       echo "[openss]: usertime experiment OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE is set and will be altered to \"$rate\" because the \"high\" parameter is specified."
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: rate=$rate"
     fi
     OPENSS_USERTIME_RATE=$rate
     export OPENSS_USERTIME_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in USERTIME EXPERIMENT SECTION, RESET high, OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE"
     fi
  elif [ $use_default_flag == 1 ]
  then
     if [ -z "$OPENSS_USERTIME_RATE" ] 
     then

       echo "[openss]: usertime experiment using sampling rate: \"$rate\" because the \"default\" parameter is specified."

     else

       if [ $usertime_default_rate != $OPENSS_USERTIME_RATE ]
       then
         echo "[openss]: usertime experiment OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE is set and will be altered to \"$usertime_default_rate\" because the \"default\" parameter is specified."
       fi
     fi

     rate=$usertime_default_rate
     echo "DEBUG: rate=$rate"
     OPENSS_USERTIME_RATE=$rate
     export OPENSS_USERTIME_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in USERTIME EXPERIMENT SECTION, RESET default, OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE"
     fi
  elif [ $input_argument_rate_threshold_value != 0 ]
  then
     if [ -z "$OPENSS_USERTIME_RATE" ] 
     then
       echo "[openss]: usertime experiment using sampling rate: \"$input_argument_rate_threshold_value\" because \"rate value\" parameter is specified."
     else
       if [ $input_argument_rate_threshold_value != $OPENSS_USERTIME_RATE ]
       then
         echo "[openss]: usertime experiment OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE is set and will be altered to \"$input_argument_rate_threshold_value\" because the \"rate value\" parameter is specified."
       fi
     fi
     rate=$input_argument_rate_threshold_value
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: rate=$rate"
     fi
     OPENSS_USERTIME_RATE=$rate
     export OPENSS_USERTIME_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in USERTIME EXPERIMENT SECTION, RESET input_argument_rate_threshold_value, OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE"
     fi
  else
     if [ -z "$OPENSS_USERTIME_RATE" ] 
     then
       echo "[openss]: usertime experiment using the usertime experiment default sampling rate: \"$usertime_default_rate\"."
     else
       echo "[openss]: usertime experiment OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE is set and will be used as the sampling rate."
     fi
  fi 

  openss -offline -f "$1" usertime

# ------------------------------------------------------------------------------------
# -- HWC EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "osshwc" ]
then

  if [ $debug_flag == 1 ]
  then

    if [ -z "$OPENSS_HWC_EVENT" ] 
    then
      echo "DEBUG: in HWC EXPERIMENT SECTION, NOT SET, OPENSS_HWC_EVENT=$OPENSS_HWC_EVENT"
    else
      echo "DEBUG: in HWC EXPERIMENT SECTION, IS SET, OPENSS_HWC_EVENT=$OPENSS_HWC_EVENT"
    fi

    if [ -z "$OPENSS_HWC_THRESHOLD" ] 
    then
      echo "DEBUG: in HWC EXPERIMENT SECTION, NOT SET, OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD"
    else
      echo "DEBUG: in HWC EXPERIMENT SECTION, IS SET, OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD"
    fi

  fi

  if [ $low_flag == 1 ]
  then
     threshold=$hwc_default_threshold
     let threshold=threshold/2
     if [ -z "$OPENSS_HWC_THRESHOLD" ] 
     then
       if [ -z "$OPENSS_HWC_EVENT" ] 
       then
         echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
         echo "[openss]: hwc experiment using sampling threshold: \"$threshold\" because the \"low\" parameter is specified."
       else
         echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
         echo "[openss]: hwc experiment using sampling threshold: \"$threshold\" because the \"low\" parameter is specified."
       fi
     else
       if [ -z "$OPENSS_HWC_EVENT" ] 
       then
         echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
         echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be altered to \"$threshold\" because the \"low\" parameter is specified."
       else
         echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
         echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be altered to \"$threshold\" because the \"low\" parameter is specified."
       fi
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: threshold=$threshold"
     fi
     OPENSS_HWC_THRESHOLD=$threshold
     export OPENSS_HWC_THRESHOLD
     if [ $debug_flag == 1 ]
     then 
        echo "DEBUG: in HWC EXPERIMENT SECTION, RESET low, OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD"
     fi
  elif [ $high_flag == 1 ]
  then
     threshold=$hwc_default_threshold
#     threshold=$OPENSS_HWC_THRESHOLD
     let threshold=threshold*4
     if [ -z "$OPENSS_HWC_THRESHOLD" ] 
     then
       if [ -z "$OPENSS_HWC_EVENT" ] 
       then
         echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
         echo "[openss]: hwc experiment using sampling threshold: \"$threshold\" because the \"high\" parameter is specified."
       else
         echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
         echo "[openss]: hwc experiment using sampling threshold: \"$threshold\" because the \"high\" parameter is specified."
       fi
     else
       if [ -z "$OPENSS_HWC_EVENT" ] 
       then
         echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
         echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be altered to \"$threshold\" because the \"high\" parameter is specified."
       else
         echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
         echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be altered to \"$threshold\" because the \"high\" parameter is specified."
       fi
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: hwc, high parameter section, threshold=$threshold"
     fi
     OPENSS_HWC_THRESHOLD=$threshold
     export OPENSS_HWC_THRESHOLD
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in HWC EXPERIMENT SECTION, RESET high, OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD"
     fi
  elif [ $use_default_flag == 1 ]
  then
     if [ -z "$OPENSS_HWC_THRESHOLD" ] 
     then
       if [ -z "$OPENSS_HWC_EVENT" ] 
       then
         echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\" because the \"default\" parameter is specified."
         echo "[openss]: hwc experiment using default sampling threshold: \"$hwc_default_threshold\" because the \"default\" parameter is specified."
       else
         echo "[openss]: hwc experiment using default papi event overriding the OPENSS_HWC_EVENT environment variable=\"$OPENSS_HWC_EVENT\" setting because the \"default\" parameter is specified."
         echo "[openss]: hwc experiment using default sampling threshold: \"$hwc_default_threshold\" because the \"default\" parameter is specified."
       fi
     else
       if [ $hwc_default_threshold != $OPENSS_HWC_THRESHOLD ]
       then
         if [ -z "$OPENSS_HWC_EVENT" ] 
         then
           echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\" because the \"default\" parameter is specified."
           echo "[openss]: hwc experiment using default sampling threshold: \"$hwc_default_threshold\" overriding the OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD environment variable because the \"default\" parameter is specified."
         else
           echo "[openss]: hwc experiment using default papi event overriding the OPENSS_HWC_EVENT environment variable=\"$OPENSS_HWC_EVENT\" setting because the \"default\" parameter is specified."
           echo "[openss]: hwc experiment using default sampling threshold: \"$hwc_default_threshold\" overriding the OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD environment variable because the \"default\" parameter is specified."
         fi
       fi
     fi

     threshold=$hwc_default_threshold
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: hwc, default case, threshold=$threshold"
     fi
     OPENSS_HWC_THRESHOLD=$threshold
     export OPENSS_HWC_THRESHOLD
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in HWC EXPERIMENT SECTION, RESET default, OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD"
     fi
  elif [ $input_argument_rate_threshold_value != 0 ]
  then
     if [ -z "$OPENSS_HWC_THRESHOLD" ] 
     then
       if [ -z "$OPENSS_HWC_EVENT" ] 
       then
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
         else
           echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
         fi
         echo "[openss]: hwc experiment using sampling threshold: \"$input_argument_rate_threshold_value\" because \"rate value\" parameter is specified."
       else
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
         else
           echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
         fi
         echo "[openss]: hwc experiment using sampling threshold: \"$input_argument_rate_threshold_value\" because \"rate value\" parameter is specified."
       fi
     else
       if [ $input_argument_rate_threshold_value != $OPENSS_HWC_THRESHOLD ]
       then
         if [ -z "$OPENSS_HWC_EVENT" ] 
         then
           if [ $input_argument_event_or_trace_list_value != 0 ]
           then
             echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           else
             echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
           fi
           echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be altered to \"$input_argument_rate_threshold_value\" because the \"rate value\" parameter is specified."
         else
           if [ $input_argument_event_or_trace_list_value != 0 ]
           then
             echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           else
             echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
           fi
           echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be altered to \"$input_argument_rate_threshold_value\" because the \"rate value\" parameter is specified."
         fi
       fi
     fi
     threshold=$input_argument_rate_threshold_value
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: threshold=$threshold"
     fi
     OPENSS_HWC_THRESHOLD=$threshold
     export OPENSS_HWC_THRESHOLD
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in HWC EXPERIMENT SECTION, RESET input_argument_rate_threshold_value, OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD"
     fi
  else
     # An input Threshold was not specified
     if [ -z "$OPENSS_HWC_THRESHOLD" ] 
     then
       if [ -z "$OPENSS_HWC_EVENT" ] 
       then
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then 
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           echo "[openss]: hwc experiment using the hwc experiment default sampling threshold: \"$hwc_default_threshold\"."
         else
           echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
           echo "[openss]: hwc experiment using the hwc experiment default sampling threshold: \"$hwc_default_threshold\"."
         fi
       else
         # OPENSS_HWC_EVENT was set
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then 
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           echo "[openss]: hwc experiment using the hwc experiment default sampling threshold: \"$hwc_default_threshold\"."
         else
           echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
           echo "[openss]: hwc experiment using the hwc experiment default sampling threshold: \"$hwc_default_threshold\"."
         fi
       fi
     else
       # The threshold environment variable was set
       if [ -z "$OPENSS_HWC_EVENT" ] 
       then
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then 
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be used as the sampling threshold."
         else
           echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
           echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be used as the sampling threshold."
         fi
       else
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then 
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be used as the sampling threshold."
         else
           echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
           echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be used as the sampling threshold."
         fi
       fi
     fi
  fi 

# The messages above should reflect whether this is set or not.  Now export the input event, if it was specified
  if [ $input_argument_event_or_trace_list_value != 0 ]
  then 
    OPENSS_HWC_EVENT=$input_argument_event_or_trace_list_value
    export OPENSS_HWC_EVENT
  fi

  if [ $debug_flag == 1 ] 
  then
    echo "DEBUG: about to run \"openss -offline -f "$1" hwc, OPENSS_HWC_EVENT=$OPENSS_HWC_EVENT"
    echo "DEBUG: about to run \"openss -offline -f "$1" hwc, OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD"
  fi

  openss -offline -f "$1" hwc


# ------------------------------------------------------------------------------------
# -- HWCSAMP EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "osshwcsamp" ]
then

  if [ $debug_flag == 1 ]
  then
    if [ -z "$OPENSS_HWCSAMP_EVENTS" ] 
    then
      echo "DEBUG: in HWCSAMP EXPERIMENT SECTION, NOT SET, OPENSS_HWCSAMP_EVENTS=$OPENSS_HWCSAMP_EVENTS"
    else
      echo "DEBUG: in HWCSAMP EXPERIMENT SECTION, IS SET, OPENSS_HWCSAMP_EVENTS=$OPENSS_HWCSAMP_EVENTS"
    fi

    if [ -z "$OPENSS_HWCSAMP_RATE" ] 
    then
      echo "DEBUG: in HWCSAMP EXPERIMENT SECTION, NOT SET, OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE"
    else
      echo "DEBUG: in HWCSAMP EXPERIMENT SECTION, IS SET, OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE"
    fi
  fi

  if [ $low_flag == 1 ]
  then
     sampling_rate=$hwcsamp_default_rate
     let sampling_rate=sampling_rate/2
     if [ -z "$OPENSS_HWCSAMP_RATE" ] 
     then
       if [ -z "$OPENSS_HWCSAMP_EVENTS" ] 
       then
         echo "[openss]: hwcsamp experiment using default papi event: \"$hwcsamp_default_events\"."
         echo "[openss]: hwcsamp experiment using sampling_rate: \"$sampling_rate\" because the \"low\" parameter is specified."
       else
         echo "[openss]: hwcsamp experiment using papi event: \"$OPENSS_HWCSAMP_EVENTS\" because the OPENSS_HWCSAMP_EVENTS environment variable is set."
         echo "[openss]: hwcsamp experiment using sampling_rate: \"$sampling_rate\" because the \"low\" parameter is specified."
       fi
     else
       if [ -z "$OPENSS_HWCSAMP_EVENTS" ] 
       then
         echo "[openss]: hwcsamp experiment using default papi event: \"$hwcsamp_default_events\"."
         echo "[openss]: hwcsamp experiment OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE is set and will be altered to \"$sampling_rate\" because the \"low\" parameter is specified."
       else
         echo "[openss]: hwcsamp experiment using papi event: \"$OPENSS_HWCSAMP_EVENTS\" because the OPENSS_HWCSAMP_EVENTS environment variable is set."
         echo "[openss]: hwcsamp experiment OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE is set and will be altered to \"$sampling_rate\" because the \"low\" parameter is specified."
       fi
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: sampling_rate=$sampling_rate"
     fi
     OPENSS_HWCSAMP_RATE=$sampling_rate
     export OPENSS_HWCSAMP_RATE
     if [ $debug_flag == 1 ]
     then 
        echo "DEBUG: in HWCSAMP EXPERIMENT SECTION, RESET low, OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE"
     fi
  elif [ $high_flag == 1 ]
  then
     sampling_rate=$hwcsamp_default_rate
#     sampling_rate=$OPENSS_HWCSAMP_RATE
     let sampling_rate=sampling_rate*4
     if [ -z "$OPENSS_HWCSAMP_RATE" ] 
     then
       if [ -z "$OPENSS_HWCSAMP_EVENTS" ] 
       then
         echo "[openss]: hwcsamp experiment using default papi event: \"$hwcsamp_default_events\"."
         echo "[openss]: hwcsamp experiment using sampling_rate: \"$sampling_rate\" because the \"high\" parameter is specified."
       else
         echo "[openss]: hwcsamp experiment using papi event: \"$OPENSS_HWCSAMP_EVENTS\" because the OPENSS_HWCSAMP_EVENTS environment variable is set."
         echo "[openss]: hwcsamp experiment using sampling_rate: \"$sampling_rate\" because the \"high\" parameter is specified."
       fi
     else
       if [ -z "$OPENSS_HWCSAMP_EVENTS" ] 
       then
         echo "[openss]: hwcsamp experiment using default papi event: \"$hwcsamp_default_events\"."
         echo "[openss]: hwcsamp experiment OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE is set and will be altered to \"$sampling_rate\" because the \"high\" parameter is specified."
       else
         echo "[openss]: hwcsamp experiment using papi event: \"$OPENSS_HWCSAMP_EVENTS\" because the OPENSS_HWCSAMP_EVENTS environment variable is set."
         echo "[openss]: hwcsamp experiment OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE is set and will be altered to \"$sampling_rate\" because the \"high\" parameter is specified."
       fi
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: sampling_rate=$sampling_rate"
     fi
     OPENSS_HWCSAMP_RATE=$sampling_rate
     export OPENSS_HWCSAMP_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in HWCSAMP EXPERIMENT SECTION, RESET high, OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE"
     fi
  elif [ $use_default_flag == 1 ]
  then
     if [ -z "$OPENSS_HWCSAMP_RATE" ] 
     then
       if [ -z "$OPENSS_HWCSAMP_EVENTS" ] 
       then
         echo "[openss]: hwcsamp experiment using default papi event: \"$hwcsamp_default_events\" because the \"default\" parameter is specified."
         echo "[openss]: hwcsamp experiment using default sampling_rate: \"$hwcsamp_default_rate\" because the \"default\" parameter is specified."
       else
         echo "[openss]: hwcsamp experiment using default papi events overriding the OPENSS_HWCSAMP_EVENTS environment variable=\"$OPENSS_HWCSAMP_EVENTS\" setting because the \"default\" parameter is specified."
         echo "[openss]: hwcsamp experiment using default sampling_rate: \"$hwcsamp_default_rate\" because the \"default\" parameter is specified."
       fi
     else
       if [ $hwcsamp_default_rate != $OPENSS_HWCSAMP_RATE ]
       then
         if [ -z "$OPENSS_HWCSAMP_EVENTS" ] 
         then
           echo "[openss]: hwcsamp experiment using default papi event: \"$hwcsamp_default_events\" because the \"default\" parameter is specified."
           echo "[openss]: hwcsamp experiment using default sampling_rate: \"$hwcsamp_default_rate\" overriding the OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE environment variable because the \"default\" parameter is specified."
         else
           echo "[openss]: hwcsamp experiment using default papi events overriding the OPENSS_HWCSAMP_EVENTS environment variable=\"$OPENSS_HWCSAMP_EVENTS\" setting because the \"default\" parameter is specified."
           echo "[openss]: hwcsamp experiment using default sampling_rate: \"$hwcsamp_default_rate\" overriding the OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE environment variable because the \"default\" parameter is specified."
         fi
       fi
     fi

     sampling_rate=$hwcsamp_default_rate
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: sampling_rate=$sampling_rate"
     fi
     OPENSS_HWCSAMP_RATE=$sampling_rate
     export OPENSS_HWCSAMP_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in HWCSAMP EXPERIMENT SECTION, RESET default, OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE"
     fi
  elif [ $input_argument_rate_threshold_value != 0 ]
  then
     if [ -z "$OPENSS_HWCSAMP_RATE" ] 
     then
       if [ -z "$OPENSS_HWCSAMP_EVENTS" ] 
       then
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then
           echo "[openss]: hwcsamp experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
         else
           echo "[openss]: hwcsamp experiment using default papi event: \"$hwcsamp_default_events\"."
         fi
         echo "[openss]: hwcsamp experiment using sampling_rate: \"$input_argument_rate_threshold_value\" because \"rate value\" parameter is specified."
       else
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then
           echo "[openss]: hwcsamp experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
         else
           echo "[openss]: hwcsamp experiment using papi event: \"$OPENSS_HWCSAMP_EVENTS\" because the OPENSS_HWCSAMP_EVENTS environment variable is set."
         fi
         echo "[openss]: hwcsamp experiment using sampling_rate: \"$input_argument_rate_threshold_value\" because \"rate value\" parameter is specified."
       fi
     else
       if [ $input_argument_rate_threshold_value != $OPENSS_HWCSAMP_RATE ]
       then
         if [ -z "$OPENSS_HWCSAMP_EVENTS" ] 
         then
           if [ $input_argument_event_or_trace_list_value != 0 ]
           then
             echo "[openss]: hwcsamp experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           else
             echo "[openss]: hwcsamp experiment using default papi event: \"$hwcsamp_default_events\"."
           fi
           echo "[openss]: hwcsamp experiment OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE is set and will be altered to \"$input_argument_rate_threshold_value\" because the \"rate value\" parameter is specified."
         else
           if [ $input_argument_event_or_trace_list_value != 0 ]
           then
             echo "[openss]: hwcsamp experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           else
             echo "[openss]: hwcsamp experiment using papi event: \"$OPENSS_HWCSAMP_EVENTS\" because the OPENSS_HWCSAMP_EVENTS environment variable is set."
           fi
           echo "[openss]: hwcsamp experiment OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE is set and will be altered to \"$input_argument_rate_threshold_value\" because the \"rate value\" parameter is specified."
         fi
       fi
     fi
     sampling_rate=$input_argument_rate_threshold_value
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: sampling_rate=$sampling_rate"
     fi
     OPENSS_HWCSAMP_RATE=$sampling_rate
     export OPENSS_HWCSAMP_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in HWCSAMP EXPERIMENT SECTION, RESET input_argument_rate_threshold_value, OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE"
     fi
  else
     # An input Threshold was not specified
     if [ -z "$OPENSS_HWCSAMP_RATE" ] 
     then
       if [ -z "$OPENSS_HWCSAMP_EVENTS" ] 
       then
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then 
           echo "[openss]: hwcsamp experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           echo "[openss]: hwcsamp experiment using the hwc experiment default sampling_rate: \"$hwcsamp_default_rate\"."
         else
           echo "[openss]: hwcsamp experiment using default papi event: \"$hwcsamp_default_events\"."
           echo "[openss]: hwcsamp experiment using the hwcsamp experiment default sampling_rate: \"$hwcsamp_default_rate\"."
         fi
       else
         # OPENSS_HWCSAMP_EVENTS was set
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then 
           echo "[openss]: hwcsamp experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           echo "[openss]: hwcsamp experiment using the hwcsamp experiment default sampling_rate: \"$hwcsamp_default_rate\"."
         else
           echo "[openss]: hwcsamp experiment using papi event: \"$OPENSS_HWCSAMP_EVENTS\" because the OPENSS_HWCSAMP_EVENTS environment variable is set."
           echo "[openss]: hwcsamp experiment using the hwcsamp experiment default sampling_rate: \"$hwcsamp_default_rate\"."
         fi
       fi
     else
       # The sampling_rate environment variable was set
       if [ -z "$OPENSS_HWCSAMP_EVENTS" ] 
       then
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then 
           echo "[openss]: hwcsamp experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           echo "[openss]: hwcsamp experiment OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE is set and will be used as the sampling_rate."
         else
           echo "[openss]: hwcsamp experiment using default papi event: \"$hwcsamp_default_events\"."
           echo "[openss]: hwcsamp experiment OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE is set and will be used as the sampling_rate."
         fi
       else
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then 
           echo "[openss]: hwcsamp experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           echo "[openss]: hwcsamp experiment OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE is set and will be used as the sampling_rate."
         else
           echo "[openss]: hwcsamp experiment using papi event: \"$OPENSS_HWCSAMP_EVENTS\" because the OPENSS_HWCSAMP_EVENTS environment variable is set."
           echo "[openss]: hwcsamp experiment OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE is set and will be used as the sampling_rate."
         fi
       fi
     fi
  fi 

# The messages above should reflect whether this is set or not.  Now export the input event, if it was specified
  if [ $input_argument_event_or_trace_list_value != 0 ]
  then 
    OPENSS_HWCSAMP_EVENTS=$input_argument_event_or_trace_list_value
    export OPENSS_HWCSAMP_EVENTS
  fi

  if [ $debug_flag == 1 ] 
  then
    echo "DEBUG: about to run \"openss -offline -f "$1" hwcsamp, OPENSS_HWCSAMP_EVENTS=$OPENSS_HWCSAMP_EVENTS"
    echo "DEBUG: about to run \"openss -offline -f "$1" hwcsamp, OPENSS_HWCSAMP_RATE=$OPENSS_HWCSAMP_RATE"
  fi

  openss -offline -f "$1" hwcsamp

# ------------------------------------------------------------------------------------
# -- HWCTIME EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "osshwctime" ]
then

  if [ $debug_flag == 1 ]
  then

    if [ -z "$OPENSS_HWCTIME_EVENT" ] 
    then
      echo "DEBUG: in HWCTIME EXPERIMENT SECTION, NOT SET, OPENSS_HWCTIME_EVENT=$OPENSS_HWCTIME_EVENT"
    else
      echo "DEBUG: in HWCTIME EXPERIMENT SECTION, IS SET, OPENSS_HWCTIME_EVENT=$OPENSS_HWCTIME_EVENT"
    fi

    if [ -z "$OPENSS_HWCTIME_THRESHOLD" ] 
    then
      echo "DEBUG: in HWCTIME EXPERIMENT SECTION, NOT SET, OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD"
    else
      echo "DEBUG: in HWCTIME EXPERIMENT SECTION, IS SET, OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD"
    fi

  fi

  if [ $low_flag == 1 ]
  then
     threshold=$hwctime_default_threshold
     let threshold=threshold/2
     if [ -z "$OPENSS_HWCTIME_THRESHOLD" ] 
     then
       if [ -z "$OPENSS_HWCTIME_EVENT" ] 
       then
         echo "[openss]: hwctime experiment using default papi event: \"$hwctime_default_event\"."
         echo "[openss]: hwctime experiment using sampling threshold: \"$threshold\" because the \"low\" parameter is specified."
       else
         echo "[openss]: hwctime experiment using papi event: \"$OPENSS_HWCTIME_EVENT\" because the OPENSS_HWCTIME_EVENT environment variable is set."
         echo "[openss]: hwctime experiment using sampling threshold: \"$threshold\" because the \"low\" parameter is specified."
       fi
     else
       if [ -z "$OPENSS_HWCTIME_EVENT" ] 
       then
         echo "[openss]: hwctime experiment using default papi event: \"$hwctime_default_event\"."
         echo "[openss]: hwctime experiment OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD is set and will be altered to \"$threshold\" because the \"low\" parameter is specified."
       else
         echo "[openss]: hwctime experiment using papi event: \"$OPENSS_HWCTIME_EVENT\" because the OPENSS_HWCTIME_EVENT environment variable is set."
         echo "[openss]: hwctime experiment OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD is set and will be altered to \"$threshold\" because the \"low\" parameter is specified."
       fi
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: threshold=$threshold"
     fi
     OPENSS_HWCTIME_THRESHOLD=$threshold
     export OPENSS_HWCTIME_THRESHOLD
     if [ $debug_flag == 1 ]
     then 
        echo "DEBUG: in HWCTIME EXPERIMENT SECTION, RESET low, OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD"
     fi
  elif [ $high_flag == 1 ]
  then
     threshold=$hwctime_default_threshold
#     threshold=$OPENSS_HWCTIME_THRESHOLD
     let threshold=threshold*4
     if [ -z "$OPENSS_HWCTIME_THRESHOLD" ] 
     then
       if [ -z "$OPENSS_HWCTIME_EVENT" ] 
       then
         echo "[openss]: hwctime experiment using default papi event: \"$hwctime_default_event\"."
         echo "[openss]: hwctime experiment using sampling threshold: \"$threshold\" because the \"high\" parameter is specified."
       else
         echo "[openss]: hwctime experiment using papi event: \"$OPENSS_HWCTIME_EVENT\" because the OPENSS_HWCTIME_EVENT environment variable is set."
         echo "[openss]: hwctime experiment using sampling threshold: \"$threshold\" because the \"high\" parameter is specified."
       fi
     else
       if [ -z "$OPENSS_HWCTIME_EVENT" ] 
       then
         echo "[openss]: hwctime experiment using default papi event: \"$hwctime_default_event\"."
         echo "[openss]: hwctime experiment OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD is set and will be altered to \"$threshold\" because the \"high\" parameter is specified."
       else
         echo "[openss]: hwctime experiment using papi event: \"$OPENSS_HWCTIME_EVENT\" because the OPENSS_HWCTIME_EVENT environment variable is set."
         echo "[openss]: hwctime experiment OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD is set and will be altered to \"$threshold\" because the \"high\" parameter is specified."
       fi
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: threshold=$threshold"
     fi
     OPENSS_HWCTIME_THRESHOLD=$threshold
     export OPENSS_HWCTIME_THRESHOLD
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in HWCTIME EXPERIMENT SECTION, RESET high, OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD"
     fi
  elif [ $use_default_flag == 1 ]
  then
     if [ -z "$OPENSS_HWCTIME_THRESHOLD" ] 
     then
       if [ -z "$OPENSS_HWCTIME_EVENT" ] 
       then
         echo "[openss]: hwctime experiment using default papi event: \"$hwctime_default_event\" because the \"default\" parameter is specified."
         echo "[openss]: hwctime experiment using default sampling threshold: \"$hwctime_default_threshold\" because the \"default\" parameter is specified."
       else
         echo "[openss]: hwctime experiment using default papi event overriding the OPENSS_HWCTIME_EVENT environment variable=\"$OPENSS_HWCTIME_EVENT\" setting because the \"default\" parameter is specified."
         echo "[openss]: hwctime experiment using default sampling threshold: \"$hwctime_default_threshold\" because the \"default\" parameter is specified."
       fi
     else
       if [ $hwctime_default_threshold != $OPENSS_HWCTIME_THRESHOLD ]
       then
         if [ -z "$OPENSS_HWCTIME_EVENT" ] 
         then
           echo "[openss]: hwctime experiment using default papi event: \"$hwctime_default_event\" because the \"default\" parameter is specified."
           echo "[openss]: hwctime experiment using default sampling threshold: \"$hwctime_default_threshold\" overriding the OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD environment variable because the \"default\" parameter is specified."
         else
           echo "[openss]: hwctime experiment using default papi event overriding the OPENSS_HWCTIME_EVENT environment variable=\"$OPENSS_HWCTIME_EVENT\" setting because the \"default\" parameter is specified."
           echo "[openss]: hwctime experiment using default sampling threshold: \"$hwctime_default_threshold\" overriding the OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD environment variable because the \"default\" parameter is specified."
         fi
       fi
     fi

     threshold=$hwctime_default_threshold
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: threshold=$threshold"
     fi
     OPENSS_HWCTIME_THRESHOLD=$threshold
     export OPENSS_HWCTIME_THRESHOLD
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in HWCTIME EXPERIMENT SECTION, RESET default, OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD"
     fi
  elif [ $input_argument_rate_threshold_value != 0 ]
  then
     if [ -z "$OPENSS_HWCTIME_THRESHOLD" ] 
     then
       if [ -z "$OPENSS_HWCTIME_EVENT" ] 
       then
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then
           echo "[openss]: hwctime experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
         else
           echo "[openss]: hwctime experiment using default papi event: \"$hwctime_default_event\"."
         fi
         echo "[openss]: hwctime experiment using sampling threshold: \"$input_argument_rate_threshold_value\" because \"rate value\" parameter is specified."
       else
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then
           echo "[openss]: hwctime experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
         else
           echo "[openss]: hwctime experiment using papi event: \"$OPENSS_HWCTIME_EVENT\" because the OPENSS_HWCTIME_EVENT environment variable is set."
         fi
         echo "[openss]: hwctime experiment using sampling threshold: \"$input_argument_rate_threshold_value\" because \"rate value\" parameter is specified."
       fi
     else
       if [ $input_argument_rate_threshold_value != $OPENSS_HWCTIME_THRESHOLD ]
       then
         if [ -z "$OPENSS_HWCTIME_EVENT" ] 
         then
           if [ $input_argument_event_or_trace_list_value != 0 ]
           then
             echo "[openss]: hwctime experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           else
             echo "[openss]: hwctime experiment using default papi event: \"$hwctime_default_event\"."
           fi
           echo "[openss]: hwctime experiment OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD is set and will be altered to \"$input_argument_rate_threshold_value\" because the \"rate value\" parameter is specified."
         else
           if [ $input_argument_event_or_trace_list_value != 0 ]
           then
             echo "[openss]: hwctime experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           else
             echo "[openss]: hwctime experiment using papi event: \"$OPENSS_HWCTIME_EVENT\" because the OPENSS_HWCTIME_EVENT environment variable is set."
           fi
           echo "[openss]: hwctime experiment OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD is set and will be altered to \"$input_argument_rate_threshold_value\" because the \"rate value\" parameter is specified."
         fi
       fi
     fi
     threshold=$input_argument_rate_threshold_value
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: threshold=$threshold"
     fi
     OPENSS_HWCTIME_THRESHOLD=$threshold
     export OPENSS_HWCTIME_THRESHOLD
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in HWCTIME EXPERIMENT SECTION, RESET input_argument_rate_threshold_value, OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD"
     fi
  else
     # An input Threshold was not specified
     if [ -z "$OPENSS_HWCTIME_THRESHOLD" ] 
     then
       if [ -z "$OPENSS_HWCTIME_EVENT" ] 
       then
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then 
           echo "[openss]: hwctime experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           echo "[openss]: hwctime experiment using the hwc experiment default sampling threshold: \"$hwctime_default_threshold\"."
         else
           echo "[openss]: hwctime experiment using default papi event: \"$hwctime_default_event\"."
           echo "[openss]: hwctime experiment using the hwctime experiment default sampling threshold: \"$hwctime_default_threshold\"."
         fi
       else
         # OPENSS_HWCTIME_EVENT was set
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then 
           echo "[openss]: hwctime experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           echo "[openss]: hwctime experiment using the hwctime experiment default sampling threshold: \"$hwctime_default_threshold\"."
         else
           echo "[openss]: hwctime experiment using papi event: \"$OPENSS_HWCTIME_EVENT\" because the OPENSS_HWCTIME_EVENT environment variable is set."
           echo "[openss]: hwctime experiment using the hwctime experiment default sampling threshold: \"$hwctime_default_threshold\"."
         fi
       fi
     else
       # The threshold environment variable was set
       if [ -z "$OPENSS_HWCTIME_EVENT" ] 
       then
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then 
           echo "[openss]: hwctime experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           echo "[openss]: hwctime experiment OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD is set and will be used as the sampling threshold."
         else
           echo "[openss]: hwctime experiment using default papi event: \"$hwctime_default_event\"."
           echo "[openss]: hwctime experiment OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD is set and will be used as the sampling threshold."
         fi
       else
         if [ $input_argument_event_or_trace_list_value != 0 ]
         then 
           echo "[openss]: hwctime experiment using input papi event: \"$input_argument_event_or_trace_list_value\"."
           echo "[openss]: hwctime experiment OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD is set and will be used as the sampling threshold."
         else
           echo "[openss]: hwctime experiment using papi event: \"$OPENSS_HWCTIME_EVENT\" because the OPENSS_HWCTIME_EVENT environment variable is set."
           echo "[openss]: hwctime experiment OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD is set and will be used as the sampling threshold."
         fi
       fi
     fi
  fi 

# The messages above should reflect whether this is set or not.  Now export the input event, if it was specified
  if [ $input_argument_event_or_trace_list_value != 0 ]
  then 
    OPENSS_HWCTIME_EVENT=$input_argument_event_or_trace_list_value
    export OPENSS_HWCTIME_EVENT
  fi

  if [ $debug_flag == 1 ] 
  then
    echo "DEBUG: about to run \"openss -offline -f "$1" hwctime, OPENSS_HWCTIME_EVENT=$OPENSS_HWCTIME_EVENT"
    echo "DEBUG: about to run \"openss -offline -f "$1" hwctime, OPENSS_HWCTIME_THRESHOLD=$OPENSS_HWCTIME_THRESHOLD"
  fi

  openss -offline -f "$1" hwctime
# ------------------------------------------------------------------------------------
# -- IO EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "ossio" ]
then

  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: in IO EXPERIMENT SECTION, input_argument_event_or_trace_list_value=$input_argument_event_or_trace_list_value"
  fi

  if [ $input_argument_event_or_trace_list_value != 0 ]
  then

    if [ -z  "$OPENSS_IO_TRACED" ]
    then
      echo "[openss]: io experiment using input io experiment trace function list specified on the \"ossio\" command: \"$input_argument_event_or_trace_list_value\" overriding the default I/O function list."

      if [ $debug_flag == 1 ]
      then
         echo "DEBUG: setting OPENSS_IO_TRACED to $input_argument_event_or_trace_list_value and overriding the previous value of OPENSS_IO_TRACED"
      fi

    else

      echo "[openss]: io experiment using input io experiment trace function list specified on the \"ossio\" command: \"$input_argument_event_or_trace_list_value\" overriding the I/O function list specified by the environment variable: OPENSS_IO_TRACED."

      if [ $debug_flag == 1 ]
      then
         echo "DEBUG: setting OPENSS_IO_TRACED to $input_argument_event_or_trace_list_value and overriding what was already set in OPENSS_IO_TRACED"
      fi

    fi

    OPENSS_IO_TRACED=$input_argument_event_or_trace_list_value

  elif [ $use_default_flag == 1 ]
  then

    if [ -z  "$OPENSS_IO_TRACED" ]
    then
       echo "[openss]: io experiment using function list: \"$io_default_traceable_functions\" because the \"default\" parameter is specified."
     else
       if [ $io_default_traceable_functions != $OPENSS_IO_TRACED ]
       then
         echo "[openss]: io experiment OPENSS_IO_TRACED=$OPENSS_IO_TRACED is set and will be altered to \"$io_default_traceable_functions\" because the \"default\" parameter is specified."
       fi
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: io, default, io_traced=$io_default_traceable_functions"
     fi
     OPENSS_IO_TRACED=$io_default_traceable_functions
     export OPENSS_IO_TRACED
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in IO EXPERIMENT SECTION, RESET default, OPENSS_IO_TRACED=$OPENSS_IO_TRACED"
     fi

  else

    # input argument or default argument not specified

    if [ -z  "$OPENSS_IO_TRACED" ]
    then

      echo "[openss]: io experiment using the default I/O experiment trace function list: \"$io_default_traceable_functions\"."
      OPENSS_IO_TRACED=$io_default_traceable_functions

      if [ $debug_flag == 1 ]
      then
        echo "DEBUG: setting OPENSS_IO_TRACED to default $io_default_traceable_functions"
      fi
    else
      echo "[openss]: io experiment OPENSS_IO_TRACED=$OPENSS_IO_TRACED is set and will override the default I/O function list."
      if [ $debug_flag == 1 ]
      then
        echo "DEBUG: exporting already set OPENSS_IO_TRACED to $OPENSS_IO_TRACED"
      fi
    fi

  fi

  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: about to call openss -offline for io experiment, OPENSS_IO_TRACED=$OPENSS_IO_TRACED"
  fi

  export OPENSS_IO_TRACED

  openss -offline -f "$1" io

# ------------------------------------------------------------------------------------
# -- IOT EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "ossiot" ]
then

  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: in IOT EXPERIMENT SECTION, input_argument_event_or_trace_list_value=$input_argument_event_or_trace_list_value"
  fi

  if [ $input_argument_event_or_trace_list_value != 0 ]
  then

    if [ -z  "$OPENSS_IOT_TRACED" ]
    then
      echo "[openss]: iot experiment using input iot experiment trace function list specified on the \"ossiot\" command: \"$input_argument_event_or_trace_list_value\" overriding the default I/O function list."

      if [ $debug_flag == 1 ]
      then
         echo "DEBUG: setting OPENSS_IOT_TRACED to $input_argument_event_or_trace_list_value and overriding the previous value of OPENSS_IOT_TRACED"
      fi

    else

      echo "[openss]: iot experiment using input iot experiment trace function list specified on the \"ossiot\" command: \"$input_argument_event_or_trace_list_value\" overriding the I/O function list specified by the environment variable: OPENSS_IOT_TRACED."

      if [ $debug_flag == 1 ]
      then
         echo "DEBUG: setting OPENSS_IOT_TRACED to $input_argument_event_or_trace_list_value and overriding what was already set in OPENSS_IOT_TRACED"
      fi

    fi

    OPENSS_IOT_TRACED=$input_argument_event_or_trace_list_value

  elif [ $use_default_flag == 1 ]
  then

    if [ -z  "$OPENSS_IOT_TRACED" ]
    then
       echo "[openss]: iot experiment using function list: \"$iot_default_traceable_functions\" because the \"default\" parameter is specified."
     else
       if [ $iot_default_traceable_functions != $OPENSS_IOT_TRACED ]
       then
         echo "[openss]: iot experiment OPENSS_IOT_TRACED=$OPENSS_IOT_TRACED is set and will be altered to \"$iot_default_traceable_functions\" because the \"default\" parameter is specified."
       fi
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: iot, default, iot_traced=$iot_default_traceable_functions"
     fi
     OPENSS_IOT_TRACED=$iot_default_traceable_functions
     export OPENSS_IOT_TRACED
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in IOT EXPERIMENT SECTION, RESET default, OPENSS_IOT_TRACED=$OPENSS_IOT_TRACED"
     fi

  else

    # input argument or default argument not specified

    if [ -z  "$OPENSS_IOT_TRACED" ]
    then

      echo "[openss]: iot experiment using the default I/O experiment trace function list: \"$iot_default_traceable_functions\"."
      OPENSS_IOT_TRACED=$iot_default_traceable_functions

      if [ $debug_flag == 1 ]
      then
        echo "DEBUG: setting OPENSS_IOT_TRACED to default $iot_default_traceable_functions"
      fi
    else
      echo "[openss]: iot experiment OPENSS_IOT_TRACED=$OPENSS_IOT_TRACED is set and will override the default I/O function list."
      if [ $debug_flag == 1 ]
      then
        echo "DEBUG: exporting already set OPENSS_IOT_TRACED to $OPENSS_IOT_TRACED"
      fi
    fi

  fi

  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: about to call openss -offline for iot experiment, OPENSS_IOT_TRACED=$OPENSS_IOT_TRACED"
  fi

  export OPENSS_IOT_TRACED

  openss -offline -f "$1" iot

# ------------------------------------------------------------------------------------
# -- MPI EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "ossmpi" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: in MPI EXPERIMENT SECTION, input_argument_event_or_trace_list_value=$input_argument_event_or_trace_list_value"
  fi

#  if [ -z "$OPENSS_MPI_TRACED" ] 
#  then
#
#    if [ $input_argument_event_or_trace_list_value != 0 ]
#    then
#      echo "[openss]: mpi experiment using input mpi experiment trace function list specified on the \"ossmpi\" command: \"$input_argument_event_or_trace_list_value\"."
#    else
#      echo "[openss]: mpi experiment using the default MPI experiment trace function list: \"$mpi_default_traceable_functions\"."
#    fi
#
#  else
#
#    if [ $input_argument_event_or_trace_list_value != 0 ]
#    then
#      echo "[openss]: mpi experiment using input mpi experiment trace function list specified on the \"ossmpi\" command: \"$input_argument_event_or_trace_list_value\"."
#    else
#      echo "[openss]: mpi experiment OPENSS_MPI_TRACED=$OPENSS_MPI_TRACED is set and will be used as the MPI experiment trace function list."
#    fi
#
#  fi

  if [ $input_argument_event_or_trace_list_value != 0 ]
  then

    if [ -z  "$OPENSS_MPI_TRACED" ]
    then
      echo "[openss]: mpi experiment using input mpi experiment trace function list specified on the \"ossmpi\" command: \"$input_argument_event_or_trace_list_value\"."
      if [ $debug_flag == 1 ]
      then
         echo "DEBUG: setting OPENSS_MPI_TRACED to $input_argument_event_or_trace_list_value"
      fi
    else
      echo "[openss]: mpi experiment using input mpi experiment trace function list specified on the \"ossmpi\" command: \"$input_argument_event_or_trace_list_value\" overriding the OPENSS_MPI_TRACED environment variable setting."
      if [ $debug_flag == 1 ]
      then
         echo "DEBUG: setting OPENSS_MPI_TRACED to $input_argument_event_or_trace_list_value and overriding what was already set in OPENSS_MPI_TRACED"
      fi
    fi

    OPENSS_MPI_TRACED=$input_argument_event_or_trace_list_value

  elif [ $use_default_flag == 1 ]
  then

    if [ -z  "$OPENSS_MPI_TRACED" ]
     then
       echo "[openss]: mpi experiment using function list: \"$mpi_default_traceable_functions\" because the \"default\" parameter is specified."
     else
       if [ $mpi_default_traceable_functions != $OPENSS_MPI_TRACED ]
       then
         echo "[openss]: mpi experiment OPENSS_MPI_TRACED=$OPENSS_MPI_TRACED is set and will be altered to \"$mpi_default_traceable_functions\" because the \"default\" parameter is specified."
       fi
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: mpi, default, mpi_traced=$mpi_default_traceable_functions"
     fi
     OPENSS_MPI_TRACED=$mpi_default_traceable_functions
     export OPENSS_MPI_TRACED
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in MPI EXPERIMENT SECTION, RESET default, OPENSS_MPI_TRACED=$OPENSS_MPI_TRACED"
     fi
  else
    # input argument not specified
    if [ -z  "$OPENSS_MPI_TRACED" ]
    then
      echo "[openss]: mpi experiment using the default MPI experiment trace function list: \"$mpi_default_traceable_functions\"."
      OPENSS_MPI_TRACED=$mpi_default_traceable_functions
      if [ $debug_flag == 1 ]
      then
        echo "DEBUG: setting OPENSS_MPI_TRACED to default $mpi_default_traceable_functions"
      fi
    else
      echo "[openss]: mpi experiment using the OPENSS_MPI_TRACED=$OPENSS_MPI_TRACED environment variable MPI function list overriding the default MPI experiment trace function list."
      if [ $debug_flag == 1 ]
      then
        echo "DEBUG: exporting already set OPENSS_MPI_TRACED to $OPENSS_MPI_TRACED"
      fi
    fi
  fi

  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: about to call openss -offline for mpi experiment, OPENSS_MPI_TRACED=$OPENSS_MPI_TRACED"
  fi
  export OPENSS_MPI_TRACED

  openss -offline -f "$1" mpi


# ------------------------------------------------------------------------------------
# -- MPIT EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "ossmpit" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: in MPIT EXPERIMENT SECTION, input_argument_event_or_trace_list_value=$input_argument_event_or_trace_list_value"
  fi


  if [ $input_argument_event_or_trace_list_value != 0 ]
  then
    if [ -z  "$OPENSS_MPIT_TRACED" ]
    then
      echo "[openss]: mpit experiment using input mpit experiment trace function list specified on the \"ossmpit\" command: \"$input_argument_event_or_trace_list_value\"."
      if [ $debug_flag == 1 ]
      then
         echo "DEBUG: setting OPENSS_MPIT_TRACED to $input_argument_event_or_trace_list_value"
      fi
    else
      echo "[openss]: mpit experiment using input mpit experiment trace function list specified on the \"ossmpit\" command: \"$input_argument_event_or_trace_list_value\" overriding the MPIT function list specified by the OPENSS_MPIT_TRACED environment variable."
      if [ $debug_flag == 1 ]
      then
         echo "DEBUG: setting OPENSS_MPIT_TRACED to $input_argument_event_or_trace_list_value and overriding what was already set in OPENSS_MPIT_TRACED"
      fi
    fi
    OPENSS_MPIT_TRACED=$input_argument_event_or_trace_list_value

  elif [ $use_default_flag == 1 ]
  then
    if [ -z  "$OPENSS_MPIT_TRACED" ]
     then
       echo "[openss]: mpit experiment using function list: \"$mpit_default_traceable_functions\" because the \"default\" parameter is specified."
     else
       if [ $mpit_default_traceable_functions != $OPENSS_MPIT_TRACED ]
       then
         echo "[openss]: mpit experiment OPENSS_MPIT_TRACED=$OPENSS_MPIT_TRACED is set and will be altered to \"$mpit_default_traceable_functions\" because the \"default\" parameter is specified."
       fi
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: mpit, default, mpit_traced=$mpit_default_traceable_functions"
     fi
     OPENSS_MPIT_TRACED=$mpit_default_traceable_functions
     export OPENSS_MPIT_TRACED
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in MPIT EXPERIMENT SECTION, RESET default, OPENSS_MPIT_TRACED=$OPENSS_MPIT_TRACED"
     fi
  else
    # input argument not specified
    if [ -z  "$OPENSS_MPIT_TRACED" ]
    then
      echo "[openss]: mpit experiment using the default MPIT experiment trace function list: \"$mpit_default_traceable_functions\"."
      OPENSS_MPIT_TRACED=$mpit_default_traceable_functions
      if [ $debug_flag == 1 ]
      then
        echo "DEBUG: setting OPENSS_MPIT_TRACED to default $mpit_default_traceable_functions"
      fi
    else
      echo "[openss]: mpit experiment OPENSS_MPIT_TRACED=$OPENSS_MPIT_TRACED is set and will be used as the MPIT experiment trace function list."
      if [ $debug_flag == 1 ]
      then
        echo "DEBUG: exporting already set OPENSS_MPIT_TRACED to $OPENSS_MPIT_TRACED"
      fi
    fi
  fi

  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: about to call openss -offline for mpit experiment, OPENSS_MPIT_TRACED=$OPENSS_MPIT_TRACED"
  fi
  export OPENSS_MPIT_TRACED

  openss -offline -f "$1" mpit


# ------------------------------------------------------------------------------------
# -- MPIOTF EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "ossmpiotf" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: in MPIOTF EXPERIMENT SECTION, input_argument_event_or_trace_list_value=$input_argument_event_or_trace_list_value"
  fi


  if [ $input_argument_event_or_trace_list_value != 0 ]
  then
    if [ -z  "$OPENSS_MPIOTF_TRACED" ]
    then
      echo "[openss]: mpiotf experiment using input mpiotf experiment trace function list specified on the \"ossmpiotf\" command: \"$input_argument_event_or_trace_list_value\"."
      if [ $debug_flag == 1 ]
      then
         echo "DEBUG: setting OPENSS_MPIOTF_TRACED to $input_argument_event_or_trace_list_value"
      fi
    else
      echo "[openss]: mpiotf experiment using input mpiotf experiment trace function list specified on the \"ossmpiotf\" command: \"$input_argument_event_or_trace_list_value\" overriding the MPIOTF function list specified by the OPENSS_MPIOTF_TRACED environment variable."
      if [ $debug_flag == 1 ]
      then
         echo "DEBUG: setting OPENSS_MPIOTF_TRACED to $input_argument_event_or_trace_list_value and overriding what was already set in OPENSS_MPIOTF_TRACED"
      fi
    fi
    OPENSS_MPIOTF_TRACED=$input_argument_event_or_trace_list_value

  elif [ $use_default_flag == 1 ]
  then
    if [ -z  "$OPENSS_MPIOTF_TRACED" ]
     then
       echo "[openss]: mpiotf experiment using function list: \"$mpiotf_default_traceable_functions\" because the \"default\" parameter is specified."
     else
       if [ $mpiotf_default_traceable_functions != $OPENSS_MPIOTF_TRACED ]
       then
         echo "[openss]: mpiotf experiment OPENSS_MPIOTF_TRACED=$OPENSS_MPIOTF_TRACED is set and will be altered to \"$mpiotf_default_traceable_functions\" because the \"default\" parameter is specified."
       fi
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: mpiotf, default, mpiotf_traced=$mpiotf_default_traceable_functions"
     fi
     OPENSS_MPIOTF_TRACED=$mpiotf_default_traceable_functions
     export OPENSS_MPIOTF_TRACED
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in MPIOTF EXPERIMENT SECTION, RESET default, OPENSS_MPIOTF_TRACED=$OPENSS_MPIOTF_TRACED"
     fi
  else
    # input argument not specified
    if [ -z  "$OPENSS_MPIOTF_TRACED" ]
    then
      echo "[openss]: mpiotf experiment using the default MPIOTF experiment trace function list: \"$mpiotf_default_traceable_functions\"."
      OPENSS_MPIOTF_TRACED=$mpiotf_default_traceable_functions
      if [ $debug_flag == 1 ]
      then
        echo "DEBUG: setting OPENSS_MPIOTF_TRACED to default $mpiotf_default_traceable_functions"
      fi
    else
      echo "[openss]: mpiotf experiment OPENSS_MPIOTF_TRACED=$OPENSS_MPIOTF_TRACED is set and will be used as the MPIOTF experiment trace function list."
      if [ $debug_flag == 1 ]
      then
        echo "DEBUG: exporting already set OPENSS_MPIOTF_TRACED to $OPENSS_MPIOTF_TRACED"
      fi
    fi
  fi

  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: about to call openss -offline for mpiotf experiment, OPENSS_MPIOTF_TRACED=$OPENSS_MPIOTF_TRACED"
  fi
  export OPENSS_MPIOTF_TRACED

  openss -offline -f "$1" mpiotf


# ------------------------------------------------------------------------------------
# -- FPE EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "ossfpe" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: in FPE EXPERIMENT SECTION, input_argument_event_or_trace_list_value=$input_argument_event_or_trace_list_value"
  fi

  if [ $input_argument_event_or_trace_list_value != 0 ]
  then
    if [ -z  "$OPENSS_FPE_EVENT" ]
    then
      echo "[openss]: fpe experiment using input fpe experiment event list specified on the \"ossfpe\" command: \"$input_argument_event_or_trace_list_value\"."
      if [ $debug_flag == 1 ]
      then
         echo "DEBUG: setting OPENSS_FPE_EVENT to $input_argument_event_or_trace_list_value"
      fi
    else
      echo "[openss]: fpe experiment using input fpe experiment event list specified on the \"ossfpe\" command: \"$input_argument_event_or_trace_list_value\" overriding the OPENSS_FPE_EVENT environment variable setting."
      if [ $debug_flag == 1 ]
      then
         echo "DEBUG: setting OPENSS_FPE_EVENT to $input_argument_event_or_trace_list_value and overriding what was already set in OPENSS_FPE_EVENT"
      fi
    fi
    OPENSS_FPE_EVENT=$input_argument_event_or_trace_list_value
  elif [ $use_default_flag == 1 ]
  then
    if [ -z  "$OPENSS_FPE_EVENT" ]
     then
       echo "[openss]: fpe experiment using function list: \"$fpe_default_events\" because the \"default\" parameter is specified."
     else
       if [ $fpe_default_events != $OPENSS_FPE_EVENT ]
       then
         echo "[openss]: fpe experiment OPENSS_FPE_EVENT=$OPENSS_FPE_EVENT is set and will be altered to \"$fpe_default_events\" because the \"default\" parameter is specified."
       fi
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: fpe, default, fpe_traced=$fpe_default_events"
     fi
     OPENSS_FPE_EVENT=$fpe_default_events
     export OPENSS_FPE_EVENT
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in FPE EXPERIMENT SECTION, RESET default, OPENSS_FPE_EVENT=$OPENSS_FPE_EVENT"
     fi
  else
    # input argument not specified
    if [ -z  "$OPENSS_FPE_EVENT" ]
    then
      echo "[openss]: fpe experiment using the default FPE experiment event list: \"$fpe_default_events\"."
      OPENSS_FPE_EVENT=$fpe_default_events
      if [ $debug_flag == 1 ]
      then
        echo "DEBUG: setting OPENSS_FPE_EVENT to default $fpe_default_events"
      fi
    else
      echo "[openss]: fpe experiment OPENSS_FPE_EVENT=$OPENSS_FPE_EVENT is set and will be used as the FPE experiment event list."
      if [ $debug_flag == 1 ]
      then
        echo "DEBUG: exporting already set OPENSS_FPE_EVENT to $OPENSS_FPE_EVENT"
      fi
    fi
  fi

  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: about to call openss -offline for fpe experiment, OPENSS_FPE_EVENT=$OPENSS_FPE_EVENT"
  fi
  export OPENSS_FPE_EVENT

  openss -offline -f "$1" fpe

# ------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------
# -- COMPARE EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "osscompare" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: in COMPARE EXPERIMENT SECTION, input_compare_database_list=$input_compare_database_list"
    echo "DEBUG: in COMPARE EXPERIMENT SECTION, compare_default_metric=$compare_default_metric"
    echo "DEBUG: in COMPARE EXPERIMENT SECTION, input_argument_compare_metric=$input_argument_compare_metric"
    echo "DEBUG: in COMPARE EXPERIMENT SECTION, OPENSS_CREATE_CSV=$OPENSS_CREATE_CSV"
  fi

  unset type_of_dbase
  create_csv_files=0
  if [ -z "$OPENSS_CREATE_CSV" ]
  then
     if [ $debug_flag == 1 ]
     then
       echo "DEBUG: in COMPARE EXPERIMENT SECTION, setting create_csv_files=0"
     fi
     create_csv_files=0
  else
     if [ $debug_flag == 1 ]
     then
       echo "DEBUG: in COMPARE EXPERIMENT SECTION, setting create_csv_files=1"
     fi
     create_csv_files=1
  fi

  if [ $input_argument_compare_metric != 0 ]
  then
     use_compare_metric=$input_argument_compare_metric
     echo "[openss]: Executing compare experiment using osscompare command input metric value=$input_argument_compare_metric."
     if [ -z "$OPENSS_COMPARE_METRIC" ]
     then
        if [ $debug_flag == 1 ]
        then
          echo "DEBUG: in COMPARE EXPERIMENT SECTION, NO OPENSS_COMPARE_METRIC setting, use input_argument_compare_metric=$input_argument_compare_metric"
        fi
     else
        echo "[openss]: Executing compare experiment using OPENSS_COMPARE_METRIC value=$OPENSS_COMPARE_METRIC for osscompare command metric value, overriding osscommand input metric value=$input_argument_compare_metric."
        use_compare_metric=$OPENSS_COMPARE_METRIC
     fi
  else
      use_compare_metric=$compare_default_metric
  fi

  if [ $input_compare_database_list != 0 ]
  then
    if [ -z  "$OPENSS_COMPARE_DATABASES" ]
    then
      echo "[openss]: Executing compare experiment using osscompare command input database list specified on the \"osscompare\" command:"
      echo "[openss]: \"$input_compare_database_list\"."
      if [ $debug_flag == 1 ]
      then
         echo "DEBUG: setting OPENSS_COMPARE_DATABASES to $input_compare_database_list for use with the split_csv routine"
      fi
    else
      echo "[openss]: Executing compare experiment overriding the osscompare command input database list specified on the \"osscompare\" command: \"$input_compare_database_list\" and using the list specified by the OPENSS_COMPARE_DATABASES environment variable."
      if [ $debug_flag == 1 ]
      then
         echo "DEBUG: setting OPENSS_COMPARE_DATABASES to $input_compare_database_list and overriding what was already set in OPENSS_COMPARE_DATABASES"
      fi
    fi
    OPENSS_COMPARE_DATABASES=$input_compare_database_list
  else
    # input argument not specified
    if [ -z  "$OPENSS_COMPARE_DATABASES" ]
    then
      echo "[openss]: ERROR: no database list input and no OPENSS_COMPARE_DATABASES environment variable setting was found."
    else
      echo "[openss]: Executing compare experiment OPENSS_COMPARE_DATABASES=$OPENSS_COMPARE_DATABASES is set and will be used as the Compare experiment database list."
      if [ $debug_flag == 1 ]
      then
        echo "DEBUG: exporting already set OPENSS_COMPARE_DATABASES to $OPENSS_COMPARE_DATABASES"
      fi
    fi
  fi

  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: about to call openss -offline for compare experiment, OPENSS_COMPARE_DATABASES=$OPENSS_COMPARE_DATABASES"
  fi
#  export OPENSS_COMPARE_DATABASES

  # funnel commands to compare databases into a file and then direct that file into openss
  # openss -offline -f "$1" fpe

echo $OPENSS_COMPARE_DATABASES > /tmp/$USER/osscompare_file2.csv
N=3
CR=$'\n'
#CR=$'\r'
while IFS= read -r line
do

#  echo "line=$line"

  db_file_input_split "$line"

# echo "%s\n" "${values[1]}" ## print field N (numbered from 0)

done < /tmp/$USER/osscompare_file2.csv

while read -r line
do

# echo "vnum_val line=$line"
 number_of_databases=$line
 let number_of_databases=$number_of_databases+1
# echo "number_of_databases=$number_of_databases"
  
done < /tmp/$USER/osscompare_vnum_val

# Check databases for type of experiment

for i in {0..7}
do

  if [ $i -ge $number_of_databases ] 
  then
    continue
  else
    if [ $debug_flag == 1 ]
    then
       echo "value[$i]=%s\n" "${values[$i]}" ## print field N (numbered from 0)
    fi
    j=($i + 1)
    dbase_name="dbase${j}_exptype.txt"
#    if [ $debug_flag == 1 ]
#    then
#      echo "dbase_name = $dbase_name"
#    fi
    echo "exprestore -f ${values[$i]}" > /tmp/$USER/osscompare_commands.txt
    echo "list -v exptypes > /tmp/$USER/dbase${j}_exptype.txt" >> /tmp/$USER/osscompare_commands.txt
#    echo "list -v exptypes > /tmp/$USER/$dbase_name" >> /tmp/$USER/osscompare_commands.txt

    openss -batch < /tmp/$USER/osscompare_commands.txt

    while read -r line
    do
     type_of_dbase[$i]=$line
     if [ $debug_flag == 1 ]
     then
       echo "database $i section line=$line"
       echo "type of database $i=${type_of_dbase[$i]}"
     fi
    done < /tmp/$USER/$dbase_name
  fi
done

# Validate that all the databases are of the same type


for i in {2..8}
do
   if [ $debug_flag == 1 ]
   then
     echo "Begin Looking at database $j and number of dbs is: $number_of_databases"
   fi
   if [ $i -gt  $number_of_databases ]
   then
     continue
   else
     j=$i-1
     if [ $debug_flag == 1 ]
     then
       echo "Looking at database 0 and database $j (j) i= $i"
     fi
     if [ "${type_of_dbase[0]}" == "${type_of_dbase[$j]}" ]
     then
       if [ $debug_flag == 1 ]
       then
          echo "GOOD in osscompare: Types of database compare files match: ${type_of_dbase[0]} is the same as ${type_of_dbase[$j]}" 
       fi
     else
        echo "[openss]: ERROR in osscompare: Types of database compare files must match: ${type_of_dbase[0]} is not the same as ${type_of_dbase[$j]}" 
        exit
     fi
   fi
done


# Make sure we handle the hardware counter experiments correctly,  time is not the correct
# metric for hwc, hwctime.  Must be counts.
if [ "$number_of_databases" -ge "2" ] 
then
   if [ "${type_of_dbase[0]}" == "hwc" -o "${type_of_dbase[0]}" == "hwctime" ]
   then
      echo "[openss]: NOTE; Must use the event counts as the metric for hwc and hwctime experiment comparisons." 
      echo "[openss]: NOTE; osscompare is overriding any specification and comparing with respect to the counts of events"
      use_compare_metric=counts
   elif [  "${type_of_dbase[0]}" == "hwcsamp" ]
   then
# FIXME - how do we get the event names to use as the compare metric
#      use_compare_metric=time
      use_compare_metric=time,allevents
   fi
fi


if [ "$number_of_databases" -ge "1" ] 
then
  if [ $debug_flag == 1 ]
  then
     echo "value[0]=%s\n" "${values[0]}" ## print field N (numbered from 0)
  fi
  echo "exprestore -f ${values[0]}" > /tmp/$USER/osscompare_commands.txt
  echo "cviewCreate -x 1 -m $use_compare_metric" >> /tmp/$USER/osscompare_commands.txt
fi
 
if [ "$number_of_databases" -ge "2" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "value[1]=%s\n" "${values[1]}" ## print field N (numbered from 0)
  fi
  echo "exprestore -f ${values[1]}" >> /tmp/$USER/osscompare_commands.txt
  echo "cviewCreate -x 3 -m $use_compare_metric" >> /tmp/$USER/osscompare_commands.txt
fi

if [ "$number_of_databases" -eq "2" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "create cview -c 2 -c 4" 
  fi

#  echo "${values[0]}" | tr -d '\.openss'
#  echo ${values[0]%.*}
#
#  echo "${values[1]}" | tr -d '\.openss'
#  echo ${values[1]%.*}

  if [ $create_csv_files -eq 1 ]
  then
    echo "cview -c 2 -c 4 > /tmp/$USER/${values[0]%.*}_${values[1]%.*}.compare.txt" >> /tmp/$USER/osscompare_commands.txt
  fi
  echo "cview -c 2 -c 4" >> /tmp/$USER/osscompare_commands.txt

fi

if [ "$number_of_databases" -ge "3" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "value[2]=%s\n" "${values[2]}" ## print field N (numbered from 0)
  fi
  echo "exprestore -f ${values[2]}" >> /tmp/$USER/osscompare_commands.txt
  echo "cviewCreate -x 5 -m $use_compare_metric" >> /tmp/$USER/osscompare_commands.txt
fi

if [ "$number_of_databases" -eq "3" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "create cview -c 2 -c 4 -c 6" 
  fi
  if [ $create_csv_files -eq 1 ]
  then
    echo "cview -c 2 -c 4 -c 6  > /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.compare.txt" >> /tmp/$USER/osscompare_commands.txt
  fi
  echo "cview -c 2 -c 4 -c 6" >> /tmp/$USER/osscompare_commands.txt
fi

if [ "$number_of_databases" -ge "4" ] 
then
  if [ $debug_flag == 1 ]
  then
    echo "value[3]=%s\n" "${values[3]}" ## print field N (numbered from 0)
  fi
  echo "exprestore -f ${values[3]}" >> /tmp/$USER/osscompare_commands.txt
  echo "cviewCreate -x 7 -m $use_compare_metric" >> /tmp/$USER/osscompare_commands.txt
fi

if [ "$number_of_databases" -eq "4" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "create cview -c 2 -c 4 -c 6 -c 8" 
  fi
  if [ $create_csv_files -eq 1 ]
  then
    echo "cview -c 2 -c 4 -c 6 -c 8 > /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.compare.txt" >> /tmp/$USER/osscompare_commands.txt
  fi
  echo "cview -c 2 -c 4 -c 6 -c 8" >> /tmp/$USER/osscompare_commands.txt
#  echo "quit" >> /tmp/$USER/osscompare_commands.txt
fi

# ----------- fifth database processing
if [ "$number_of_databases" -ge "5" ] 
then
  if [ $debug_flag == 1 ]
  then
    echo "value[4]=%s\n" "${values[4]}" ## print field N (numbered from 0)
  fi
  echo "exprestore -f ${values[4]}" >> /tmp/$USER/osscompare_commands.txt
  echo "cviewCreate -x 9 -m $use_compare_metric" >> /tmp/$USER/osscompare_commands.txt
fi

if [ "$number_of_databases" -eq "5" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "create cview -c 2 -c 4 -c 6 -c 8 -c 10" 
  fi
  if [ $create_csv_files -eq 1 ]
  then
    echo "cview -c 2 -c 4 -c 6 -c 8 -c 10 > /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.compare.txt" >> /tmp/$USER/osscompare_commands.txt
  fi
  echo "cview -c 2 -c 4 -c 6 -c 8 -c 10" >> /tmp/$USER/osscompare_commands.txt
#  echo "quit" >> /tmp/$USER/osscompare_commands.txt
fi

# ----------- sixth database processing
if [ "$number_of_databases" -ge "6" ] 
then
  if [ $debug_flag == 1 ]
  then
    echo "value[5]=%s\n" "${values[5]}" ## print field N (numbered from 0)
  fi
  echo "exprestore -f ${values[5]}" >> /tmp/$USER/osscompare_commands.txt
  echo "cviewCreate -x 11 -m $use_compare_metric" >> /tmp/$USER/osscompare_commands.txt
fi

if [ "$number_of_databases" -eq "6" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "create cview -c 2 -c 4 -c 6 -c 8 -c 10 -c 12" 
  fi
  if [ $create_csv_files -eq 1 ]
  then
    echo "cview -c 2 -c 4 -c 6 -c 8 -c 10 -c 12 > /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.compare.txt" >> /tmp/$USER/osscompare_commands.txt
  fi
  echo "cview -c 2 -c 4 -c 6 -c 8 -c 10 -c 12" >> /tmp/$USER/osscompare_commands.txt
#  echo "quit" >> /tmp/$USER/osscompare_commands.txt
fi

# ----------- seventh database processing
if [ "$number_of_databases" -ge "7" ] 
then
  if [ $debug_flag == 1 ]
  then
    echo "value[6]=%s\n" "${values[6]}" ## print field N (numbered from 0)
  fi
  echo "exprestore -f ${values[6]}" >> /tmp/$USER/osscompare_commands.txt
  echo "cviewCreate -x 13 -m $use_compare_metric" >> /tmp/$USER/osscompare_commands.txt
fi

if [ "$number_of_databases" -eq "7" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "create cview -c 2 -c 4 -c 6 -c 8 -c 10 -c 12 -c 14" 
  fi
  if [ $create_csv_files -eq 1 ]
  then
    echo "cview -c 2 -c 4 -c 6 -c 8 -c 10  -c 12 -c 14 > /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.compare.txt" >> /tmp/$USER/osscompare_commands.txt
  fi
  echo "cview -c 2 -c 4 -c 6 -c 8 -c 10 -c 12 -c 14" >> /tmp/$USER/osscompare_commands.txt
#  echo "quit" >> /tmp/$USER/osscompare_commands.txt
fi

# ----------- eighth database processing
if [ "$number_of_databases" -ge "8" ] 
then
  if [ $debug_flag == 1 ]
  then
    echo "value[7]=%s\n" "${values[7]}" ## print field N (numbered from 0)
  fi
  echo "exprestore -f ${values[7]}" >> /tmp/$USER/osscompare_commands.txt
  echo "cviewCreate -x 15 -m $use_compare_metric" >> /tmp/$USER/osscompare_commands.txt
fi

if [ "$number_of_databases" -eq "8" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "create cview -c 2 -c 4 -c 6 -c 8 -c 10 -c 12 -c 14 -c 16" 
  fi
  if [ $create_csv_files -eq 1 ]
  then
    echo "cview -c 2 -c 4 -c 6 -c 8 -c 10  -c 12 -c 14 -c 16 > /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.compare.txt" >> /tmp/$USER/osscompare_commands.txt
  fi
  echo "cview -c 2 -c 4 -c 6 -c 8 -c 10 -c 12 -c 14 -c 16" >> /tmp/$USER/osscompare_commands.txt
#  echo "quit" >> /tmp/$USER/osscompare_commands.txt
fi

# ----------------------------------------------------
# ----------------------------------------------------
# ----------------------------------------------------

if [ "$number_of_databases" -ge "2" ]
then
  echo "[openss]: Legend: -c 2 represents ${values[0]}"
  echo "[openss]: Legend: -c 4 represents ${values[1]}"
fi
if [ "$number_of_databases" -ge "3" ]
then
  echo "[openss]: Legend: -c 6 represents ${values[2]}"
fi
if [ "$number_of_databases" -ge "4" ]
then
  echo "[openss]: Legend: -c 8 represents ${values[3]}"
fi

if [ "$number_of_databases" -ge "5" ]
then
  echo "[openss]: Legend: -c 10 represents ${values[4]}"
fi

if [ "$number_of_databases" -ge "6" ]
then
  echo "[openss]: Legend: -c 12 represents ${values[5]}"
fi

if [ "$number_of_databases" -ge "7" ]
then
  echo "[openss]: Legend: -c 14 represents ${values[6]}"
fi

if [ "$number_of_databases" -ge "8" ]
then
  echo "[openss]: Legend: -c 16 represents ${values[7]}"
fi

openss -batch < /tmp/$USER/osscompare_commands.txt

if [ "$number_of_databases" -eq "2" ]
then
#
# First we handle the csv file then the normal output file
# Here we do a series of sed actions to convert the OpenSpeedShop normal output into a comma
# separated list which is able to be imported as a sheet from file to Excel like tools.  Please
# use the comma is a separator option when importing.
# 
  if [ $create_csv_files -eq 1 ]
  then
    sed 's/,/:/g' \
    /tmp/$USER/${values[0]%.*}_${values[1]%.*}.compare.txt \
    | sed -r 's/\s{3,100}/  /g' \
    | sed -r 's/^\s{4,4}/,/g' \
    | sed -r 's/^\s{2,2}//g' \
    | sed -r 's/\s{2,2}/,/g' \
    | sed '/^$/d' \
    | sed 's/-c [0-9*]://g' \
    > /tmp/$USER/old.${values[0]%.*}_${values[1]%.*}.compare_csv.csv
#
# Now add the header information to the temporary csv file.
#
    echo "${values[0]},${values[1]},Functions" > /tmp/$USER/${values[0]%.*}_${values[1]%.*}.header.txt 
    cat /tmp/$USER/${values[0]%.*}_${values[1]%.*}.header.txt /tmp/$USER/old.${values[0]%.*}_${values[1]%.*}.compare_csv.csv > ${values[0]%.*}_${values[1]%.*}.compare_csv.csv
  fi
#
# Now add the header information to the screen output results.
#
  echo "" > /tmp/$USER/${values[0]%.*}_${values[1]%.*}.legends.txt
  echo "[openss]: Comparing ${values[0]} to ${values[1]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}.legends.txt
  echo "[openss]: Legend: -c 2 represents ${values[0]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}.legends.txt
  echo "[openss]: Legend: -c 4 represents ${values[1]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}.legends.txt
  echo "" >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}.legends.txt
  if [ $create_csv_files -eq 1 ]
  then
    cat /tmp/$USER/${values[0]%.*}_${values[1]%.*}.legends.txt /tmp/$USER/${values[0]%.*}_${values[1]%.*}.compare.txt > ${values[0]%.*}_${values[1]%.*}.compare.txt
  fi
fi

if [ "$number_of_databases" -eq "3" ]
then
#
# First we handle the csv file then the normal output file
# Here we do a series of sed actions to convert the OpenSpeedShop normal output into a comma
# separated list which is able to be imported as a sheet from file to Excel like tools.  Please
# use the comma is a separator option when importing.
#
  if [ $create_csv_files -eq 1 ]
  then
    sed 's/,/:/g' \
    /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.compare.txt  \
    | sed -r 's/\s{3,100}/  /g' \
    | sed -r 's/^\s{4,4}/,/g' \
    | sed -r 's/^\s{2,2}//g' \
    | sed -r 's/\s{2,2}/,/g' \
    | sed '/^$/d' \
    | sed 's/-c [0-9*]://g' \
    > /tmp/$USER/old.${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.compare_csv.csv

#
# Now add the header information to the temporary csv file to create the final csv file.
#
    echo "${values[0]},${values[1]},${values[2]},Functions" > /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.header.txt 
    cat /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.header.txt /tmp/$USER/old.${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.compare_csv.csv > ${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.compare_csv.csv
  fi
#
# Now add the header information to the screen output results.
#
  echo "" > /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.legends.txt
  echo "[openss]: Comparing ${values[0]} to ${values[1]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.legends.txt
  echo "[openss]: Legend: -c 2 represents ${values[0]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.legends.txt
  echo "[openss]: Legend: -c 4 represents ${values[1]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.legends.txt
  echo "[openss]: Legend: -c 6 represents ${values[2]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.legends.txt
  echo "" >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.legends.txt
  if [ $create_csv_files -eq 1 ]
  then
    cat /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.legends.txt /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.compare.txt > ${values[0]%.*}_${values[1]%.*}_${values[2]%.*}.compare.txt

  fi
fi

if [ "$number_of_databases" -eq "4" ]
then
#
# First we handle the csv file then the normal output file
# Here we do a series of sed actions to convert the OpenSpeedShop normal output into a comma
# separated list which is able to be imported as a sheet from file to Excel like tools.  Please
# use the comma is a separator option when importing.
#
  if [ $create_csv_files -eq 1 ]
  then
    sed 's/,/:/g' \
    /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.compare.txt \
    | sed -r 's/\s{3,100}/  /g' \
    | sed -r 's/^\s{4,4}/,/g' \
    | sed -r 's/^\s{2,2}//g' \
    | sed -r 's/\s{2,2}/,/g' \
    | sed '/^$/d' \
    | sed 's/-c [0-9*]://g' \
    > /tmp/$USER/old.${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.compare_csv.csv

#
# Now add the header information to the temporary csv file to create the final csv file.
#
    echo "${values[0]},${values[1]},${values[2]},${values[3]},Functions" > /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.header.txt 
    cat /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.header.txt /tmp/$USER/old.${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.compare_csv.csv > ${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.compare_csv.csv
  fi

#
# Now add the header information to the screen output results.
#
  echo "[openss]: Comparing ${values[0]} to ${values[1]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.legends.txt
  echo "[openss]: Legend: -c 2 represents ${values[0]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.legends.txt
  echo "[openss]: Legend: -c 4 represents ${values[1]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.legends.txt
  echo "[openss]: Legend: -c 6 represents ${values[2]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.legends.txt
  echo "[openss]: Legend: -c 8 represents ${values[3]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.legends.txt
  echo "" >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.legends.txt
  if [ $create_csv_files -eq 1 ]
  then
    cat /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.legends.txt /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.compare.txt > ${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}.compare.txt
  fi
fi

if [ "$number_of_databases" -eq "5" ]
then
#
# First we handle the csv file then the normal output file
# Here we do a series of sed actions to convert the OpenSpeedShop normal output into a comma
# separated list which is able to be imported as a sheet from file to Excel like tools.  Please
# use the comma is a separator option when importing.
#
  if [ $create_csv_files -eq 1 ]
  then
    sed 's/,/:/g' \
    /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.compare.txt \
    | sed -r 's/\s{3,100}/  /g' \
    | sed -r 's/^\s{4,4}/,/g' \
    | sed -r 's/^\s{2,2}//g' \
    | sed -r 's/\s{2,2}/,/g' \
    | sed '/^$/d' \
    | sed 's/-c [0-9*]://g' \
    > /tmp/$USER/old.${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.compare_csv.csv

#
# Now add the header information to the temporary csv file to create the final csv file.
#
    echo "${values[0]},${values[1]},${values[2]},${values[3]},${values[4]},Functions" > /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.header.txt 
    cat /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.header.txt /tmp/$USER/old.${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.compare_csv.csv > ${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.compare_csv.csv
  fi

#
# Now add the header information to the screen output results.
#
  echo "[openss]: Comparing ${values[0]} to ${values[1]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.legends.txt
  echo "[openss]: Legend: -c 2 represents ${values[0]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.legends.txt
  echo "[openss]: Legend: -c 4 represents ${values[1]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.legends.txt
  echo "[openss]: Legend: -c 6 represents ${values[2]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.legends.txt
  echo "[openss]: Legend: -c 8 represents ${values[3]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.legends.txt
  echo "[openss]: Legend: -c 10 represents ${values[4]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.legends.txt
  echo "" >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.legends.txt
  if [ $create_csv_files -eq 1 ]
  then
    cat /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.legends.txt /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.compare.txt > ${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}.compare.txt
  fi
fi

if [ "$number_of_databases" -eq "6" ]
then
#
# First we handle the csv file then the normal output file
# Here we do a series of sed actions to convert the OpenSpeedShop normal output into a comma
# separated list which is able to be imported as a sheet from file to Excel like tools.  Please
# use the comma is a separator option when importing.
#
  if [ $create_csv_files -eq 1 ]
  then
    sed 's/,/:/g' \
    /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.compare.txt \
    | sed -r 's/\s{3,100}/  /g' \
    | sed -r 's/^\s{4,4}/,/g' \
    | sed -r 's/^\s{2,2}//g' \
    | sed -r 's/\s{2,2}/,/g' \
    | sed '/^$/d' \
    | sed 's/-c [0-9*]://g' \
    > /tmp/$USER/old.${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.compare_csv.csv

#
# Now add the header information to the temporary csv file to create the final csv file.
#
    echo "${values[0]},${values[1]},${values[2]},${values[3]},${values[4]},${values[5]},Functions" > /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.header.txt 
    cat /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.header.txt /tmp/$USER/old.${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.compare_csv.csv > ${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.compare_csv.csv
  fi

#
# Now add the header information to the screen output results.
#
  echo "[openss]: Comparing ${values[0]} to ${values[1]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.legends.txt
  echo "[openss]: Legend: -c 2 represents ${values[0]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.legends.txt
  echo "[openss]: Legend: -c 4 represents ${values[1]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.legends.txt
  echo "[openss]: Legend: -c 6 represents ${values[2]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.legends.txt
  echo "[openss]: Legend: -c 8 represents ${values[3]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.legends.txt
  echo "[openss]: Legend: -c 10 represents ${values[4]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.legends.txt
  echo "[openss]: Legend: -c 12 represents ${values[5]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.legends.txt
  echo "" >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.legends.txt
  if [ $create_csv_files -eq 1 ]
  then
    cat /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.legends.txt /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.compare.txt > ${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}.compare.txt
  fi
fi

if [ "$number_of_databases" -eq "7" ]
then
#
# First we handle the csv file then the normal output file
# Here we do a series of sed actions to convert the OpenSpeedShop normal output into a comma
# separated list which is able to be imported as a sheet from file to Excel like tools.  Please
# use the comma is a separator option when importing.
#
  if [ $create_csv_files -eq 1 ]
  then
    sed 's/,/:/g' \
    /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.compare.txt \
    | sed -r 's/\s{3,100}/  /g' \
    | sed -r 's/^\s{4,4}/,/g' \
    | sed -r 's/^\s{2,2}//g' \
    | sed -r 's/\s{2,2}/,/g' \
    | sed '/^$/d' \
    | sed 's/-c [0-9*]://g' \
    > /tmp/$USER/old.${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.compare_csv.csv

#
# Now add the header information to the temporary csv file to create the final csv file.
#
    echo "${values[0]},${values[1]},${values[2]},${values[3]},${values[4]},${values[5]},${values[6]},Functions" > /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.header.txt 
    cat /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.header.txt /tmp/$USER/old.${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.compare_csv.csv > ${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.compare_csv.csv
  fi

#
# Now add the header information to the screen output results.
#
  echo "[openss]: Comparing ${values[0]} to ${values[1]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.legends.txt
  echo "[openss]: Legend: -c 2 represents ${values[0]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.legends.txt
  echo "[openss]: Legend: -c 4 represents ${values[1]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.legends.txt
  echo "[openss]: Legend: -c 6 represents ${values[2]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.legends.txt
  echo "[openss]: Legend: -c 8 represents ${values[3]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.legends.txt
  echo "[openss]: Legend: -c 10 represents ${values[4]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.legends.txt
  echo "[openss]: Legend: -c 12 represents ${values[5]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.legends.txt
  echo "[openss]: Legend: -c 14 represents ${values[6]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.legends.txt
  echo "" >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.legends.txt
  if [ $create_csv_files -eq 1 ]
  then
    cat /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.legends.txt /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.compare.txt > ${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}.compare.txt
  fi
fi


if [ "$number_of_databases" -eq "7" ]
then
#
# First we handle the csv file then the normal output file
# Here we do a series of sed actions to convert the OpenSpeedShop normal output into a comma
# separated list which is able to be imported as a sheet from file to Excel like tools.  Please
# use the comma is a separator option when importing.
#
  if [ $create_csv_files -eq 1 ]
  then
    sed 's/,/:/g' \
    /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.compare.txt \
    | sed -r 's/\s{3,100}/  /g' \
    | sed -r 's/^\s{4,4}/,/g' \
    | sed -r 's/^\s{2,2}//g' \
    | sed -r 's/\s{2,2}/,/g' \
    | sed '/^$/d' \
    | sed 's/-c [0-9*]://g' \
    > /tmp/$USER/old.${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.compare_csv.csv

#
# Now add the header information to the temporary csv file to create the final csv file.
#
    echo "${values[0]},${values[1]},${values[2]},${values[3]},${values[4]},${values[5]},${values[6]},${values[7]},Functions" > /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.header.txt 
    cat /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.header.txt /tmp/$USER/old.${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.compare_csv.csv > ${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.compare_csv.csv
  fi

#
# Now add the header information to the screen output results.
#
  echo "[openss]: Comparing ${values[0]} to ${values[1]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.legends.txt
  echo "[openss]: Legend: -c 2 represents ${values[0]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.legends.txt
  echo "[openss]: Legend: -c 4 represents ${values[1]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.legends.txt
  echo "[openss]: Legend: -c 6 represents ${values[2]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.legends.txt
  echo "[openss]: Legend: -c 8 represents ${values[3]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.legends.txt
  echo "[openss]: Legend: -c 10 represents ${values[4]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.legends.txt
  echo "[openss]: Legend: -c 12 represents ${values[5]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.legends.txt
  echo "[openss]: Legend: -c 14 represents ${values[6]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.legends.txt
  echo "[openss]: Legend: -c 16 represents ${values[7]}" \
       >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.legends.txt
  echo "" >> /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.legends.txt
  if [ $create_csv_files -eq 1 ]
  then
    cat /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.legends.txt /tmp/$USER/${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.compare.txt > ${values[0]%.*}_${values[1]%.*}_${values[2]%.*}_${values[3]%.*}_${values[4]%.*}_${values[5]%.*}_${values[6]%.*}_${values[7]%.*}.compare.txt
  fi
fi

fi
# ------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------
