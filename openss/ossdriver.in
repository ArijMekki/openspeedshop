#!/bin/bash
################################################################################
# Display Usage When Necessary
################################################################################
debug_flag=0

# Initialize to indicate no "high" parameter was seen
# If this is set we will up the sampling rate or threshold depending on the experiment
high_flag=0

# Initialize to indicate no "low" parameter was seen
# If this is set we will lower the sampling rate or threshold depending on the experiment
low_flag=0

# Initialize to indicate no "default" parameter was seen
# If this is set we will use the default sampling rate or default threshold depending on the experiment
use_default_flag=0

# Initialize to indicate no "input argument rate value" parameter was seen
# If this is set we will use the "input argument rate value" parameter instead of the experiment default value
input_argument_rate_threshold_value=0

# Initialize to indicate no "input argument event value" parameter was seen
# If this is set we will use the "input argument event value" parameter instead of the experiment default event value
input_argument_event_value=0

#
# DEFAULT VALUES - MUST MATCH THE DEFAULTS INSIDE THE OpenSpeedShop/plugins/collectors/<experiment_type> source
#
pcsamp_default_rate=100
usertime_default_rate=35
hwc_default_event="PAPI_TOT_CYC"
hwc_default_threshold=10000
hwctime_default_event="PAPI_TOT_CYC"
hwctime_default_threshold=10000
#
# END DEFAULT VALUES
#

if [ $debug_flag == 1 ]
then
  echo
  echo "DEBUG: ossdriver command-line argument #0 = $0"
  echo "DEBUG: ossdriver command-line argument #1 = $1"
  echo "DEBUG: ossdriver command-line argument #2 = $2"
  echo "DEBUG: ossdriver command-line argument #3 = $3"
  echo "DEBUG: ossdriver command-line argument #4 = $4"
  echo
fi

calling_script_name=$0
experiment_name=${calling_script_name##*/}

if [ -z "$1" ] 
then
   echo ""
   echo "Usage: $0 \"executable\" [extra_args]"
   echo "Usage: $0 help or --help"
   echo ""
   echo "    where \"executable\" is defined as the command that you normally use to execute your program: but in quotes"
   echo "    For example: $0 \"mpirun -N 16 -n 256 ./smg2000 -n 50 50 50\" [extra_args]"
   echo "        where the optional \"extra_args\" is defined as follows:"
   echo "            \"high\"     - Increase the default sampling rate or threshold value to increase the number of samples taken."
   echo "            \"low\"      - Decrease the default sampling rate or threshold value to decrease the number of samples taken."
   echo "            \"default\"  - Use the default sampling rate or threshold value. This will override any environment variable settings."
   if [[ "$experiment_name" == "osspcsamp" || "$experiment_name" == "ossusertime" ]]; then
     echo "            \"rate value\"  - Use this sampling rate or threshold value instead of the default or any environment variable settings."
   elif [[ "$experiment_name" == "osshwc" || "$experiment_name" == "osshwctime" ]]; then
     echo "            \"papi_event\"       - Specify the papi event."
     echo "            \"threshold value\"  - Use this threshold value for the specified pape_event instead of the default or any environment variable settings."
   fi
   echo ""
   exit
elif [[ "$1" == "help" ||  "$1" == "--help" ]] 
then
   echo ""
   echo "Usage: $0 \"executable\" [extra_args]"
   echo "Usage: $0 help"
   echo "    where \"executable\" is defined as the command that you normally use to execute your program: but in quotes"
   echo ""
   echo "For example: $0 \"mpirun -N 16 -n 256 ./smg2000 -n 50 50 50\" [extra_args]"
   echo "    where the optional \"extra_args\" is defined as follows:"
   echo "            \"high\"     - Increase the default sampling rate or threshold value to increase the number of samples taken."
   echo "            \"low\"      - Decrease the default sampling rate or threshold value to decrease the number of samples taken."
   echo "            \"default\"  - Use the default sampling rate or threshold value. This will override any environment variable settings."
   echo "            \"rate value\"  - Use this sampling rate or threshold value instead of the default or any environment variable settings."
   echo ""
   exit
fi


if [ -z "$2" ] 
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: ossdriver command-line argument #2 was not specified"
  fi
else
#
# There is an argument 2
#
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: ossdriver command-line argument #2 = $2"
  fi
  if  [ "$2" == "high" ]
  then
     high_flag=1
  elif  [ "$2" == "low" ]
  then
     low_flag=1
  elif  [ "$2" == "default" ]
  then
     use_default_flag=1
  else
     match=0
     if [[ "$experiment_name" == "osshwc" || "$experiment_name" == "osshwctime" ]]; then
       # check for PAPI_ in name 
       match=`expr match "$2" 'PAPI_'`
       if [ $match == 0 ]
       then

          if [ $debug_flag == 1 ]
          then
            echo "DEBUG: $2 does NOT contain PAPI_ substring"
          fi

          # Do we assume it is the threshold, yes for now
          input_argument_rate_threshold_value=$2

       else 
          if [ $debug_flag == 1 ]
          then
            echo "DEBUG: $2 contains PAPI_ substring, setting input_argument_event_value=$2"
          fi
          input_argument_event_value=$2
       fi
     else
        input_argument_rate_threshold_value=$2
     fi
  fi

fi

# Look for argument 3

if [ -z "$3" ] 
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: ossdriver command-line argument #3 was not specified"
  fi
else
#
# There is an argument 3
#
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: ossdriver command-line argument #3 = $3"
  fi
  if  [ "$3" == "high" ]
  then
     high_flag=1
  elif  [ "$3" == "low" ]
  then
     low_flag=1
  elif  [ "$3" == "default" ]
  then
     use_default_flag=1
  else
     match=0
     if [[ "$experiment_name" == "osshwc" || "$experiment_name" == "osshwctime" ]]; then
        # We have seen the PAPI_event, so the next argument must be the threshold value
        if [ $input_argument_event_value != 0 ]
        then
          input_argument_rate_threshold_value=$3
        fi
     fi
  fi

fi

################################################################################
# Run Open|SpeedShop
################################################################################
if [ $debug_flag == 1 ]
then
  echo "DEBUG: experiment_name=$experiment_name"
  echo "DEBUG: high_flag=$high_flag"
  echo "DEBUG: low_flag=$low_flag"
  echo "DEBUG: use_default_flag=$use_default_flag"
  echo "DEBUG: input_argument_rate_threshold_value=$input_argument_rate_threshold_value"
  echo "DEBUG: input_argument_event_value=$input_argument_event_value"
  echo "DEBUG: input_argument_rate_threshold_value=$input_argument_rate_threshold_value"
fi

# ------------------------------------------------------------------------------------
# -- PCSAMP EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
if [ $experiment_name == "osspcsamp" ]
then

  if [ $debug_flag == 1 ]
  then 
    if [ -z "$OPENSS_PCSAMP_RATE" ] 
    then 
      echo "DEBUG: in PCSAMP EXPERIMENT SECTION, NOT SET, OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE"
    else
      echo "DEBUG: in PCSAMP EXPERIMENT SECTION, IS SET, OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE"
    fi
  fi

  if [ $low_flag == 1 ]
  then
     rate=$pcsamp_default_rate
     let rate=rate/2
     if [ -z "$OPENSS_PCSAMP_RATE" ] 
     then
       echo "[openss]: pcsamp experiment using sampling rate: \"$rate\" because the \"low\" parameter is specified."
     else
       echo "[openss]: pcsamp experiment OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE is set and will be altered to \"$rate\" because the \"low\" parameter is specified."
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: pcsamp, rate=$rate"
     fi
     OPENSS_PCSAMP_RATE=$rate
     export OPENSS_PCSAMP_RATE
     if [ $debug_flag == 1 ]
     then 
        echo "DEBUG: in PCSAMP EXPERIMENT SECTION, RESET low, OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE"
     fi
  elif [ $high_flag == 1 ]
  then
     rate=$pcsamp_default_rate
     let rate=rate*4
     if [ -z "$OPENSS_PCSAMP_RATE" ] 
     then
       echo "[openss]: pcsamp experiment using sampling rate: \"$rate\" because the \"high\" parameter is specified."
     else
       echo "[openss]: pcsamp experiment OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE is set and will be altered to \"$rate\" because the \"high\" parameter is specified."
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: pcsamp, rate=$rate"
     fi
     OPENSS_PCSAMP_RATE=$rate
     export OPENSS_PCSAMP_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in PCSAMP EXPERIMENT SECTION, RESET high, OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE"
     fi
  elif [ $use_default_flag == 1 ]
  then
     if [ -z "$OPENSS_PCSAMP_RATE" ] 
     then
       echo "[openss]: pcsamp experiment using sampling rate: \"$rate\" because the \"default\" parameter is specified."
     else
       if [ $pcsamp_default_rate != $OPENSS_PCSAMP_RATE ]
       then
         echo "[openss]: pcsamp experiment OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE is set and will be altered to \"$pcsamp_default_rate\" because the \"default\" parameter is specified."
       fi
     fi
     rate=$pcsamp_default_rate
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: pcsamp, default, rate=$rate"
     fi
     OPENSS_PCSAMP_RATE=$rate
     export OPENSS_PCSAMP_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in PCSAMP EXPERIMENT SECTION, RESET default, OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE"
     fi
  elif [ $input_argument_rate_threshold_value != 0 ]
  then
     if [ -z "$OPENSS_PCSAMP_RATE" ] 
     then
       echo "[openss]: pcsamp experiment using sampling rate: \"$input_argument_rate_threshold_value\" because \"rate value\" parameter is specified."
     else
       if [ $input_argument_rate_threshold_value != $OPENSS_PCSAMP_RATE ]
       then
         echo "[openss]: pcsamp experiment OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE is set and will be altered to \"$input_argument_rate_threshold_value\" because the \"rate value\" parameter is specified."
       fi
     fi
     rate=$input_argument_rate_threshold_value
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: pcsamp, input argument rate threshold value, rate=$rate"
     fi
     OPENSS_PCSAMP_RATE=$rate
     export OPENSS_PCSAMP_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in PCSAMP EXPERIMENT SECTION, RESET input_argument_rate_threshold_value, OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE"
     fi
     
  else
     if [ -z "$OPENSS_PCSAMP_RATE" ] 
     then
       echo "[openss]: pcsamp experiment using the pcsamp experiment default sampling rate: \"$pcsamp_default_rate\"."
     else
       echo "[openss]: pcsamp experiment OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE is set and will be used as the sampling rate."
     fi
  fi 

  openss -offline -f "$1" pcsamp

# ------------------------------------------------------------------------------------
# -- USERTIME EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "ossusertime" ]
then

  if [ $debug_flag == 1 ]
  then
    if [ -z "$OPENSS_USERTIME_RATE" ] 
    then
      echo "DEBUG: in USERTIME EXPERIMENT SECTION, NOT SET, OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE"
    else
      echo "DEBUG: in USERTIME EXPERIMENT SECTION, IS SET, OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE"
    fi
  fi

  if [ $low_flag == 1 ]
  then
     rate=$usertime_default_rate
     let rate=rate/2
     if [ -z "$OPENSS_USERTIME_RATE" ] 
     then
       echo "[openss]: usertime experiment using sampling rate: \"$rate\" because the \"low\" parameter is specified."
     else
       echo "[openss]: usertime experiment OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE is set and will be altered to \"$rate\" because the \"low\" parameter is specified."
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: rate=$rate"
     fi
     OPENSS_USERTIME_RATE=$rate
     export OPENSS_USERTIME_RATE
     if [ $debug_flag == 1 ]
     then 
        echo "DEBUG: in USERTIME EXPERIMENT SECTION, RESET low, OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE"
     fi
  elif [ $high_flag == 1 ]
  then
     rate=$usertime_default_rate
#     rate=$OPENSS_USERTIME_RATE
     let rate=rate*4
     if [ -z "$OPENSS_USERTIME_RATE" ] 
     then
       echo "[openss]: usertime experiment using sampling rate: \"$rate\" because the \"high\" parameter is specified."
     else
       echo "[openss]: usertime experiment OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE is set and will be altered to \"$rate\" because the \"high\" parameter is specified."
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: rate=$rate"
     fi
     OPENSS_USERTIME_RATE=$rate
     export OPENSS_USERTIME_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in USERTIME EXPERIMENT SECTION, RESET high, OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE"
     fi
  elif [ $use_default_flag == 1 ]
  then
     if [ -z "$OPENSS_USERTIME_RATE" ] 
     then

       echo "[openss]: usertime experiment using sampling rate: \"$rate\" because the \"default\" parameter is specified."

     else

       if [ $usertime_default_rate != $OPENSS_USERTIME_RATE ]
       then
         echo "[openss]: usertime experiment OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE is set and will be altered to \"$usertime_default_rate\" because the \"default\" parameter is specified."
       fi
     fi

     rate=$usertime_default_rate
     echo "DEBUG: rate=$rate"
     OPENSS_USERTIME_RATE=$rate
     export OPENSS_USERTIME_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in USERTIME EXPERIMENT SECTION, RESET default, OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE"
     fi
  elif [ $input_argument_rate_threshold_value != 0 ]
  then
     if [ -z "$OPENSS_USERTIME_RATE" ] 
     then
       echo "[openss]: usertime experiment using sampling rate: \"$input_argument_rate_threshold_value\" because \"rate value\" parameter is specified."
     else
       if [ $input_argument_rate_threshold_value != $OPENSS_USERTIME_RATE ]
       then
         echo "[openss]: usertime experiment OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE is set and will be altered to \"$input_argument_rate_threshold_value\" because the \"rate value\" parameter is specified."
       fi
     fi
     rate=$input_argument_rate_threshold_value
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: rate=$rate"
     fi
     OPENSS_USERTIME_RATE=$rate
     export OPENSS_USERTIME_RATE
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in USERTIME EXPERIMENT SECTION, RESET input_argument_rate_threshold_value, OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE"
     fi
  else
     if [ -z "$OPENSS_USERTIME_RATE" ] 
     then
       echo "[openss]: usertime experiment using the usertime experiment default sampling rate: \"$usertime_default_rate\"."
     else
       echo "[openss]: usertime experiment OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE is set and will be used as the sampling rate."
     fi
  fi 

  openss -offline -f "$1" usertime

# ------------------------------------------------------------------------------------
# -- HWC EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "osshwc" ]
then

  if [ $debug_flag == 1 ]
  then

    if [ -z "$OPENSS_HWC_EVENT" ] 
    then
      echo "DEBUG: in HWC EXPERIMENT SECTION, NOT SET, OPENSS_HWC_EVENT=$OPENSS_HWC_EVENT"
    else
      echo "DEBUG: in HWC EXPERIMENT SECTION, IS SET, OPENSS_HWC_EVENT=$OPENSS_HWC_EVENT"
    fi

    if [ -z "$OPENSS_HWC_THRESHOLD" ] 
    then
      echo "DEBUG: in HWC EXPERIMENT SECTION, NOT SET, OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD"
    else
      echo "DEBUG: in HWC EXPERIMENT SECTION, IS SET, OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD"
    fi

  fi

  if [ $low_flag == 1 ]
  then
     threshold=$hwc_default_threshold
     let threshold=threshold/2
     if [ -z "$OPENSS_HWC_THRESHOLD" ] 
     then
       if [ -z "$OPENSS_HWC_EVENT" ] 
       then
         if [ $input_argument_event_value != 0 ]
         then
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
         else
           echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
         fi
         echo "[openss]: hwc experiment using sampling threshold: \"$threshold\" because the \"low\" parameter is specified."
       else
         if [ $input_argument_event_value != 0 ]
         then
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
         else
           echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
         fi
         echo "[openss]: hwc experiment using sampling threshold: \"$threshold\" because the \"low\" parameter is specified."
       fi
     else
       if [ -z "$OPENSS_HWC_EVENT" ] 
       then
         if [ $input_argument_event_value != 0 ]
         then
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
         else
           echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
         fi
         echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be altered to \"$threshold\" because the \"low\" parameter is specified."
       else
         if [ $input_argument_event_value != 0 ]
         then
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
         else
           echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
         fi
         echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be altered to \"$threshold\" because the \"low\" parameter is specified."
       fi
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: threshold=$threshold"
     fi
     OPENSS_HWC_THRESHOLD=$threshold
     export OPENSS_HWC_THRESHOLD
     if [ $debug_flag == 1 ]
     then 
        echo "DEBUG: in HWC EXPERIMENT SECTION, RESET low, OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD"
     fi
  elif [ $high_flag == 1 ]
  then
     threshold=$hwc_default_threshold
#     threshold=$OPENSS_HWC_THRESHOLD
     let threshold=threshold*4
     if [ -z "$OPENSS_HWC_THRESHOLD" ] 
     then
       if [ -z "$OPENSS_HWC_EVENT" ] 
       then
         if [ $input_argument_event_value != 0 ]
         then
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
         else
           echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
         fi
         echo "[openss]: hwc experiment using sampling threshold: \"$threshold\" because the \"high\" parameter is specified."
       else
         if [ $input_argument_event_value != 0 ]
         then
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
         else
           echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
         fi
         echo "[openss]: hwc experiment using sampling threshold: \"$threshold\" because the \"high\" parameter is specified."
       fi
     else
       if [ -z "$OPENSS_HWC_EVENT" ] 
       then
         if [ $input_argument_event_value != 0 ]
         then
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
         else
           echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
         fi
         echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be altered to \"$threshold\" because the \"high\" parameter is specified."
       else
         if [ $input_argument_event_value != 0 ]
         then
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
         else
           echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
         fi
         echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be altered to \"$threshold\" because the \"high\" parameter is specified."
       fi
     fi
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: threshold=$threshold"
     fi
     OPENSS_HWC_THRESHOLD=$threshold
     export OPENSS_HWC_THRESHOLD
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in HWC EXPERIMENT SECTION, RESET high, OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD"
     fi
  elif [ $use_default_flag == 1 ]
  then
     if [ -z "$OPENSS_HWC_THRESHOLD" ] 
     then
       if [ -z "$OPENSS_HWC_EVENT" ] 
       then
         if [ $input_argument_event_value != 0 ]
         then
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
         else
           echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
         fi
         echo "[openss]: hwc experiment using sampling threshold: \"$hwc_default_threshold\" because the \"default\" parameter is specified."
       else
         if [ $input_argument_event_value != 0 ]
         then
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
         else
           echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
         fi
         echo "[openss]: hwc experiment using sampling threshold: \"$hwc_default_threshold\" because the \"default\" parameter is specified."
       fi
     else
       if [ $hwc_default_threshold != $OPENSS_HWC_THRESHOLD ]
       then
         if [ -z "$OPENSS_HWC_EVENT" ] 
         then
           if [ $input_argument_event_value != 0 ]
           then
             echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
           else
             echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
           fi
           echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be altered to \"$hwc_default_threshold\" because the \"default\" parameter is specified."
         else
           if [ $input_argument_event_value != 0 ]
           then
             echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
           else
             echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
           fi
           echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be altered to \"$hwc_default_threshold\" because the \"default\" parameter is specified."
         fi
       fi
     fi

     threshold=$hwc_default_threshold
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: threshold=$threshold"
     fi
     OPENSS_HWC_THRESHOLD=$threshold
     export OPENSS_HWC_THRESHOLD
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in HWC EXPERIMENT SECTION, RESET default, OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD"
     fi
  elif [ $input_argument_rate_threshold_value != 0 ]
  then
     if [ -z "$OPENSS_HWC_THRESHOLD" ] 
     then
       if [ -z "$OPENSS_HWC_EVENT" ] 
       then
         if [ $input_argument_event_value != 0 ]
         then
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
         else
           echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
         fi
         echo "[openss]: hwc experiment using sampling threshold: \"$input_argument_rate_threshold_value\" because \"rate value\" parameter is specified."
       else
         if [ $input_argument_event_value != 0 ]
         then
           echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
         else
           echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
         fi
         echo "[openss]: hwc experiment using sampling threshold: \"$input_argument_rate_threshold_value\" because \"rate value\" parameter is specified."
       fi
     else
       if [ $input_argument_rate_threshold_value != $OPENSS_HWC_THRESHOLD ]
       then
         if [ -z "$OPENSS_HWC_EVENT" ] 
         then
           if [ $input_argument_event_value != 0 ]
           then
             echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
           else
             echo "[openss]: hwc experiment using default papi event: \"$hwc_default_event\"."
           fi
           echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be altered to \"$input_argument_rate_threshold_value\" because the \"rate value\" parameter is specified."
         else
           if [ $input_argument_event_value != 0 ]
           then
             echo "[openss]: hwc experiment using input papi event: \"$input_argument_event_value\"."
           else
             echo "[openss]: hwc experiment using papi event: \"$OPENSS_HWC_EVENT\" because the OPENSS_HWC_EVENT environment variable is set."
           fi
           echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be altered to \"$input_argument_rate_threshold_value\" because the \"rate value\" parameter is specified."
         fi
       fi
     fi
     threshold=$input_argument_rate_threshold_value
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: threshold=$threshold"
     fi
     OPENSS_HWC_THRESHOLD=$threshold
     export OPENSS_HWC_THRESHOLD
     if [ $debug_flag == 1 ]
     then 
       echo "DEBUG: in HWC EXPERIMENT SECTION, RESET input_argument_rate_threshold_value, OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD"
     fi
  else
     if [ -z "$OPENSS_HWC_THRESHOLD" ] 
     then
       echo "[openss]: hwc experiment using the hwc experiment default sampling threshold: \"$hwc_default_threshold\"."
     else
       echo "[openss]: hwc experiment OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD is set and will be used as the sampling threshold."
     fi
  fi 

# The messages above should reflect whether this is set or not.  Now export the input event, if it was specified
  if [ $input_argument_event_value != 0 ]
  then 
    OPENSS_HWC_EVENT=$input_argument_event_value
    export OPENSS_HWC_EVENT
  fi

  if [ $debug_flag == 1 ] 
  then
    echo "DEBUG: about to run \"openss -offline -f "$1" hwc, OPENSS_HWC_EVENT=$OPENSS_HWC_EVENT"
    echo "DEBUG: about to run \"openss -offline -f "$1" hwc, OPENSS_HWC_THRESHOLD=$OPENSS_HWC_THRESHOLD"
  fi

  openss -offline -f "$1" hwc

# ------------------------------------------------------------------------------------
# -- HWCTIME EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "osshwctime" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: in HWCTIME EXPERIMENT SECTION"
  fi
  openss -offline -f "$1" hwctime
# ------------------------------------------------------------------------------------
# -- IO EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "ossio" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: in IO EXPERIMENT SECTION"
  fi
  openss -offline -f "$1" io
# ------------------------------------------------------------------------------------
# -- IOT EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "ossiot" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: in IOT EXPERIMENT SECTION"
  fi
  openss -offline -f "$1" iot
# ------------------------------------------------------------------------------------
# -- MPI EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "ossmpi" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: in MPI EXPERIMENT SECTION"
  fi
  openss -offline -f "$1" mpi
# ------------------------------------------------------------------------------------
# -- MPIT EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "ossmpit" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: in MPIT EXPERIMENT SECTION"
  fi
  openss -offline -f "$1" mpit
# ------------------------------------------------------------------------------------
# -- MPIOTF EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "ossmpiotf" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: in MPIOTF EXPERIMENT SECTION"
  fi
  openss -offline -f "$1" mpiotf
# ------------------------------------------------------------------------------------
# -- FPE EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------
elif  [ $experiment_name == "ossfpe" ]
then
  if [ $debug_flag == 1 ]
  then
    echo "DEBUG: in FPE EXPERIMENT SECTION"
  fi
  openss -offline -f "$1" fpe
fi
# ------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------





